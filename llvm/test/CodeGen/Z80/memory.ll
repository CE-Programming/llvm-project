; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=z80 < %s | FileCheck %s --check-prefixes=Z80
; RUN: llc -mtriple=ez80-code16 < %s | FileCheck %s --check-prefixes=EZ80-CODE16
; RUN: llc -mtriple=ez80 < %s | FileCheck %s --check-prefixes=EZ80

define i8 @load.p0i8(i8*) {
; Z80-LABEL: load.p0i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld a, (hl)
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: load.p0i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld a, (hl)
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: load.p0i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld a, (hl)
; EZ80-NEXT:    ret
  load i8, i8* %0
  ret i8 %2
}

define i16 @load.p0i16(i16*) {
; Z80-LABEL: load.p0i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    push de
; Z80-NEXT:    ld e, (hl)
; Z80-NEXT:    inc hl
; Z80-NEXT:    ld d, (hl)
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    pop de
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: load.p0i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld hl, (hl)
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: load.p0i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    ret
  load i16, i16* %0
  ret i16 %2
}

define i32 @load.p0i32(i32*) {
; Z80-LABEL: load.p0i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld l, (iy)
; Z80-NEXT:    ld h, (iy + 1)
; Z80-NEXT:    ld e, (iy + 2)
; Z80-NEXT:    ld d, (iy + 3)
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: load.p0i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld iy, (iy + 2)
; EZ80-CODE16-NEXT:    ld hl, (iy)
; EZ80-CODE16-NEXT:    ld de, (iy + 2)
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: load.p0i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld iy, (iy + 3)
; EZ80-NEXT:    ld hl, (iy)
; EZ80-NEXT:    ld e, (iy + 3)
; EZ80-NEXT:    ret
  load i32, i32* %0
  ret i32 %2
}

define i64 @load.p0i64(i64*) {
; Z80-LABEL: load.p0i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld l, (iy)
; Z80-NEXT:    ld h, (iy + 1)
; Z80-NEXT:    ld e, (iy + 2)
; Z80-NEXT:    ld d, (iy + 3)
; Z80-NEXT:    ld c, (iy + 4)
; Z80-NEXT:    ld b, (iy + 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (iy + 6)
; Z80-NEXT:    ld h, (iy + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: load.p0i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld iy, (iy + 2)
; EZ80-CODE16-NEXT:    ld hl, (iy)
; EZ80-CODE16-NEXT:    ld de, (iy + 2)
; EZ80-CODE16-NEXT:    ld bc, (iy + 4)
; EZ80-CODE16-NEXT:    ld iy, (iy + 6)
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: load.p0i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld iy, (iy + 3)
; EZ80-NEXT:    ld hl, (iy)
; EZ80-NEXT:    ld de, (iy + 3)
; EZ80-NEXT:    ld bc, (iy + 6)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    ret
  load i64, i64* %0
  ret i64 %2
}

define i8 @load.p0i8.1() {
; Z80-LABEL: load.p0i8.1:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld l, 1
; Z80-NEXT:    ld h, 0
; Z80-NEXT:    ld a, (hl)
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: load.p0i8.1:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld l, 1
; EZ80-CODE16-NEXT:    ld h, 0
; EZ80-CODE16-NEXT:    ld a, (hl)
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: load.p0i8.1:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld bc, 1
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    call __iand
; EZ80-NEXT:    ld a, (hl)
; EZ80-NEXT:    ret
  load i8, i8* inttoptr (i1 1 to i8*)
  ret i8 %1
}

define i16 @load.p0i16.1() {
; Z80-LABEL: load.p0i16.1:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld l, 1
; Z80-NEXT:    ld h, 0
; Z80-NEXT:    push de
; Z80-NEXT:    ld e, (hl)
; Z80-NEXT:    inc hl
; Z80-NEXT:    ld d, (hl)
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    pop de
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: load.p0i16.1:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld l, 1
; EZ80-CODE16-NEXT:    ld h, 0
; EZ80-CODE16-NEXT:    ld hl, (hl)
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: load.p0i16.1:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld bc, 1
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    call __iand
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    ret
  load i16, i16* inttoptr (i1 1 to i16*)
  ret i16 %1
}

define i32 @load.p0i32.1() {
; Z80-LABEL: load.p0i32.1:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iyl, 1
; Z80-NEXT:    ld iyh, 0
; Z80-NEXT:    ld l, (iy)
; Z80-NEXT:    ld h, (iy + 1)
; Z80-NEXT:    ld e, (iy + 2)
; Z80-NEXT:    ld d, (iy + 3)
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: load.p0i32.1:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iyl, 1
; EZ80-CODE16-NEXT:    ld iyh, 0
; EZ80-CODE16-NEXT:    ld hl, (iy)
; EZ80-CODE16-NEXT:    ld de, (iy + 2)
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: load.p0i32.1:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld bc, 1
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    call __iand
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld hl, (iy)
; EZ80-NEXT:    ld e, (iy + 3)
; EZ80-NEXT:    ret
  load i32, i32* inttoptr(i1 1 to i32*)
  ret i32 %1
}

define i64 @load.p0i64.1() {
; Z80-LABEL: load.p0i64.1:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iyl, 1
; Z80-NEXT:    ld iyh, 0
; Z80-NEXT:    ld l, (iy)
; Z80-NEXT:    ld h, (iy + 1)
; Z80-NEXT:    ld e, (iy + 2)
; Z80-NEXT:    ld d, (iy + 3)
; Z80-NEXT:    ld c, (iy + 4)
; Z80-NEXT:    ld b, (iy + 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (iy + 6)
; Z80-NEXT:    ld h, (iy + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: load.p0i64.1:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iyl, 1
; EZ80-CODE16-NEXT:    ld iyh, 0
; EZ80-CODE16-NEXT:    ld hl, (iy)
; EZ80-CODE16-NEXT:    ld de, (iy + 2)
; EZ80-CODE16-NEXT:    ld bc, (iy + 4)
; EZ80-CODE16-NEXT:    ld iy, (iy + 6)
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: load.p0i64.1:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld bc, 1
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    call __iand
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld hl, (iy)
; EZ80-NEXT:    ld de, (iy + 3)
; EZ80-NEXT:    ld bc, (iy + 6)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    ret
  load i64, i64* inttoptr(i1 1 to i64*)
  ret i64 %1
}

define i8 @load.p2i8(i8 addrspace(2)*) {
; Z80-LABEL: load.p2i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld c, (iy + 2)
; Z80-NEXT:    in a, (c)
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: load.p2i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld c, (iy + 2)
; EZ80-CODE16-NEXT:    in a, (c)
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: load.p2i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld c, (iy + 3)
; EZ80-NEXT:    in a, (bc)
; EZ80-NEXT:    ret
  load i8, i8 addrspace(2)* %0
  ret i8 %2
}

define i16 @load.p2i16(i16 addrspace(2)*) {
; Z80-LABEL: load.p2i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld a, (iy + 2)
; Z80-NEXT:    ld c, a
; Z80-NEXT:    in l, (c)
; Z80-NEXT:    inc a
; Z80-NEXT:    ld c, a
; Z80-NEXT:    in a, (c)
; Z80-NEXT:    ; kill: def $l killed $l def $hl
; Z80-NEXT:    ld h, a
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: load.p2i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld a, (iy + 2)
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    in l, (c)
; EZ80-CODE16-NEXT:    inc a
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    in a, (c)
; EZ80-CODE16-NEXT:    ; kill: def $l killed $l def $hl
; EZ80-CODE16-NEXT:    ld h, a
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: load.p2i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld a, (iy + 3)
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    in l, (bc)
; EZ80-NEXT:    inc a
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    in a, (bc)
; EZ80-NEXT:    ; kill: def $l killed $l def $hl
; EZ80-NEXT:    ld h, a
; EZ80-NEXT:    ret
  load i16, i16 addrspace(2)* %0
  ret i16 %2
}

define i32 @load.p2i32(i32 addrspace(2)*) {
; Z80-LABEL: load.p2i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld c, l
; Z80-NEXT:    in h, (c)
; Z80-NEXT:    ld a, l
; Z80-NEXT:    inc a
; Z80-NEXT:    ld c, a
; Z80-NEXT:    in d, (c)
; Z80-NEXT:    ld a, l
; Z80-NEXT:    add a, 2
; Z80-NEXT:    ld c, a
; Z80-NEXT:    in e, (c)
; Z80-NEXT:    ld a, l
; Z80-NEXT:    add a, 3
; Z80-NEXT:    ld c, a
; Z80-NEXT:    in a, (c)
; Z80-NEXT:    ld l, h
; Z80-NEXT:    ld h, d
; Z80-NEXT:    ; kill: def $e killed $e def $de
; Z80-NEXT:    ld d, a
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: load.p2i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld l, (iy + 2)
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    in h, (c)
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    inc a
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    in d, (c)
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    add a, 2
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    in e, (c)
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    add a, 3
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    in a, (c)
; EZ80-CODE16-NEXT:    ld l, h
; EZ80-CODE16-NEXT:    ld h, d
; EZ80-CODE16-NEXT:    ; kill: def $e killed $e def $de
; EZ80-CODE16-NEXT:    ld d, a
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: load.p2i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    dec sp
; EZ80-NEXT:    ld l, (ix + 6)
; EZ80-NEXT:    ld c, l
; EZ80-NEXT:    in a, (bc)
; EZ80-NEXT:    ld iyl, a
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    inc a
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    in d, (bc)
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    add a, 2
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    in h, (bc)
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    add a, 3
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    in e, (bc)
; EZ80-NEXT:    ld (ix - 1), h
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    inc sp
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  load i32, i32 addrspace(2)* %0
  ret i32 %2
}

define i64 @load.p2i64(i64 addrspace(2)*) {
; Z80-LABEL: load.p2i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld c, l
; Z80-NEXT:    in h, (c)
; Z80-NEXT:    ld a, l
; Z80-NEXT:    inc a
; Z80-NEXT:    ld c, a
; Z80-NEXT:    in d, (c)
; Z80-NEXT:    ld a, l
; Z80-NEXT:    add a, 2
; Z80-NEXT:    ld c, a
; Z80-NEXT:    in e, (c)
; Z80-NEXT:    ld a, l
; Z80-NEXT:    add a, 3
; Z80-NEXT:    ld c, a
; Z80-NEXT:    in a, (c)
; Z80-NEXT:    ld (ix - 1), a
; Z80-NEXT:    ld a, l
; Z80-NEXT:    add a, 4
; Z80-NEXT:    ld c, a
; Z80-NEXT:    in a, (c)
; Z80-NEXT:    ld (ix - 2), a
; Z80-NEXT:    ld a, l
; Z80-NEXT:    add a, 5
; Z80-NEXT:    ld c, a
; Z80-NEXT:    in a, (c)
; Z80-NEXT:    ld iyh, a
; Z80-NEXT:    ld a, l
; Z80-NEXT:    add a, 6
; Z80-NEXT:    ld c, a
; Z80-NEXT:    in a, (c)
; Z80-NEXT:    ld iyl, a
; Z80-NEXT:    ld a, l
; Z80-NEXT:    add a, 7
; Z80-NEXT:    ld c, a
; Z80-NEXT:    in a, (c)
; Z80-NEXT:    ld l, h
; Z80-NEXT:    ld h, d
; Z80-NEXT:    ; kill: def $e killed $e def $de
; Z80-NEXT:    ld d, (ix - 1) ; 1-byte Folded Reload
; Z80-NEXT:    ld c, (ix - 2) ; 1-byte Folded Reload
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    ; kill: def $iyl killed $iyl def $iy
; Z80-NEXT:    ld iyh, a
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: load.p2i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix + 4)
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    in h, (c)
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    inc a
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    in d, (c)
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    add a, 2
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    in e, (c)
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    add a, 3
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    in a, (c)
; EZ80-CODE16-NEXT:    ld (ix - 1), a
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    add a, 4
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    in a, (c)
; EZ80-CODE16-NEXT:    ld (ix - 2), a
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    add a, 5
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    in a, (c)
; EZ80-CODE16-NEXT:    ld iyh, a
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    add a, 6
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    in a, (c)
; EZ80-CODE16-NEXT:    ld iyl, a
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    add a, 7
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    in a, (c)
; EZ80-CODE16-NEXT:    ld l, h
; EZ80-CODE16-NEXT:    ld h, d
; EZ80-CODE16-NEXT:    ; kill: def $e killed $e def $de
; EZ80-CODE16-NEXT:    ld d, (ix - 1) ; 1-byte Folded Reload
; EZ80-CODE16-NEXT:    ld c, (ix - 2) ; 1-byte Folded Reload
; EZ80-CODE16-NEXT:    ld b, iyh
; EZ80-CODE16-NEXT:    ; kill: def $iyl killed $iyl def $iy
; EZ80-CODE16-NEXT:    ld iyh, a
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: load.p2i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 4
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld l, (ix + 6)
; EZ80-NEXT:    ld c, l
; EZ80-NEXT:    in a, (bc)
; EZ80-NEXT:    ld (ix - 3), a
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    inc a
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    in d, (bc)
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    add a, 2
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    in h, (bc)
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    add a, 3
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    in a, (bc)
; EZ80-NEXT:    ld (ix - 4), a
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    add a, 4
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    in a, (bc)
; EZ80-NEXT:    ld iyh, a
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    add a, 5
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    in e, (bc)
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    add a, 6
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    in a, (bc)
; EZ80-NEXT:    ld iyl, a
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    add a, 7
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    in a, (bc)
; EZ80-NEXT:    ld (ix - 2), h
; EZ80-NEXT:    ld hl, (ix - 4)
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:    ld l, (ix - 3) ; 1-byte Folded Reload
; EZ80-NEXT:    ld (ix - 1), e
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld d, iyh
; EZ80-NEXT:    ld e, (ix - 4) ; 1-byte Folded Reload
; EZ80-NEXT:    ld c, iyl
; EZ80-NEXT:    ld b, a
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  load i64, i64 addrspace(2)* %0
  ret i64 %2
}

define i8 @load.p2i8.1() {
; Z80-LABEL: load.p2i8.1:
; Z80:       ; %bb.0:
; Z80-NEXT:    in a, (1)
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: load.p2i8.1:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    in a, (1)
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: load.p2i8.1:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    in a, (1)
; EZ80-NEXT:    ret
  load i8, i8 addrspace(2)* inttoptr (i1 1 to i8 addrspace(2)*)
  ret i8 %1
}

define i16 @load.p2i16.1() {
; Z80-LABEL: load.p2i16.1:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld c, 1
; Z80-NEXT:    in a, (1)
; Z80-NEXT:    ld l, a
; Z80-NEXT:    inc c
; Z80-NEXT:    in a, (c)
; Z80-NEXT:    ld h, a
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: load.p2i16.1:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld c, 1
; EZ80-CODE16-NEXT:    in a, (1)
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    inc c
; EZ80-CODE16-NEXT:    in a, (c)
; EZ80-CODE16-NEXT:    ld h, a
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: load.p2i16.1:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld c, 1
; EZ80-NEXT:    in a, (1)
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    inc c
; EZ80-NEXT:    in a, (bc)
; EZ80-NEXT:    ld h, a
; EZ80-NEXT:    ret
  load i16, i16 addrspace(2)* inttoptr (i1 1 to i16 addrspace(2)*)
  ret i16 %1
}

define i32 @load.p2i32.1() {
; Z80-LABEL: load.p2i32.1:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iyl, 1
; Z80-NEXT:    in a, (1)
; Z80-NEXT:    ld l, a
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    inc c
; Z80-NEXT:    in d, (c)
; Z80-NEXT:    ld a, iyl
; Z80-NEXT:    add a, 2
; Z80-NEXT:    ld c, a
; Z80-NEXT:    in e, (c)
; Z80-NEXT:    ld a, iyl
; Z80-NEXT:    add a, 3
; Z80-NEXT:    ld c, a
; Z80-NEXT:    in a, (c)
; Z80-NEXT:    ld h, d
; Z80-NEXT:    ; kill: def $e killed $e def $de
; Z80-NEXT:    ld d, a
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: load.p2i32.1:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iyl, 1
; EZ80-CODE16-NEXT:    in a, (1)
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    ld c, iyl
; EZ80-CODE16-NEXT:    inc c
; EZ80-CODE16-NEXT:    in d, (c)
; EZ80-CODE16-NEXT:    ld a, iyl
; EZ80-CODE16-NEXT:    add a, 2
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    in e, (c)
; EZ80-CODE16-NEXT:    ld a, iyl
; EZ80-CODE16-NEXT:    add a, 3
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    in a, (c)
; EZ80-CODE16-NEXT:    ld h, d
; EZ80-CODE16-NEXT:    ; kill: def $e killed $e def $de
; EZ80-CODE16-NEXT:    ld d, a
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: load.p2i32.1:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    dec sp
; EZ80-NEXT:    ld l, 1
; EZ80-NEXT:    in a, (1)
; EZ80-NEXT:    ld iyl, a
; EZ80-NEXT:    ld c, l
; EZ80-NEXT:    inc c
; EZ80-NEXT:    in d, (bc)
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    add a, 2
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    in h, (bc)
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    add a, 3
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    in e, (bc)
; EZ80-NEXT:    ld (ix - 1), h
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    inc sp
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  load i32, i32 addrspace(2)* inttoptr (i1 1 to i32 addrspace(2)*)
  ret i32 %1
}

define i64 @load.p2i64.1() {
; Z80-LABEL: load.p2i64.1:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    dec sp
; Z80-NEXT:    ld e, 1
; Z80-NEXT:    in a, (1)
; Z80-NEXT:    ld l, a
; Z80-NEXT:    ld c, e
; Z80-NEXT:    inc c
; Z80-NEXT:    in a, (c)
; Z80-NEXT:    ld (ix - 1), a
; Z80-NEXT:    ld a, e
; Z80-NEXT:    add a, 2
; Z80-NEXT:    ld c, a
; Z80-NEXT:    in d, (c)
; Z80-NEXT:    ld a, e
; Z80-NEXT:    add a, 3
; Z80-NEXT:    ld c, a
; Z80-NEXT:    in a, (c)
; Z80-NEXT:    ld (ix - 2), a
; Z80-NEXT:    ld a, e
; Z80-NEXT:    add a, 4
; Z80-NEXT:    ld c, a
; Z80-NEXT:    in a, (c)
; Z80-NEXT:    ld (ix - 3), a
; Z80-NEXT:    ld a, e
; Z80-NEXT:    add a, 5
; Z80-NEXT:    ld c, a
; Z80-NEXT:    in a, (c)
; Z80-NEXT:    ld iyh, a
; Z80-NEXT:    ld a, e
; Z80-NEXT:    add a, 6
; Z80-NEXT:    ld c, a
; Z80-NEXT:    in a, (c)
; Z80-NEXT:    ld iyl, a
; Z80-NEXT:    ld a, e
; Z80-NEXT:    add a, 7
; Z80-NEXT:    ld c, a
; Z80-NEXT:    in a, (c)
; Z80-NEXT:    ld h, (ix - 1) ; 1-byte Folded Reload
; Z80-NEXT:    ld e, d
; Z80-NEXT:    ld d, (ix - 2) ; 1-byte Folded Reload
; Z80-NEXT:    ld c, (ix - 3) ; 1-byte Folded Reload
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    ; kill: def $iyl killed $iyl def $iy
; Z80-NEXT:    ld iyh, a
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: load.p2i64.1:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 3
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld e, 1
; EZ80-CODE16-NEXT:    in a, (1)
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    ld c, e
; EZ80-CODE16-NEXT:    inc c
; EZ80-CODE16-NEXT:    in a, (c)
; EZ80-CODE16-NEXT:    ld (ix - 1), a
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    add a, 2
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    in d, (c)
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    add a, 3
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    in a, (c)
; EZ80-CODE16-NEXT:    ld (ix - 2), a
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    add a, 4
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    in a, (c)
; EZ80-CODE16-NEXT:    ld (ix - 3), a
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    add a, 5
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    in a, (c)
; EZ80-CODE16-NEXT:    ld iyh, a
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    add a, 6
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    in a, (c)
; EZ80-CODE16-NEXT:    ld iyl, a
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    add a, 7
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    in a, (c)
; EZ80-CODE16-NEXT:    ld h, (ix - 1) ; 1-byte Folded Reload
; EZ80-CODE16-NEXT:    ld e, d
; EZ80-CODE16-NEXT:    ld d, (ix - 2) ; 1-byte Folded Reload
; EZ80-CODE16-NEXT:    ld c, (ix - 3) ; 1-byte Folded Reload
; EZ80-CODE16-NEXT:    ld b, iyh
; EZ80-CODE16-NEXT:    ; kill: def $iyl killed $iyl def $iy
; EZ80-CODE16-NEXT:    ld iyh, a
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: load.p2i64.1:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 5
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld e, 1
; EZ80-NEXT:    in a, (1)
; EZ80-NEXT:    ld (ix - 3), a ; 1-byte Folded Spill
; EZ80-NEXT:    ld c, e
; EZ80-NEXT:    inc c
; EZ80-NEXT:    in a, (bc)
; EZ80-NEXT:    ld (ix - 4), a
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    add a, 2
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    in l, (bc)
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    add a, 3
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    in a, (bc)
; EZ80-NEXT:    ld (ix - 5), a
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    add a, 4
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    in a, (bc)
; EZ80-NEXT:    ld iyh, a
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    add a, 5
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    in d, (bc)
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    add a, 6
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    in a, (bc)
; EZ80-NEXT:    ld iyl, a
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    add a, 7
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    in a, (bc)
; EZ80-NEXT:    ld (ix - 2), l
; EZ80-NEXT:    ld hl, (ix - 4)
; EZ80-NEXT:    ld h, (ix - 4) ; 1-byte Folded Reload
; EZ80-NEXT:    ld l, (ix - 3) ; 1-byte Folded Reload
; EZ80-NEXT:    ld (ix - 1), d
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld d, iyh
; EZ80-NEXT:    ld e, (ix - 5) ; 1-byte Folded Reload
; EZ80-NEXT:    ld c, iyl
; EZ80-NEXT:    ld b, a
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  load i64, i64 addrspace(2)* inttoptr (i1 1 to i64 addrspace(2)*)
  ret i64 %1
}

define i8 @load.p3i8(i8 addrspace(3)*) {
; Z80-LABEL: load.p3i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld c, (iy + 2)
; Z80-NEXT:    ld b, (iy + 3)
; Z80-NEXT:    in a, (c)
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: load.p3i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld bc, (iy + 2)
; EZ80-CODE16-NEXT:    in a, (c)
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: load.p3i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld bc, (iy + 3)
; EZ80-NEXT:    in a, (bc)
; EZ80-NEXT:    ret
  load i8, i8 addrspace(3)* %0
  ret i8 %2
}

define i16 @load.p3i16(i16 addrspace(3)*) {
; Z80-LABEL: load.p3i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld c, (iy + 2)
; Z80-NEXT:    ld b, (iy + 3)
; Z80-NEXT:    in a, (c)
; Z80-NEXT:    inc bc
; Z80-NEXT:    in e, (c)
; Z80-NEXT:    ld l, a
; Z80-NEXT:    ld h, e
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: load.p3i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld bc, (iy + 2)
; EZ80-CODE16-NEXT:    in a, (c)
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    in e, (c)
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    ld h, e
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: load.p3i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld bc, (iy + 3)
; EZ80-NEXT:    in a, (bc)
; EZ80-NEXT:    inc.sis bc
; EZ80-NEXT:    in e, (bc)
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    ld h, e
; EZ80-NEXT:    ret
  load i16, i16 addrspace(3)* %0
  ret i16 %2
}

define i32 @load.p3i32(i32 addrspace(3)*) {
; Z80-LABEL: load.p3i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    in a, (c)
; Z80-NEXT:    inc bc
; Z80-NEXT:    in e, (c)
; Z80-NEXT:    ld bc, 2
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    in d, (c)
; Z80-NEXT:    ld bc, 3
; Z80-NEXT:    add iy, bc
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    in c, (c)
; Z80-NEXT:    ld l, a
; Z80-NEXT:    ld h, e
; Z80-NEXT:    ld e, d
; Z80-NEXT:    ld d, c
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: load.p3i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld iy, (iy + 2)
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    in a, (c)
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    in e, (c)
; EZ80-CODE16-NEXT:    lea bc, iy + 2
; EZ80-CODE16-NEXT:    in d, (c)
; EZ80-CODE16-NEXT:    lea bc, iy + 3
; EZ80-CODE16-NEXT:    in c, (c)
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    ld h, e
; EZ80-CODE16-NEXT:    ld e, d
; EZ80-CODE16-NEXT:    ld d, c
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: load.p3i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    dec sp
; EZ80-NEXT:    ld iy, (ix + 6)
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    in a, (bc)
; EZ80-NEXT:    inc.sis bc
; EZ80-NEXT:    in d, (bc)
; EZ80-NEXT:    lea.sis bc, iy + 2
; EZ80-NEXT:    in l, (bc)
; EZ80-NEXT:    lea.sis bc, iy + 3
; EZ80-NEXT:    in e, (bc)
; EZ80-NEXT:    ld (ix - 1), l
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    inc sp
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  load i32, i32 addrspace(3)* %0
  ret i32 %2
}

define i64 @load.p3i64(i64 addrspace(3)*) {
; Z80-LABEL: load.p3i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -5
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    in a, (c)
; Z80-NEXT:    ld (ix - 1), a
; Z80-NEXT:    inc bc
; Z80-NEXT:    in e, (c)
; Z80-NEXT:    ld bc, 2
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    in d, (c)
; Z80-NEXT:    ld bc, 3
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    in a, (c)
; Z80-NEXT:    ld (ix - 2), a
; Z80-NEXT:    ld bc, 4
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    in a, (c)
; Z80-NEXT:    ld (ix - 3), a
; Z80-NEXT:    ld bc, 5
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    in a, (c)
; Z80-NEXT:    ld (ix - 4), a
; Z80-NEXT:    ld bc, 6
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    in a, (c)
; Z80-NEXT:    ld (ix - 5), a
; Z80-NEXT:    ld bc, 7
; Z80-NEXT:    add iy, bc
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    in a, (c)
; Z80-NEXT:    ld l, (ix - 1) ; 1-byte Folded Reload
; Z80-NEXT:    ld h, e
; Z80-NEXT:    ld e, d
; Z80-NEXT:    ld d, (ix - 2) ; 1-byte Folded Reload
; Z80-NEXT:    ld c, (ix - 3) ; 1-byte Folded Reload
; Z80-NEXT:    ld b, (ix - 4) ; 1-byte Folded Reload
; Z80-NEXT:    push af
; Z80-NEXT:    ld a, (ix - 5) ; 1-byte Folded Reload
; Z80-NEXT:    ld iyl, a
; Z80-NEXT:    pop af
; Z80-NEXT:    ld iyh, a
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: load.p3i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 4
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld iy, (ix + 4)
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    in l, (c)
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    in e, (c)
; EZ80-CODE16-NEXT:    lea bc, iy + 2
; EZ80-CODE16-NEXT:    in d, (c)
; EZ80-CODE16-NEXT:    lea bc, iy + 3
; EZ80-CODE16-NEXT:    in a, (c)
; EZ80-CODE16-NEXT:    ld (ix - 1), a
; EZ80-CODE16-NEXT:    lea bc, iy + 4
; EZ80-CODE16-NEXT:    in a, (c)
; EZ80-CODE16-NEXT:    ld (ix - 2), a
; EZ80-CODE16-NEXT:    lea bc, iy + 5
; EZ80-CODE16-NEXT:    in a, (c)
; EZ80-CODE16-NEXT:    ld (ix - 3), a
; EZ80-CODE16-NEXT:    lea bc, iy + 6
; EZ80-CODE16-NEXT:    in a, (c)
; EZ80-CODE16-NEXT:    ld (ix - 4), a
; EZ80-CODE16-NEXT:    lea bc, iy + 7
; EZ80-CODE16-NEXT:    in a, (c)
; EZ80-CODE16-NEXT:    ; kill: def $l killed $l def $hl
; EZ80-CODE16-NEXT:    ld h, e
; EZ80-CODE16-NEXT:    ld e, d
; EZ80-CODE16-NEXT:    ld d, (ix - 1) ; 1-byte Folded Reload
; EZ80-CODE16-NEXT:    ld c, (ix - 2) ; 1-byte Folded Reload
; EZ80-CODE16-NEXT:    ld b, (ix - 3) ; 1-byte Folded Reload
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ld a, (ix - 4) ; 1-byte Folded Reload
; EZ80-CODE16-NEXT:    ld iyl, a
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    ld iyh, a
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: load.p3i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 6
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld iy, (ix + 6)
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    in a, (bc)
; EZ80-NEXT:    ld (ix - 3), a
; EZ80-NEXT:    inc.sis bc
; EZ80-NEXT:    in d, (bc)
; EZ80-NEXT:    lea.sis bc, iy + 2
; EZ80-NEXT:    in l, (bc)
; EZ80-NEXT:    lea.sis bc, iy + 3
; EZ80-NEXT:    in a, (bc)
; EZ80-NEXT:    ld (ix - 4), a
; EZ80-NEXT:    lea.sis bc, iy + 4
; EZ80-NEXT:    in a, (bc)
; EZ80-NEXT:    ld (ix - 5), a
; EZ80-NEXT:    lea.sis bc, iy + 5
; EZ80-NEXT:    in e, (bc)
; EZ80-NEXT:    lea.sis bc, iy + 6
; EZ80-NEXT:    in a, (bc)
; EZ80-NEXT:    ld (ix - 6), a
; EZ80-NEXT:    lea.sis bc, iy + 7
; EZ80-NEXT:    in a, (bc)
; EZ80-NEXT:    ld (ix - 2), l
; EZ80-NEXT:    ld hl, (ix - 4)
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:    ld l, (ix - 3) ; 1-byte Folded Reload
; EZ80-NEXT:    ld (ix - 1), e
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld d, (ix - 5) ; 1-byte Folded Reload
; EZ80-NEXT:    ld e, (ix - 4) ; 1-byte Folded Reload
; EZ80-NEXT:    ld c, (ix - 6) ; 1-byte Folded Reload
; EZ80-NEXT:    ld b, a
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  load i64, i64 addrspace(3)* %0
  ret i64 %2
}

define i8 @load.p3i8.1() {
; Z80-LABEL: load.p3i8.1:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld c, 1
; Z80-NEXT:    ld b, 0
; Z80-NEXT:    in a, (c)
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: load.p3i8.1:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld c, 1
; EZ80-CODE16-NEXT:    ld b, 0
; EZ80-CODE16-NEXT:    in a, (c)
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: load.p3i8.1:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld c, 1
; EZ80-NEXT:    ld b, 0
; EZ80-NEXT:    in a, (bc)
; EZ80-NEXT:    ret
  load i8, i8 addrspace(3)* inttoptr (i1 1 to i8 addrspace(3)*)
  ret i8 %1
}

define i16 @load.p3i16.1() {
; Z80-LABEL: load.p3i16.1:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld c, 1
; Z80-NEXT:    ld b, 0
; Z80-NEXT:    in a, (c)
; Z80-NEXT:    inc bc
; Z80-NEXT:    in e, (c)
; Z80-NEXT:    ld l, a
; Z80-NEXT:    ld h, e
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: load.p3i16.1:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld c, 1
; EZ80-CODE16-NEXT:    ld b, 0
; EZ80-CODE16-NEXT:    in a, (c)
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    in e, (c)
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    ld h, e
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: load.p3i16.1:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld c, 1
; EZ80-NEXT:    ld b, 0
; EZ80-NEXT:    in a, (bc)
; EZ80-NEXT:    inc.sis bc
; EZ80-NEXT:    in e, (bc)
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    ld h, e
; EZ80-NEXT:    ret
  load i16, i16 addrspace(3)* inttoptr (i1 1 to i16 addrspace(3)*)
  ret i16 %1
}

define i32 @load.p3i32.1() {
; Z80-LABEL: load.p3i32.1:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iyl, 1
; Z80-NEXT:    ld iyh, 0
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    in a, (c)
; Z80-NEXT:    inc bc
; Z80-NEXT:    in e, (c)
; Z80-NEXT:    ld bc, 2
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    in d, (c)
; Z80-NEXT:    ld bc, 3
; Z80-NEXT:    add iy, bc
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    in c, (c)
; Z80-NEXT:    ld l, a
; Z80-NEXT:    ld h, e
; Z80-NEXT:    ld e, d
; Z80-NEXT:    ld d, c
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: load.p3i32.1:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iyl, 1
; EZ80-CODE16-NEXT:    ld iyh, 0
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    in a, (c)
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    in e, (c)
; EZ80-CODE16-NEXT:    lea bc, iy + 2
; EZ80-CODE16-NEXT:    in d, (c)
; EZ80-CODE16-NEXT:    lea bc, iy + 3
; EZ80-CODE16-NEXT:    in c, (c)
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    ld h, e
; EZ80-CODE16-NEXT:    ld e, d
; EZ80-CODE16-NEXT:    ld d, c
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: load.p3i32.1:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    dec sp
; EZ80-NEXT:    ld iyl, 1
; EZ80-NEXT:    ld iyh, 0
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    in a, (bc)
; EZ80-NEXT:    inc.sis bc
; EZ80-NEXT:    in d, (bc)
; EZ80-NEXT:    lea.sis bc, iy + 2
; EZ80-NEXT:    in l, (bc)
; EZ80-NEXT:    lea.sis bc, iy + 3
; EZ80-NEXT:    in e, (bc)
; EZ80-NEXT:    ld (ix - 1), l
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    inc sp
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  load i32, i32 addrspace(3)* inttoptr (i1 1 to i32 addrspace(3)*)
  ret i32 %1
}

define i64 @load.p3i64.1() {
; Z80-LABEL: load.p3i64.1:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -5
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld iyl, 1
; Z80-NEXT:    ld iyh, 0
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    in a, (c)
; Z80-NEXT:    ld (ix - 1), a
; Z80-NEXT:    inc bc
; Z80-NEXT:    in e, (c)
; Z80-NEXT:    ld bc, 2
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    in d, (c)
; Z80-NEXT:    ld bc, 3
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    in a, (c)
; Z80-NEXT:    ld (ix - 2), a
; Z80-NEXT:    ld bc, 4
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    in a, (c)
; Z80-NEXT:    ld (ix - 3), a
; Z80-NEXT:    ld bc, 5
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    in a, (c)
; Z80-NEXT:    ld (ix - 4), a
; Z80-NEXT:    ld bc, 6
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    in a, (c)
; Z80-NEXT:    ld (ix - 5), a
; Z80-NEXT:    ld bc, 7
; Z80-NEXT:    add iy, bc
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    in a, (c)
; Z80-NEXT:    ld l, (ix - 1) ; 1-byte Folded Reload
; Z80-NEXT:    ld h, e
; Z80-NEXT:    ld e, d
; Z80-NEXT:    ld d, (ix - 2) ; 1-byte Folded Reload
; Z80-NEXT:    ld c, (ix - 3) ; 1-byte Folded Reload
; Z80-NEXT:    ld b, (ix - 4) ; 1-byte Folded Reload
; Z80-NEXT:    push af
; Z80-NEXT:    ld a, (ix - 5) ; 1-byte Folded Reload
; Z80-NEXT:    ld iyl, a
; Z80-NEXT:    pop af
; Z80-NEXT:    ld iyh, a
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: load.p3i64.1:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 4
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld iyl, 1
; EZ80-CODE16-NEXT:    ld iyh, 0
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    in l, (c)
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    in e, (c)
; EZ80-CODE16-NEXT:    lea bc, iy + 2
; EZ80-CODE16-NEXT:    in d, (c)
; EZ80-CODE16-NEXT:    lea bc, iy + 3
; EZ80-CODE16-NEXT:    in a, (c)
; EZ80-CODE16-NEXT:    ld (ix - 1), a
; EZ80-CODE16-NEXT:    lea bc, iy + 4
; EZ80-CODE16-NEXT:    in a, (c)
; EZ80-CODE16-NEXT:    ld (ix - 2), a
; EZ80-CODE16-NEXT:    lea bc, iy + 5
; EZ80-CODE16-NEXT:    in a, (c)
; EZ80-CODE16-NEXT:    ld (ix - 3), a
; EZ80-CODE16-NEXT:    lea bc, iy + 6
; EZ80-CODE16-NEXT:    in a, (c)
; EZ80-CODE16-NEXT:    ld (ix - 4), a
; EZ80-CODE16-NEXT:    lea bc, iy + 7
; EZ80-CODE16-NEXT:    in a, (c)
; EZ80-CODE16-NEXT:    ; kill: def $l killed $l def $hl
; EZ80-CODE16-NEXT:    ld h, e
; EZ80-CODE16-NEXT:    ld e, d
; EZ80-CODE16-NEXT:    ld d, (ix - 1) ; 1-byte Folded Reload
; EZ80-CODE16-NEXT:    ld c, (ix - 2) ; 1-byte Folded Reload
; EZ80-CODE16-NEXT:    ld b, (ix - 3) ; 1-byte Folded Reload
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ld a, (ix - 4) ; 1-byte Folded Reload
; EZ80-CODE16-NEXT:    ld iyl, a
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    ld iyh, a
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: load.p3i64.1:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 6
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld iyl, 1
; EZ80-NEXT:    ld iyh, 0
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    in a, (bc)
; EZ80-NEXT:    ld (ix - 3), a
; EZ80-NEXT:    inc.sis bc
; EZ80-NEXT:    in d, (bc)
; EZ80-NEXT:    lea.sis bc, iy + 2
; EZ80-NEXT:    in l, (bc)
; EZ80-NEXT:    lea.sis bc, iy + 3
; EZ80-NEXT:    in a, (bc)
; EZ80-NEXT:    ld (ix - 4), a
; EZ80-NEXT:    lea.sis bc, iy + 4
; EZ80-NEXT:    in a, (bc)
; EZ80-NEXT:    ld (ix - 5), a
; EZ80-NEXT:    lea.sis bc, iy + 5
; EZ80-NEXT:    in e, (bc)
; EZ80-NEXT:    lea.sis bc, iy + 6
; EZ80-NEXT:    in a, (bc)
; EZ80-NEXT:    ld (ix - 6), a
; EZ80-NEXT:    lea.sis bc, iy + 7
; EZ80-NEXT:    in a, (bc)
; EZ80-NEXT:    ld (ix - 2), l
; EZ80-NEXT:    ld hl, (ix - 4)
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:    ld l, (ix - 3) ; 1-byte Folded Reload
; EZ80-NEXT:    ld (ix - 1), e
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld d, (ix - 5) ; 1-byte Folded Reload
; EZ80-NEXT:    ld e, (ix - 4) ; 1-byte Folded Reload
; EZ80-NEXT:    ld c, (ix - 6) ; 1-byte Folded Reload
; EZ80-NEXT:    ld b, a
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  load i64, i64 addrspace(3)* inttoptr (i1 1 to i64 addrspace(3)*)
  ret i64 %1
}

define void @store.p0i8(i8, i8*) {
; Z80-LABEL: store.p0i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld a, (iy + 2)
; Z80-NEXT:    ld l, (iy + 4)
; Z80-NEXT:    ld h, (iy + 5)
; Z80-NEXT:    ld (hl), a
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: store.p0i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld a, (iy + 2)
; EZ80-CODE16-NEXT:    ld hl, (iy + 4)
; EZ80-CODE16-NEXT:    ld (hl), a
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: store.p0i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld a, (iy + 3)
; EZ80-NEXT:    ld hl, (iy + 6)
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    ret
  store i8 %0, i8* %1
  ret void
}

define void @store.p0i16(i16, i16*) {
; Z80-LABEL: store.p0i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld e, (iy + 2)
; Z80-NEXT:    ld d, (iy + 3)
; Z80-NEXT:    ld l, (iy + 4)
; Z80-NEXT:    ld h, (iy + 5)
; Z80-NEXT:    ld (hl), e
; Z80-NEXT:    inc hl
; Z80-NEXT:    ld (hl), d
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: store.p0i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld de, (iy + 2)
; EZ80-CODE16-NEXT:    ld hl, (iy + 4)
; EZ80-CODE16-NEXT:    ld (hl), de
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: store.p0i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld de, (iy + 3)
; EZ80-NEXT:    ld hl, (iy + 6)
; EZ80-NEXT:    ld (hl), e
; EZ80-NEXT:    inc hl
; EZ80-NEXT:    ld (hl), d
; EZ80-NEXT:    ret
  store i16 %0, i16* %1
  ret void
}

define void @store.p0i32(i32, i32*) {
; Z80-LABEL: store.p0i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld d, (iy + 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (iy + 6)
; Z80-NEXT:    ld h, (iy + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld (iy), l
; Z80-NEXT:    ld (iy + 1), h
; Z80-NEXT:    ld (iy + 2), e
; Z80-NEXT:    ld (iy + 3), d
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: store.p0i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld de, (iy + 4)
; EZ80-CODE16-NEXT:    ld iy, (iy + 6)
; EZ80-CODE16-NEXT:    ld (iy), hl
; EZ80-CODE16-NEXT:    ld (iy + 2), de
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: store.p0i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld a, (iy + 6)
; EZ80-NEXT:    ld iy, (iy + 9)
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    ld (iy + 3), a
; EZ80-NEXT:    ret
  store i32 %0, i32* %1
  ret void
}

define void @store.p0i64(i64, i64*) {
; Z80-LABEL: store.p0i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld (iy), l
; Z80-NEXT:    ld (iy + 1), h
; Z80-NEXT:    ld (iy + 2), e
; Z80-NEXT:    ld (iy + 3), d
; Z80-NEXT:    ld (iy + 4), c
; Z80-NEXT:    ld (iy + 5), b
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ld (iy + 6), l
; Z80-NEXT:    ld (iy + 7), h
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: store.p0i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    ld iy, (ix + 12)
; EZ80-CODE16-NEXT:    ld (iy), hl
; EZ80-CODE16-NEXT:    ld (iy + 2), de
; EZ80-CODE16-NEXT:    ld (iy + 4), bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    ld (iy + 6), hl
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: store.p0i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld de, (iy + 6)
; EZ80-NEXT:    ld bc, (iy + 9)
; EZ80-NEXT:    ld iy, (iy + 12)
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    ld (iy + 3), de
; EZ80-NEXT:    ld (iy + 6), c
; EZ80-NEXT:    ld (iy + 7), b
; EZ80-NEXT:    ret
  store i64 %0, i64* %1
  ret void
}

define void @store.p0i8.1(i8) {
; Z80-LABEL: store.p0i8.1:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld a, (iy + 2)
; Z80-NEXT:    ld l, 1
; Z80-NEXT:    ld h, 0
; Z80-NEXT:    ld (hl), a
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: store.p0i8.1:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld a, (iy + 2)
; EZ80-CODE16-NEXT:    ld l, 1
; EZ80-CODE16-NEXT:    ld h, 0
; EZ80-CODE16-NEXT:    ld (hl), a
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: store.p0i8.1:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld a, (iy + 3)
; EZ80-NEXT:    ld bc, 1
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    call __iand
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    ret
  store i8 %0, i8* inttoptr (i1 1 to i8*)
  ret void
}

define void @store.p0i16.1(i16) {
; Z80-LABEL: store.p0i16.1:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld e, (iy + 2)
; Z80-NEXT:    ld d, (iy + 3)
; Z80-NEXT:    ld l, 1
; Z80-NEXT:    ld h, 0
; Z80-NEXT:    ld (hl), e
; Z80-NEXT:    inc hl
; Z80-NEXT:    ld (hl), d
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: store.p0i16.1:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld de, (iy + 2)
; EZ80-CODE16-NEXT:    ld l, 1
; EZ80-CODE16-NEXT:    ld h, 0
; EZ80-CODE16-NEXT:    ld (hl), de
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: store.p0i16.1:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld de, (iy + 3)
; EZ80-NEXT:    ld bc, 1
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    call __iand
; EZ80-NEXT:    ld (hl), e
; EZ80-NEXT:    inc hl
; EZ80-NEXT:    ld (hl), d
; EZ80-NEXT:    ret
  store i16 %0, i16* inttoptr (i1 1 to i16*)
  ret void
}

define void @store.p0i32.1(i32) {
; Z80-LABEL: store.p0i32.1:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld d, (iy + 5)
; Z80-NEXT:    ld iyl, 1
; Z80-NEXT:    ld iyh, 0
; Z80-NEXT:    ld (iy), l
; Z80-NEXT:    ld (iy + 1), h
; Z80-NEXT:    ld (iy + 2), e
; Z80-NEXT:    ld (iy + 3), d
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: store.p0i32.1:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld de, (iy + 4)
; EZ80-CODE16-NEXT:    ld iyl, 1
; EZ80-CODE16-NEXT:    ld iyh, 0
; EZ80-CODE16-NEXT:    ld (iy), hl
; EZ80-CODE16-NEXT:    ld (iy + 2), de
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: store.p0i32.1:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld de, (iy + 3)
; EZ80-NEXT:    ld a, (iy + 6)
; EZ80-NEXT:    ld bc, 1
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    call __iand
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld (iy), de
; EZ80-NEXT:    ld (iy + 3), a
; EZ80-NEXT:    ret
  store i32 %0, i32* inttoptr(i1 1 to i32*)
  ret void
}

define void @store.p0i64.1(i64) {
; Z80-LABEL: store.p0i64.1:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    ld iyl, 1
; Z80-NEXT:    ld iyh, 0
; Z80-NEXT:    ld (iy), l
; Z80-NEXT:    ld (iy + 1), h
; Z80-NEXT:    ld (iy + 2), e
; Z80-NEXT:    ld (iy + 3), d
; Z80-NEXT:    ld (iy + 4), c
; Z80-NEXT:    ld (iy + 5), b
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ld (iy + 6), l
; Z80-NEXT:    ld (iy + 7), h
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: store.p0i64.1:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    ld iyl, 1
; EZ80-CODE16-NEXT:    ld iyh, 0
; EZ80-CODE16-NEXT:    ld (iy), hl
; EZ80-CODE16-NEXT:    ld (iy + 2), de
; EZ80-CODE16-NEXT:    ld (iy + 4), bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    ld (iy + 6), hl
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: store.p0i64.1:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld de, (ix + 6)
; EZ80-NEXT:    ld bc, 1
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    call __iand
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld (iy), de
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ld (iy + 3), hl
; EZ80-NEXT:    ld hl, (ix + 12)
; EZ80-NEXT:    ld (iy + 6), l
; EZ80-NEXT:    ld (iy + 7), h
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  store i64 %0, i64* inttoptr(i1 1 to i64*)
  ret void
}

define void @store.p2i8(i8, i8 addrspace(2)*) {
; Z80-LABEL: store.p2i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld a, (iy + 2)
; Z80-NEXT:    ld c, (iy + 4)
; Z80-NEXT:    out (c), a
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: store.p2i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld a, (iy + 2)
; EZ80-CODE16-NEXT:    ld c, (iy + 4)
; EZ80-CODE16-NEXT:    out (c), a
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: store.p2i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld a, (iy + 3)
; EZ80-NEXT:    ld c, (iy + 6)
; EZ80-NEXT:    out (bc), a
; EZ80-NEXT:    ret
  store i8 %0, i8 addrspace(2)* %1
  ret void
}

define void @store.p2i16(i16, i16 addrspace(2)*) {
; Z80-LABEL: store.p2i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld a, (iy + 4)
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld l, h
; Z80-NEXT:    ld c, a
; Z80-NEXT:    out (c), e
; Z80-NEXT:    inc a
; Z80-NEXT:    ld c, a
; Z80-NEXT:    out (c), l
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: store.p2i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld a, (iy + 4)
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld l, h
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    out (c), e
; EZ80-CODE16-NEXT:    inc a
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    out (c), l
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: store.p2i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld a, (iy + 6)
; EZ80-NEXT:    ld e, l
; EZ80-NEXT:    ld l, h
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    out (bc), e
; EZ80-NEXT:    inc a
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    out (bc), l
; EZ80-NEXT:    ret
  store i16 %0, i16 addrspace(2)* %1
  ret void
}

define void @store.p2i32(i32, i32 addrspace(2)*) {
; Z80-LABEL: store.p2i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld e, (iy + 2)
; Z80-NEXT:    ld d, (iy + 3)
; Z80-NEXT:    ld c, (iy + 4)
; Z80-NEXT:    ld b, (iy + 5)
; Z80-NEXT:    ld l, (iy + 6)
; Z80-NEXT:    ld a, e
; Z80-NEXT:    ld h, d
; Z80-NEXT:    ld d, c
; Z80-NEXT:    ld e, b
; Z80-NEXT:    ld c, l
; Z80-NEXT:    out (c), a
; Z80-NEXT:    ld a, l
; Z80-NEXT:    inc a
; Z80-NEXT:    ld c, a
; Z80-NEXT:    out (c), h
; Z80-NEXT:    ld a, l
; Z80-NEXT:    add a, 2
; Z80-NEXT:    ld c, a
; Z80-NEXT:    out (c), d
; Z80-NEXT:    ld a, l
; Z80-NEXT:    add a, 3
; Z80-NEXT:    ld c, a
; Z80-NEXT:    out (c), e
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: store.p2i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld de, (iy + 2)
; EZ80-CODE16-NEXT:    ld bc, (iy + 4)
; EZ80-CODE16-NEXT:    ld l, (iy + 6)
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    ld h, d
; EZ80-CODE16-NEXT:    ld d, c
; EZ80-CODE16-NEXT:    ld e, b
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    out (c), a
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    inc a
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    out (c), h
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    add a, 2
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    out (c), d
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    add a, 3
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    out (c), e
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: store.p2i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, (iy + 3)
; EZ80-NEXT:    ld e, (iy + 6)
; EZ80-NEXT:    ld l, (iy + 9)
; EZ80-NEXT:    ld (iy - 3), bc
; EZ80-NEXT:    ld h, (iy - 1)
; EZ80-NEXT:    ld a, b
; EZ80-NEXT:    ld d, c
; EZ80-NEXT:    ld c, l
; EZ80-NEXT:    out (bc), d
; EZ80-NEXT:    inc c
; EZ80-NEXT:    ; kill: def $c killed $c def $ubc
; EZ80-NEXT:    out (bc), a
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    add a, 2
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    out (bc), h
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    add a, 3
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    out (bc), e
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ret
  store i32 %0, i32 addrspace(2)* %1
  ret void
}

define void @store.p2i64(i64, i64 addrspace(2)*) {
; Z80-LABEL: store.p2i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    ld e, (ix + 4)
; Z80-NEXT:    ld d, (ix + 5)
; Z80-NEXT:    ld c, (ix + 6)
; Z80-NEXT:    ld b, (ix + 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld a, e
; Z80-NEXT:    ld e, d
; Z80-NEXT:    ld d, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    push af
; Z80-NEXT:    ld a, iyl
; Z80-NEXT:    ld (ix - 2), a ; 1-byte Folded Spill
; Z80-NEXT:    pop af
; Z80-NEXT:    ld iyl, iyh
; Z80-NEXT:    ld c, (ix + 10)
; Z80-NEXT:    ld b, (ix + 11)
; Z80-NEXT:    ld iyh, c
; Z80-NEXT:    ld c, (ix + 10)
; Z80-NEXT:    ld b, (ix + 11)
; Z80-NEXT:    ld (ix - 1), b ; 1-byte Folded Spill
; Z80-NEXT:    ld c, l
; Z80-NEXT:    out (c), a
; Z80-NEXT:    ld a, l
; Z80-NEXT:    inc a
; Z80-NEXT:    ld c, a
; Z80-NEXT:    out (c), e
; Z80-NEXT:    ld a, l
; Z80-NEXT:    add a, 2
; Z80-NEXT:    ld c, a
; Z80-NEXT:    out (c), d
; Z80-NEXT:    ld a, l
; Z80-NEXT:    add a, 3
; Z80-NEXT:    ld c, a
; Z80-NEXT:    out (c), h
; Z80-NEXT:    ld a, l
; Z80-NEXT:    add a, 4
; Z80-NEXT:    ld c, a
; Z80-NEXT:    ld a, (ix - 2)
; Z80-NEXT:    out (c), a
; Z80-NEXT:    ld a, l
; Z80-NEXT:    add a, 5
; Z80-NEXT:    ld c, a
; Z80-NEXT:    ld a, iyl
; Z80-NEXT:    out (c), a
; Z80-NEXT:    ld a, l
; Z80-NEXT:    add a, 6
; Z80-NEXT:    ld c, a
; Z80-NEXT:    ld a, iyh
; Z80-NEXT:    out (c), a
; Z80-NEXT:    ld a, l
; Z80-NEXT:    add a, 7
; Z80-NEXT:    ld c, a
; Z80-NEXT:    ld a, (ix - 1)
; Z80-NEXT:    out (c), a
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: store.p2i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld de, (ix + 4)
; EZ80-CODE16-NEXT:    ld bc, (ix + 6)
; EZ80-CODE16-NEXT:    ld iy, (ix + 8)
; EZ80-CODE16-NEXT:    ld l, (ix + 12)
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    ld e, d
; EZ80-CODE16-NEXT:    ld d, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ld a, iyl
; EZ80-CODE16-NEXT:    ld (ix - 2), a ; 1-byte Folded Spill
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    ld iyl, iyh
; EZ80-CODE16-NEXT:    ld bc, (ix + 10)
; EZ80-CODE16-NEXT:    ld iyh, c
; EZ80-CODE16-NEXT:    ld bc, (ix + 10)
; EZ80-CODE16-NEXT:    ld (ix - 1), b ; 1-byte Folded Spill
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    out (c), a
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    inc a
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    out (c), e
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    add a, 2
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    out (c), d
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    add a, 3
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    out (c), h
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    add a, 4
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    ld a, (ix - 2)
; EZ80-CODE16-NEXT:    out (c), a
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    add a, 5
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    ld a, iyl
; EZ80-CODE16-NEXT:    out (c), a
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    add a, 6
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    ld a, iyh
; EZ80-CODE16-NEXT:    out (c), a
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    add a, 7
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    ld a, (ix - 1)
; EZ80-CODE16-NEXT:    out (c), a
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: store.p2i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 10
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld iy, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ld bc, (ix + 12)
; EZ80-NEXT:    ld l, (ix + 15)
; EZ80-NEXT:    ld (ix - 8), c ; 1-byte Folded Spill
; EZ80-NEXT:    ld (ix - 7), b ; 1-byte Folded Spill
; EZ80-NEXT:    ld (ix - 6), de
; EZ80-NEXT:    ld a, (ix - 4)
; EZ80-NEXT:    ld (ix - 9), a
; EZ80-NEXT:    ld (ix - 10), d ; 1-byte Folded Spill
; EZ80-NEXT:    ld h, e
; EZ80-NEXT:    ld (ix - 3), iy
; EZ80-NEXT:    ld d, (ix - 1)
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld c, l
; EZ80-NEXT:    out (bc), e
; EZ80-NEXT:    ld e, l
; EZ80-NEXT:    inc e
; EZ80-NEXT:    ld c, e
; EZ80-NEXT:    out (bc), a
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    add a, 2
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    out (bc), d
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    add a, 3
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    out (bc), h
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    add a, 4
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    ld a, (ix - 10)
; EZ80-NEXT:    out (bc), a
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    add a, 5
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    ld a, (ix - 9)
; EZ80-NEXT:    out (bc), a
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    add a, 6
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    ld a, (ix - 8)
; EZ80-NEXT:    out (bc), a
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    add a, 7
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    ld a, (ix - 7)
; EZ80-NEXT:    out (bc), a
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  store i64 %0, i64 addrspace(2)* %1
  ret void
}

define void @store.p2i8.1(i8) {
; Z80-LABEL: store.p2i8.1:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld a, (iy + 2)
; Z80-NEXT:    out (1), a
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: store.p2i8.1:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld a, (iy + 2)
; EZ80-CODE16-NEXT:    out (1), a
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: store.p2i8.1:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld a, (iy + 3)
; EZ80-NEXT:    out (1), a
; EZ80-NEXT:    ret
  store i8 %0, i8 addrspace(2)* inttoptr (i1 1 to i8 addrspace(2)*)
  ret void
}

define void @store.p2i16.1(i16) {
; Z80-LABEL: store.p2i16.1:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld c, 1
; Z80-NEXT:    ld e, h
; Z80-NEXT:    ld a, l
; Z80-NEXT:    out (1), a
; Z80-NEXT:    inc c
; Z80-NEXT:    out (c), e
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: store.p2i16.1:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld c, 1
; EZ80-CODE16-NEXT:    ld e, h
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    out (1), a
; EZ80-CODE16-NEXT:    inc c
; EZ80-CODE16-NEXT:    out (c), e
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: store.p2i16.1:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld c, 1
; EZ80-NEXT:    ld e, h
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    out (1), a
; EZ80-NEXT:    inc c
; EZ80-NEXT:    out (bc), e
; EZ80-NEXT:    ret
  store i16 %0, i16 addrspace(2)* inttoptr (i1 1 to i16 addrspace(2)*)
  ret void
}

define void @store.p2i32.1(i32) {
; Z80-LABEL: store.p2i32.1:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld c, (iy + 2)
; Z80-NEXT:    ld b, (iy + 3)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld d, (iy + 5)
; Z80-NEXT:    ld iyl, 1
; Z80-NEXT:    ld h, b
; Z80-NEXT:    ld l, e
; Z80-NEXT:    ld e, d
; Z80-NEXT:    ld a, c
; Z80-NEXT:    out (1), a
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    inc c
; Z80-NEXT:    out (c), h
; Z80-NEXT:    ld a, iyl
; Z80-NEXT:    add a, 2
; Z80-NEXT:    ld c, a
; Z80-NEXT:    out (c), l
; Z80-NEXT:    ld a, iyl
; Z80-NEXT:    add a, 3
; Z80-NEXT:    ld c, a
; Z80-NEXT:    out (c), e
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: store.p2i32.1:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld bc, (iy + 2)
; EZ80-CODE16-NEXT:    ld de, (iy + 4)
; EZ80-CODE16-NEXT:    ld iyl, 1
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    ld l, e
; EZ80-CODE16-NEXT:    ld e, d
; EZ80-CODE16-NEXT:    ld a, c
; EZ80-CODE16-NEXT:    out (1), a
; EZ80-CODE16-NEXT:    ld c, iyl
; EZ80-CODE16-NEXT:    inc c
; EZ80-CODE16-NEXT:    out (c), h
; EZ80-CODE16-NEXT:    ld a, iyl
; EZ80-CODE16-NEXT:    add a, 2
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    out (c), l
; EZ80-CODE16-NEXT:    ld a, iyl
; EZ80-CODE16-NEXT:    add a, 3
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    out (c), e
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: store.p2i32.1:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, (iy + 3)
; EZ80-NEXT:    ld e, (iy + 6)
; EZ80-NEXT:    ld l, 1
; EZ80-NEXT:    ld (iy - 3), bc
; EZ80-NEXT:    ld h, (iy - 1)
; EZ80-NEXT:    ld d, b
; EZ80-NEXT:    ld a, c
; EZ80-NEXT:    out (1), a
; EZ80-NEXT:    ld c, l
; EZ80-NEXT:    inc c
; EZ80-NEXT:    out (bc), d
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    add a, 2
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    out (bc), h
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    add a, 3
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    out (bc), e
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ret
  store i32 %0, i32 addrspace(2)* inttoptr (i1 1 to i32 addrspace(2)*)
  ret void
}

define void @store.p2i64.1(i64) {
; Z80-LABEL: store.p2i64.1:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -6
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld c, (ix + 4)
; Z80-NEXT:    ld b, (ix + 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld l, 1
; Z80-NEXT:    ld h, b
; Z80-NEXT:    push af
; Z80-NEXT:    ld a, iyl
; Z80-NEXT:    ld (ix - 6), a ; 1-byte Folded Spill
; Z80-NEXT:    pop af
; Z80-NEXT:    push af
; Z80-NEXT:    ld a, iyh
; Z80-NEXT:    ld (ix - 5), a ; 1-byte Folded Spill
; Z80-NEXT:    pop af
; Z80-NEXT:    ld e, (ix + 8)
; Z80-NEXT:    ld d, (ix + 9)
; Z80-NEXT:    ld (ix - 2), e ; 1-byte Folded Spill
; Z80-NEXT:    ld e, (ix + 8)
; Z80-NEXT:    ld d, (ix + 9)
; Z80-NEXT:    ld (ix - 3), d ; 1-byte Folded Spill
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    push af
; Z80-NEXT:    ld a, iyl
; Z80-NEXT:    ld (ix - 4), a ; 1-byte Folded Spill
; Z80-NEXT:    pop af
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    push af
; Z80-NEXT:    ld a, iyh
; Z80-NEXT:    ld (ix - 1), a ; 1-byte Folded Spill
; Z80-NEXT:    pop af
; Z80-NEXT:    ld a, c
; Z80-NEXT:    out (1), a
; Z80-NEXT:    ld c, l
; Z80-NEXT:    inc c
; Z80-NEXT:    out (c), h
; Z80-NEXT:    ld a, l
; Z80-NEXT:    add a, 2
; Z80-NEXT:    ld c, a
; Z80-NEXT:    ld a, (ix - 6)
; Z80-NEXT:    out (c), a
; Z80-NEXT:    ld a, l
; Z80-NEXT:    add a, 3
; Z80-NEXT:    ld c, a
; Z80-NEXT:    ld a, (ix - 5)
; Z80-NEXT:    out (c), a
; Z80-NEXT:    ld a, l
; Z80-NEXT:    add a, 4
; Z80-NEXT:    ld c, a
; Z80-NEXT:    ld a, (ix - 2)
; Z80-NEXT:    out (c), a
; Z80-NEXT:    ld a, l
; Z80-NEXT:    add a, 5
; Z80-NEXT:    ld c, a
; Z80-NEXT:    ld a, (ix - 3)
; Z80-NEXT:    out (c), a
; Z80-NEXT:    ld a, l
; Z80-NEXT:    add a, 6
; Z80-NEXT:    ld c, a
; Z80-NEXT:    ld a, (ix - 4)
; Z80-NEXT:    out (c), a
; Z80-NEXT:    ld a, l
; Z80-NEXT:    add a, 7
; Z80-NEXT:    ld c, a
; Z80-NEXT:    ld a, (ix - 1)
; Z80-NEXT:    out (c), a
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: store.p2i64.1:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 6
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld bc, (ix + 4)
; EZ80-CODE16-NEXT:    ld iy, (ix + 6)
; EZ80-CODE16-NEXT:    ld l, 1
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ld a, iyl
; EZ80-CODE16-NEXT:    ld (ix - 6), a ; 1-byte Folded Spill
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ld a, iyh
; EZ80-CODE16-NEXT:    ld (ix - 5), a ; 1-byte Folded Spill
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    ld de, (ix + 8)
; EZ80-CODE16-NEXT:    ld (ix - 2), e ; 1-byte Folded Spill
; EZ80-CODE16-NEXT:    ld de, (ix + 8)
; EZ80-CODE16-NEXT:    ld (ix - 3), d ; 1-byte Folded Spill
; EZ80-CODE16-NEXT:    ld iy, (ix + 10)
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ld a, iyl
; EZ80-CODE16-NEXT:    ld (ix - 4), a ; 1-byte Folded Spill
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    ld iy, (ix + 10)
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ld a, iyh
; EZ80-CODE16-NEXT:    ld (ix - 1), a ; 1-byte Folded Spill
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    ld a, c
; EZ80-CODE16-NEXT:    out (1), a
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    inc c
; EZ80-CODE16-NEXT:    out (c), h
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    add a, 2
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    ld a, (ix - 6)
; EZ80-CODE16-NEXT:    out (c), a
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    add a, 3
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    ld a, (ix - 5)
; EZ80-CODE16-NEXT:    out (c), a
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    add a, 4
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    ld a, (ix - 2)
; EZ80-CODE16-NEXT:    out (c), a
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    add a, 5
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    ld a, (ix - 3)
; EZ80-CODE16-NEXT:    out (c), a
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    add a, 6
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    ld a, (ix - 4)
; EZ80-CODE16-NEXT:    out (c), a
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    add a, 7
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    ld a, (ix - 1)
; EZ80-CODE16-NEXT:    out (c), a
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: store.p2i64.1:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 10
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld iy, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ld bc, (ix + 12)
; EZ80-NEXT:    ld l, 1
; EZ80-NEXT:    ld (ix - 8), c ; 1-byte Folded Spill
; EZ80-NEXT:    ld (ix - 7), b ; 1-byte Folded Spill
; EZ80-NEXT:    ld (ix - 6), de
; EZ80-NEXT:    ld a, (ix - 4)
; EZ80-NEXT:    ld (ix - 9), a
; EZ80-NEXT:    ld (ix - 10), d ; 1-byte Folded Spill
; EZ80-NEXT:    ld h, e
; EZ80-NEXT:    ld (ix - 3), iy
; EZ80-NEXT:    ld e, (ix - 1)
; EZ80-NEXT:    ld d, iyh
; EZ80-NEXT:    ld a, iyl
; EZ80-NEXT:    out (1), a
; EZ80-NEXT:    ld c, l
; EZ80-NEXT:    inc c
; EZ80-NEXT:    out (bc), d
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    add a, 2
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    out (bc), e
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    add a, 3
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    out (bc), h
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    add a, 4
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    ld a, (ix - 10)
; EZ80-NEXT:    out (bc), a
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    add a, 5
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    ld a, (ix - 9)
; EZ80-NEXT:    out (bc), a
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    add a, 6
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    ld a, (ix - 8)
; EZ80-NEXT:    out (bc), a
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    add a, 7
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    ld a, (ix - 7)
; EZ80-NEXT:    out (bc), a
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  store i64 %0, i64 addrspace(2)*  inttoptr (i1 1 to i64 addrspace(2)*)
  ret void
}

define void @store.p3i8(i8, i8 addrspace(3)*) {
; Z80-LABEL: store.p3i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld a, (iy + 2)
; Z80-NEXT:    ld c, (iy + 4)
; Z80-NEXT:    ld b, (iy + 5)
; Z80-NEXT:    out (c), a
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: store.p3i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld a, (iy + 2)
; EZ80-CODE16-NEXT:    ld bc, (iy + 4)
; EZ80-CODE16-NEXT:    out (c), a
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: store.p3i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld a, (iy + 3)
; EZ80-NEXT:    ld bc, (iy + 6)
; EZ80-NEXT:    out (bc), a
; EZ80-NEXT:    ret
  store i8 %0, i8 addrspace(3)* %1
  ret void
}

define void @store.p3i16(i16, i16 addrspace(3)*) {
; Z80-LABEL: store.p3i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld c, (iy + 4)
; Z80-NEXT:    ld b, (iy + 5)
; Z80-NEXT:    ld a, l
; Z80-NEXT:    ld l, h
; Z80-NEXT:    out (c), a
; Z80-NEXT:    inc bc
; Z80-NEXT:    out (c), l
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: store.p3i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld bc, (iy + 4)
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    ld l, h
; EZ80-CODE16-NEXT:    out (c), a
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    out (c), l
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: store.p3i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld bc, (iy + 6)
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    ld l, h
; EZ80-NEXT:    out (bc), a
; EZ80-NEXT:    inc.sis bc
; EZ80-NEXT:    out (bc), l
; EZ80-NEXT:    ret
  store i16 %0, i16 addrspace(3)* %1
  ret void
}

define void @store.p3i32(i32, i32 addrspace(3)*) {
; Z80-LABEL: store.p3i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    dec sp
; Z80-NEXT:    ld e, (ix + 4)
; Z80-NEXT:    ld d, (ix + 5)
; Z80-NEXT:    ld c, (ix + 6)
; Z80-NEXT:    ld b, (ix + 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld a, e
; Z80-NEXT:    ; kill: def $d killed $d killed $de
; Z80-NEXT:    ld e, c
; Z80-NEXT:    ld (ix - 1), b ; 1-byte Folded Spill
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    out (c), a
; Z80-NEXT:    inc bc
; Z80-NEXT:    out (c), d
; Z80-NEXT:    ld bc, 2
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    out (c), e
; Z80-NEXT:    ld de, 3
; Z80-NEXT:    add iy, de
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    ld a, (ix - 1)
; Z80-NEXT:    out (c), a
; Z80-NEXT:    inc sp
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: store.p3i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld de, (iy + 4)
; EZ80-CODE16-NEXT:    ld iy, (iy + 6)
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    ld l, h
; EZ80-CODE16-NEXT:    ld h, e
; EZ80-CODE16-NEXT:    ld e, d
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    out (c), a
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    out (c), l
; EZ80-CODE16-NEXT:    lea bc, iy + 2
; EZ80-CODE16-NEXT:    out (c), h
; EZ80-CODE16-NEXT:    lea bc, iy + 3
; EZ80-CODE16-NEXT:    out (c), e
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: store.p3i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld a, (ix + 9)
; EZ80-NEXT:    ld iy, (ix + 12)
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    ld e, (ix - 1)
; EZ80-NEXT:    ld d, h
; EZ80-NEXT:    ; kill: def $l killed $l killed $uhl
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    out (bc), l
; EZ80-NEXT:    inc.sis bc
; EZ80-NEXT:    out (bc), d
; EZ80-NEXT:    lea.sis bc, iy + 2
; EZ80-NEXT:    out (bc), e
; EZ80-NEXT:    lea.sis bc, iy + 3
; EZ80-NEXT:    out (bc), a
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  store i32 %0, i32 addrspace(3)* %1
  ret void
}

define void @store.p3i64(i64, i64 addrspace(3)*) {
; Z80-LABEL: store.p3i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -5
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld e, (ix + 4)
; Z80-NEXT:    ld d, (ix + 5)
; Z80-NEXT:    ld c, (ix + 6)
; Z80-NEXT:    ld b, (ix + 7)
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld a, e
; Z80-NEXT:    ld e, d
; Z80-NEXT:    ld d, c
; Z80-NEXT:    ld (ix - 5), b ; 1-byte Folded Spill
; Z80-NEXT:    ld (ix - 4), l ; 1-byte Folded Spill
; Z80-NEXT:    ld (ix - 3), h ; 1-byte Folded Spill
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ld (ix - 2), l ; 1-byte Folded Spill
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ld (ix - 1), h ; 1-byte Folded Spill
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    out (c), a
; Z80-NEXT:    inc bc
; Z80-NEXT:    out (c), e
; Z80-NEXT:    ld bc, 2
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    out (c), d
; Z80-NEXT:    ld de, 3
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add hl, de
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld a, (ix - 5)
; Z80-NEXT:    out (c), a
; Z80-NEXT:    inc de
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add hl, de
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld a, (ix - 4)
; Z80-NEXT:    out (c), a
; Z80-NEXT:    inc de
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add hl, de
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld a, (ix - 3)
; Z80-NEXT:    out (c), a
; Z80-NEXT:    inc de
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add hl, de
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld a, (ix - 2)
; Z80-NEXT:    out (c), a
; Z80-NEXT:    inc de
; Z80-NEXT:    add iy, de
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    ld a, (ix - 1)
; Z80-NEXT:    out (c), a
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: store.p3i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 3
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld bc, (ix + 6)
; EZ80-CODE16-NEXT:    ld iy, (ix + 12)
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    ld l, h
; EZ80-CODE16-NEXT:    ld e, c
; EZ80-CODE16-NEXT:    ld d, b
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    ld h, c
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    ld (ix - 3), b ; 1-byte Folded Spill
; EZ80-CODE16-NEXT:    ld bc, (ix + 10)
; EZ80-CODE16-NEXT:    ld (ix - 2), c ; 1-byte Folded Spill
; EZ80-CODE16-NEXT:    ld bc, (ix + 10)
; EZ80-CODE16-NEXT:    ld (ix - 1), b ; 1-byte Folded Spill
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    out (c), a
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    out (c), l
; EZ80-CODE16-NEXT:    lea bc, iy + 2
; EZ80-CODE16-NEXT:    out (c), e
; EZ80-CODE16-NEXT:    lea bc, iy + 3
; EZ80-CODE16-NEXT:    out (c), d
; EZ80-CODE16-NEXT:    lea bc, iy + 4
; EZ80-CODE16-NEXT:    out (c), h
; EZ80-CODE16-NEXT:    lea bc, iy + 5
; EZ80-CODE16-NEXT:    ld a, (ix - 3)
; EZ80-CODE16-NEXT:    out (c), a
; EZ80-CODE16-NEXT:    lea bc, iy + 6
; EZ80-CODE16-NEXT:    ld a, (ix - 2)
; EZ80-CODE16-NEXT:    out (c), a
; EZ80-CODE16-NEXT:    lea bc, iy + 7
; EZ80-CODE16-NEXT:    ld a, (ix - 1)
; EZ80-CODE16-NEXT:    out (c), a
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: store.p3i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 9
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld bc, (ix + 6)
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ld de, (ix + 12)
; EZ80-NEXT:    ld iy, (ix + 15)
; EZ80-NEXT:    ld (ix - 8), e ; 1-byte Folded Spill
; EZ80-NEXT:    ld (ix - 7), d ; 1-byte Folded Spill
; EZ80-NEXT:    ld (ix - 6), hl
; EZ80-NEXT:    ld a, (ix - 4)
; EZ80-NEXT:    ld (ix - 9), a
; EZ80-NEXT:    ld e, h
; EZ80-NEXT:    ld d, l
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ld l, (ix - 1)
; EZ80-NEXT:    ld h, b
; EZ80-NEXT:    ld a, c
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    out (bc), a
; EZ80-NEXT:    inc.sis bc
; EZ80-NEXT:    out (bc), h
; EZ80-NEXT:    lea.sis bc, iy + 2
; EZ80-NEXT:    out (bc), l
; EZ80-NEXT:    lea.sis bc, iy + 3
; EZ80-NEXT:    out (bc), d
; EZ80-NEXT:    lea.sis bc, iy + 4
; EZ80-NEXT:    out (bc), e
; EZ80-NEXT:    lea.sis bc, iy + 5
; EZ80-NEXT:    ld a, (ix - 9)
; EZ80-NEXT:    out (bc), a
; EZ80-NEXT:    lea.sis bc, iy + 6
; EZ80-NEXT:    ld a, (ix - 8)
; EZ80-NEXT:    out (bc), a
; EZ80-NEXT:    lea.sis bc, iy + 7
; EZ80-NEXT:    ld a, (ix - 7)
; EZ80-NEXT:    out (bc), a
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  store i64 %0, i64 addrspace(3)* %1
  ret void
}

define void @store.p3i8.1(i8) {
; Z80-LABEL: store.p3i8.1:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld a, (iy + 2)
; Z80-NEXT:    ld c, 1
; Z80-NEXT:    ld b, 0
; Z80-NEXT:    out (c), a
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: store.p3i8.1:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld a, (iy + 2)
; EZ80-CODE16-NEXT:    ld c, 1
; EZ80-CODE16-NEXT:    ld b, 0
; EZ80-CODE16-NEXT:    out (c), a
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: store.p3i8.1:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld a, (iy + 3)
; EZ80-NEXT:    ld c, 1
; EZ80-NEXT:    ld b, 0
; EZ80-NEXT:    out (bc), a
; EZ80-NEXT:    ret
  store i8 %0, i8 addrspace(3)* inttoptr (i1 1 to i8 addrspace(3)*)
  ret void
}

define void @store.p3i16.1(i16) {
; Z80-LABEL: store.p3i16.1:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld c, 1
; Z80-NEXT:    ld b, 0
; Z80-NEXT:    ld a, l
; Z80-NEXT:    ld l, h
; Z80-NEXT:    out (c), a
; Z80-NEXT:    inc bc
; Z80-NEXT:    out (c), l
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: store.p3i16.1:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld c, 1
; EZ80-CODE16-NEXT:    ld b, 0
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    ld l, h
; EZ80-CODE16-NEXT:    out (c), a
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    out (c), l
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: store.p3i16.1:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld c, 1
; EZ80-NEXT:    ld b, 0
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    ld l, h
; EZ80-NEXT:    out (bc), a
; EZ80-NEXT:    inc.sis bc
; EZ80-NEXT:    out (bc), l
; EZ80-NEXT:    ret
  store i16 %0, i16 addrspace(3)* inttoptr (i1 1 to i16 addrspace(3)*)
  ret void
}

define void @store.p3i32.1(i32) {
; Z80-LABEL: store.p3i32.1:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    dec sp
; Z80-NEXT:    ld e, (ix + 4)
; Z80-NEXT:    ld d, (ix + 5)
; Z80-NEXT:    ld c, (ix + 6)
; Z80-NEXT:    ld b, (ix + 7)
; Z80-NEXT:    ld iyl, 1
; Z80-NEXT:    ld iyh, 0
; Z80-NEXT:    ld a, e
; Z80-NEXT:    ; kill: def $d killed $d killed $de
; Z80-NEXT:    ld e, c
; Z80-NEXT:    ld (ix - 1), b ; 1-byte Folded Spill
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    out (c), a
; Z80-NEXT:    inc bc
; Z80-NEXT:    out (c), d
; Z80-NEXT:    ld bc, 2
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    out (c), e
; Z80-NEXT:    ld de, 3
; Z80-NEXT:    add iy, de
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    ld a, (ix - 1)
; Z80-NEXT:    out (c), a
; Z80-NEXT:    inc sp
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: store.p3i32.1:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld de, (iy + 4)
; EZ80-CODE16-NEXT:    ld iyl, 1
; EZ80-CODE16-NEXT:    ld iyh, 0
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    ld l, h
; EZ80-CODE16-NEXT:    ld h, e
; EZ80-CODE16-NEXT:    ld e, d
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    out (c), a
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    out (c), l
; EZ80-CODE16-NEXT:    lea bc, iy + 2
; EZ80-CODE16-NEXT:    out (c), h
; EZ80-CODE16-NEXT:    lea bc, iy + 3
; EZ80-CODE16-NEXT:    out (c), e
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: store.p3i32.1:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld a, (ix + 9)
; EZ80-NEXT:    ld iyl, 1
; EZ80-NEXT:    ld iyh, 0
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    ld e, (ix - 1)
; EZ80-NEXT:    ld d, h
; EZ80-NEXT:    ; kill: def $l killed $l killed $uhl
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    out (bc), l
; EZ80-NEXT:    inc.sis bc
; EZ80-NEXT:    out (bc), d
; EZ80-NEXT:    lea.sis bc, iy + 2
; EZ80-NEXT:    out (bc), e
; EZ80-NEXT:    lea.sis bc, iy + 3
; EZ80-NEXT:    out (bc), a
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  store i32 %0, i32 addrspace(3)* inttoptr (i1 1 to i32 addrspace(3)*)
  ret void
}

define void @store.p3i64.1(i64) {
; Z80-LABEL: store.p3i64.1:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -5
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld e, (ix + 4)
; Z80-NEXT:    ld d, (ix + 5)
; Z80-NEXT:    ld c, (ix + 6)
; Z80-NEXT:    ld b, (ix + 7)
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld iyl, 1
; Z80-NEXT:    ld iyh, 0
; Z80-NEXT:    ld a, e
; Z80-NEXT:    ld e, d
; Z80-NEXT:    ld d, c
; Z80-NEXT:    ld (ix - 5), b ; 1-byte Folded Spill
; Z80-NEXT:    ld (ix - 4), l ; 1-byte Folded Spill
; Z80-NEXT:    ld (ix - 3), h ; 1-byte Folded Spill
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ld (ix - 2), l ; 1-byte Folded Spill
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ld (ix - 1), h ; 1-byte Folded Spill
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    out (c), a
; Z80-NEXT:    inc bc
; Z80-NEXT:    out (c), e
; Z80-NEXT:    ld bc, 2
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    out (c), d
; Z80-NEXT:    ld de, 3
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add hl, de
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld a, (ix - 5)
; Z80-NEXT:    out (c), a
; Z80-NEXT:    inc de
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add hl, de
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld a, (ix - 4)
; Z80-NEXT:    out (c), a
; Z80-NEXT:    inc de
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add hl, de
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld a, (ix - 3)
; Z80-NEXT:    out (c), a
; Z80-NEXT:    inc de
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add hl, de
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld a, (ix - 2)
; Z80-NEXT:    out (c), a
; Z80-NEXT:    inc de
; Z80-NEXT:    add iy, de
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    ld a, (ix - 1)
; Z80-NEXT:    out (c), a
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: store.p3i64.1:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 3
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld bc, (ix + 6)
; EZ80-CODE16-NEXT:    ld iyl, 1
; EZ80-CODE16-NEXT:    ld iyh, 0
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    ld l, h
; EZ80-CODE16-NEXT:    ld e, c
; EZ80-CODE16-NEXT:    ld d, b
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    ld h, c
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    ld (ix - 3), b ; 1-byte Folded Spill
; EZ80-CODE16-NEXT:    ld bc, (ix + 10)
; EZ80-CODE16-NEXT:    ld (ix - 2), c ; 1-byte Folded Spill
; EZ80-CODE16-NEXT:    ld bc, (ix + 10)
; EZ80-CODE16-NEXT:    ld (ix - 1), b ; 1-byte Folded Spill
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    out (c), a
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    out (c), l
; EZ80-CODE16-NEXT:    lea bc, iy + 2
; EZ80-CODE16-NEXT:    out (c), e
; EZ80-CODE16-NEXT:    lea bc, iy + 3
; EZ80-CODE16-NEXT:    out (c), d
; EZ80-CODE16-NEXT:    lea bc, iy + 4
; EZ80-CODE16-NEXT:    out (c), h
; EZ80-CODE16-NEXT:    lea bc, iy + 5
; EZ80-CODE16-NEXT:    ld a, (ix - 3)
; EZ80-CODE16-NEXT:    out (c), a
; EZ80-CODE16-NEXT:    lea bc, iy + 6
; EZ80-CODE16-NEXT:    ld a, (ix - 2)
; EZ80-CODE16-NEXT:    out (c), a
; EZ80-CODE16-NEXT:    lea bc, iy + 7
; EZ80-CODE16-NEXT:    ld a, (ix - 1)
; EZ80-CODE16-NEXT:    out (c), a
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: store.p3i64.1:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 9
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld bc, (ix + 6)
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ld de, (ix + 12)
; EZ80-NEXT:    ld iyl, 1
; EZ80-NEXT:    ld iyh, 0
; EZ80-NEXT:    ld (ix - 8), e ; 1-byte Folded Spill
; EZ80-NEXT:    ld (ix - 7), d ; 1-byte Folded Spill
; EZ80-NEXT:    ld (ix - 6), hl
; EZ80-NEXT:    ld a, (ix - 4)
; EZ80-NEXT:    ld (ix - 9), a
; EZ80-NEXT:    ld e, h
; EZ80-NEXT:    ld d, l
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ld l, (ix - 1)
; EZ80-NEXT:    ld h, b
; EZ80-NEXT:    ld a, c
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    out (bc), a
; EZ80-NEXT:    inc.sis bc
; EZ80-NEXT:    out (bc), h
; EZ80-NEXT:    lea.sis bc, iy + 2
; EZ80-NEXT:    out (bc), l
; EZ80-NEXT:    lea.sis bc, iy + 3
; EZ80-NEXT:    out (bc), d
; EZ80-NEXT:    lea.sis bc, iy + 4
; EZ80-NEXT:    out (bc), e
; EZ80-NEXT:    lea.sis bc, iy + 5
; EZ80-NEXT:    ld a, (ix - 9)
; EZ80-NEXT:    out (bc), a
; EZ80-NEXT:    lea.sis bc, iy + 6
; EZ80-NEXT:    ld a, (ix - 8)
; EZ80-NEXT:    out (bc), a
; EZ80-NEXT:    lea.sis bc, iy + 7
; EZ80-NEXT:    ld a, (ix - 7)
; EZ80-NEXT:    out (bc), a
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  store i64 %0, i64 addrspace(3)*  inttoptr (i1 1 to i64 addrspace(3)*)
  ret void
}
