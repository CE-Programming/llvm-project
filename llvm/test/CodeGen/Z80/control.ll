; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=z80 < %s | FileCheck %s --check-prefixes=Z80
; RUN: llc -mtriple=ez80-code16 < %s | FileCheck %s --check-prefixes=EZ80-CODE16
; RUN: llc -mtriple=ez80 < %s | FileCheck %s --check-prefixes=EZ80

define void @ret.void() {
; Z80-LABEL: ret.void:
; Z80:       ; %bb.0:
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: ret.void:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: ret.void:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ret
  ret void
}
define i8 @ret.i8(i8) {
; Z80-LABEL: ret.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld a, (iy + 2)
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: ret.i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld a, (iy + 2)
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: ret.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld a, (iy + 3)
; EZ80-NEXT:    ret
  ret i8 %0
}
define i16 @ret.i16(i16) {
; Z80-LABEL: ret.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: ret.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: ret.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    ret
  ret i16 %0
}
define i24 @ret.i24(i24) {
; Z80-LABEL: ret.i24:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld a, (iy + 4)
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: ret.i24:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld a, (iy + 4)
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: ret.i24:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ret
  ret i24 %0
}
define i32 @ret.i32(i32) {
; Z80-LABEL: ret.i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld d, (iy + 5)
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: ret.i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld de, (iy + 4)
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: ret.i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld e, (iy + 6)
; EZ80-NEXT:    ret
  ret i32 %0
}
define i48 @ret.i48(i48) {
; Z80-LABEL: ret.i48:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld d, (iy + 5)
; Z80-NEXT:    ld c, (iy + 6)
; Z80-NEXT:    ld b, (iy + 7)
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: ret.i48:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld de, (iy + 4)
; EZ80-CODE16-NEXT:    ld bc, (iy + 6)
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: ret.i48:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld de, (iy + 6)
; EZ80-NEXT:    ret
  ret i48 %0
}
define i64 @ret.i64(i64) {
; Z80-LABEL: ret.i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld d, (iy + 5)
; Z80-NEXT:    ld c, (iy + 6)
; Z80-NEXT:    ld b, (iy + 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (iy + 8)
; Z80-NEXT:    ld h, (iy + 9)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: ret.i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld de, (iy + 4)
; EZ80-CODE16-NEXT:    ld bc, (iy + 6)
; EZ80-CODE16-NEXT:    ld iy, (iy + 8)
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: ret.i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld de, (iy + 6)
; EZ80-NEXT:    ld bc, (iy + 9)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    ret
  ret i64 %0
}
define float @ret.f32(float) {
; Z80-LABEL: ret.f32:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld d, (iy + 5)
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: ret.f32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld de, (iy + 4)
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: ret.f32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld e, (iy + 6)
; EZ80-NEXT:    ret
  ret float %0
}
define double @ret.f64(double) {
; Z80-LABEL: ret.f64:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld d, (iy + 5)
; Z80-NEXT:    ld c, (iy + 6)
; Z80-NEXT:    ld b, (iy + 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (iy + 8)
; Z80-NEXT:    ld h, (iy + 9)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: ret.f64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld de, (iy + 4)
; EZ80-CODE16-NEXT:    ld bc, (iy + 6)
; EZ80-CODE16-NEXT:    ld iy, (iy + 8)
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: ret.f64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld de, (iy + 6)
; EZ80-NEXT:    ld bc, (iy + 9)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    ret
  ret double %0
}

define void @br() {
; Z80-LABEL: br:
; Z80:       ; %bb.0:
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: br:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: br:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ret
  br label %1
  ret void
}
define i8 @br.i1(i1) {
; Z80-LABEL: br.i1:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    xor a, a
; Z80-NEXT:    bit 0, (iy + 2)
; Z80-NEXT:    jr z, BB10_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:  BB10_2:
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: br.i1:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    xor a, a
; EZ80-CODE16-NEXT:    bit 0, (iy + 2)
; EZ80-CODE16-NEXT:    jr z, BB10_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:  BB10_2:
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: br.i1:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    xor a, a
; EZ80-NEXT:    bit 0, (iy + 3)
; EZ80-NEXT:    jr z, BB10_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, 1
; EZ80-NEXT:  BB10_2:
; EZ80-NEXT:    ret
  br i1 %0, label %2, label %3
  ret i8 1
  ret i8 0
}

define i8 @switch(i8) {
; Z80-LABEL: switch:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld e, (iy + 2)
; Z80-NEXT:    ld d, 0
; Z80-NEXT:    ld a, e
; Z80-NEXT:    cp a, 4
; Z80-NEXT:    jr c, BB11_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, -1
; Z80-NEXT:    ret
; Z80-NEXT:  BB11_2:
; Z80-NEXT:    ld hl, JTI11_0
; Z80-NEXT:    add hl, de
; Z80-NEXT:    add hl, de
; Z80-NEXT:    push de
; Z80-NEXT:    ld e, (hl)
; Z80-NEXT:    inc hl
; Z80-NEXT:    ld d, (hl)
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    pop de
; Z80-NEXT:    jp (hl)
; Z80-NEXT:  BB11_3:
; Z80-NEXT:    ld a, d
; Z80-NEXT:    ret
; Z80-NEXT:  BB11_4:
; Z80-NEXT:    ld a, 2
; Z80-NEXT:    ret
; Z80-NEXT:  BB11_5:
; Z80-NEXT:    ld a, 3
; Z80-NEXT:    ret
; Z80-NEXT:  BB11_6:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: switch:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld e, (iy + 2)
; EZ80-CODE16-NEXT:    ld d, 0
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    cp a, 4
; EZ80-CODE16-NEXT:    jr c, BB11_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, -1
; EZ80-CODE16-NEXT:    ret
; EZ80-CODE16-NEXT:  BB11_2:
; EZ80-CODE16-NEXT:    ld hl, JTI11_0
; EZ80-CODE16-NEXT:    add hl, de
; EZ80-CODE16-NEXT:    add hl, de
; EZ80-CODE16-NEXT:    ld hl, (hl)
; EZ80-CODE16-NEXT:    jp (hl)
; EZ80-CODE16-NEXT:  BB11_3:
; EZ80-CODE16-NEXT:    ld a, d
; EZ80-CODE16-NEXT:    ret
; EZ80-CODE16-NEXT:  BB11_4:
; EZ80-CODE16-NEXT:    ld a, 2
; EZ80-CODE16-NEXT:    ret
; EZ80-CODE16-NEXT:  BB11_5:
; EZ80-CODE16-NEXT:    ld a, 3
; EZ80-CODE16-NEXT:    ret
; EZ80-CODE16-NEXT:  BB11_6:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: switch:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld a, (iy + 3)
; EZ80-NEXT:    ld c, 0
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    cp a, 4
; EZ80-NEXT:    jr c, BB11_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, -1
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB11_2:
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld hl, JTI11_0
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    jp (hl)
; EZ80-NEXT:  BB11_3:
; EZ80-NEXT:    ld a, c
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB11_4:
; EZ80-NEXT:    ld a, 2
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB11_5:
; EZ80-NEXT:    ld a, 3
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB11_6:
; EZ80-NEXT:    ld a, 1
; EZ80-NEXT:    ret
  switch i8 %0, label %2 [ i8 0, label %3
                           i8 1, label %4
                           i8 2, label %5
                           i8 3, label %6 ]
  ret i8 -1
  ret i8 0
  ret i8 1
  ret i8 2
  ret i8 3
}

define i8 @indirectbr(i8*) {
; Z80-LABEL: indirectbr:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    xor a, a
; Z80-NEXT:    jp (hl)
; Z80-NEXT:  BB12_1:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:  BB12_2:
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: indirectbr:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    xor a, a
; EZ80-CODE16-NEXT:    jp (hl)
; EZ80-CODE16-NEXT:  BB12_1:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:  BB12_2:
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: indirectbr:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    xor a, a
; EZ80-NEXT:    jp (hl)
; EZ80-NEXT:  BB12_1:
; EZ80-NEXT:    ld a, 1
; EZ80-NEXT:  BB12_2:
; EZ80-NEXT:    ret
  indirectbr i8* %0, [label %2, label %3]
  ret i8 1
  ret i8 0
}

