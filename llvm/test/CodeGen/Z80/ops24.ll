; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=ez80 < %s | FileCheck %s --check-prefixes=EZ80

define i24 @shl.i24(i24, i24) {
; EZ80-LABEL: shl.i24:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld bc, (iy + 6)
; EZ80-NEXT:    ; kill: def $c killed $c killed $ubc
; EZ80-NEXT:    call __ishl
; EZ80-NEXT:    ret
  shl i24 %0, %1
  ret i24 %3
}
define i24 @lshr.i24(i24, i24) {
; EZ80-LABEL: lshr.i24:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld bc, (iy + 6)
; EZ80-NEXT:    ; kill: def $c killed $c killed $ubc
; EZ80-NEXT:    call __ishru
; EZ80-NEXT:    ret
  lshr i24 %0, %1
  ret i24 %3
}
define i24 @ashr.i24(i24, i24) {
; EZ80-LABEL: ashr.i24:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld bc, (iy + 6)
; EZ80-NEXT:    ; kill: def $c killed $c killed $ubc
; EZ80-NEXT:    call __ishrs
; EZ80-NEXT:    ret
  ashr i24 %0, %1
  ret i24 %3
}
define i24 @and.i24(i24, i24) {
; EZ80-LABEL: and.i24:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld bc, (iy + 6)
; EZ80-NEXT:    call __iand
; EZ80-NEXT:    ret
  and i24 %0, %1
  ret i24 %3
}
define i24 @or.i24(i24, i24) {
; EZ80-LABEL: or.i24:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld bc, (iy + 6)
; EZ80-NEXT:    call __ior
; EZ80-NEXT:    ret
  or i24 %0, %1
  ret i24 %3
}
define i24 @xor.i24(i24, i24) {
; EZ80-LABEL: xor.i24:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld bc, (iy + 6)
; EZ80-NEXT:    call __ixor
; EZ80-NEXT:    ret
  xor i24 %0, %1
  ret i24 %3
}
define i24 @add.i24(i24, i24) {
; EZ80-LABEL: add.i24:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld de, (iy + 6)
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ret
  add i24 %0, %1
  ret i24 %3
}
define i24 @sub.i24(i24, i24) {
; EZ80-LABEL: sub.i24:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld de, (iy + 6)
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:    ret
  sub i24 %0, %1
  ret i24 %3
}
define i24 @mul.i24(i24, i24) {
; EZ80-LABEL: mul.i24:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld bc, (iy + 6)
; EZ80-NEXT:    call __imulu
; EZ80-NEXT:    ret
  mul i24 %0, %1
  ret i24 %3
}
define i24 @udiv.i24(i24, i24) {
; EZ80-LABEL: udiv.i24:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld bc, (iy + 6)
; EZ80-NEXT:    call __idivu
; EZ80-NEXT:    ret
  udiv i24 %0, %1
  ret i24 %3
}
define i24 @sdiv.i24(i24, i24) {
; EZ80-LABEL: sdiv.i24:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld bc, (iy + 6)
; EZ80-NEXT:    call __idivs
; EZ80-NEXT:    ret
  sdiv i24 %0, %1
  ret i24 %3
}
define i24 @urem.i24(i24, i24) {
; EZ80-LABEL: urem.i24:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld bc, (iy + 6)
; EZ80-NEXT:    call __iremu
; EZ80-NEXT:    ret
  urem i24 %0, %1
  ret i24 %3
}
define i24 @srem.i24(i24, i24) {
; EZ80-LABEL: srem.i24:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld bc, (iy + 6)
; EZ80-NEXT:    call __irems
; EZ80-NEXT:    ret
  srem i24 %0, %1
  ret i24 %3
}
