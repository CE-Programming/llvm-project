; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=z80 < %s | FileCheck %s --check-prefixes=Z80
; RUN: llc -mtriple=ez80-code16 < %s | FileCheck %s --check-prefixes=EZ80-CODE16
; RUN: llc -mtriple=ez80 < %s | FileCheck %s --check-prefixes=EZ80

declare i8 @llvm.sadd.sat.i8(i8, i8)
define i8 @sadd.sat.i8(i8, i8) {
; Z80-LABEL: sadd.sat.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 4)
; Z80-NEXT:    ld a, l
; Z80-NEXT:    add a, h
; Z80-NEXT:    ld e, a
; Z80-NEXT:    rlc a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    add a, -128
; Z80-NEXT:    ld c, a
; Z80-NEXT:    ld a, l
; Z80-NEXT:    add a, h
; Z80-NEXT:    jp pe, BB0_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld c, e
; Z80-NEXT:  BB0_2:
; Z80-NEXT:    ld a, c
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: sadd.sat.i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld l, (iy + 2)
; EZ80-CODE16-NEXT:    ld h, (iy + 4)
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    add a, h
; EZ80-CODE16-NEXT:    ld e, a
; EZ80-CODE16-NEXT:    rlc a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    add a, -128
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    add a, h
; EZ80-CODE16-NEXT:    jp pe, BB0_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld c, e
; EZ80-CODE16-NEXT:  BB0_2:
; EZ80-CODE16-NEXT:    ld a, c
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: sadd.sat.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld l, (iy + 3)
; EZ80-NEXT:    ld h, (iy + 6)
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    add a, h
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    rlc a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    add a, -128
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    add a, h
; EZ80-NEXT:    jp pe, BB0_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld c, e
; EZ80-NEXT:  BB0_2:
; EZ80-NEXT:    ld a, c
; EZ80-NEXT:    ret
  call i8 @llvm.sadd.sat.i8(i8 %0, i8 %1)
  ret i8 %3
}
declare i16 @llvm.sadd.sat.i16(i16, i16)
define i16 @sadd.sat.i16(i16, i16) {
; Z80-LABEL: sadd.sat.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    add hl, de
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld bc, -32768
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld c, (ix + 6)
; Z80-NEXT:    ld b, (ix + 7)
; Z80-NEXT:    add iy, bc
; Z80-NEXT:    jp pe, BB1_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ex de, hl
; Z80-NEXT:  BB1_2:
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: sadd.sat.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    add hl, de
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld bc, -32768
; EZ80-CODE16-NEXT:    add hl, bc
; EZ80-CODE16-NEXT:    ld iy, (ix - 2)
; EZ80-CODE16-NEXT:    ld bc, (ix + 6)
; EZ80-CODE16-NEXT:    add iy, bc
; EZ80-CODE16-NEXT:    jp pe, BB1_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:  BB1_2:
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: sadd.sat.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    add.sis hl, de
; EZ80-NEXT:    ld e, l
; EZ80-NEXT:    ld d, h
; EZ80-NEXT:    ld iyl, e
; EZ80-NEXT:    ld iyh, d
; EZ80-NEXT:    add.sis iy, iy
; EZ80-NEXT:    sbc.sis hl, hl
; EZ80-NEXT:    ld.sis bc, -32768
; EZ80-NEXT:    add.sis hl, bc
; EZ80-NEXT:    ld iy, (ix - 3)
; EZ80-NEXT:    ld bc, (ix + 9)
; EZ80-NEXT:    add.sis iy, bc
; EZ80-NEXT:    jp pe, BB1_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:  BB1_2:
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i16 @llvm.sadd.sat.i16(i16 %0, i16 %1)
  ret i16 %3
}
declare i32 @llvm.sadd.sat.i32(i32, i32)
define i32 @sadd.sat.i32(i32, i32) {
; Z80-LABEL: sadd.sat.i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -5
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ld e, (ix + 8)
; Z80-NEXT:    ld d, (ix + 9)
; Z80-NEXT:    ld c, (ix + 10)
; Z80-NEXT:    ld b, (ix + 11)
; Z80-NEXT:    add iy, de
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    jp pe, BB2_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    jr BB2_3
; Z80-NEXT:  BB2_2:
; Z80-NEXT:    ld a, -1
; Z80-NEXT:  BB2_3:
; Z80-NEXT:    ld (ix - 1), a
; Z80-NEXT:    ld a, 31
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 5), l
; Z80-NEXT:    ld (ix - 4), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld (ix - 3), l
; Z80-NEXT:    ld (ix - 2), h
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    call __lshrs
; Z80-NEXT:    ld iy, -32768
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld a, (ix - 1) ; 1-byte Folded Reload
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB2_5
; Z80-NEXT:  ; %bb.4:
; Z80-NEXT:    ld l, (ix - 5)
; Z80-NEXT:    ld h, (ix - 4)
; Z80-NEXT:  BB2_5:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB2_7
; Z80-NEXT:  ; %bb.6:
; Z80-NEXT:    ld e, (ix - 3)
; Z80-NEXT:    ld d, (ix - 2)
; Z80-NEXT:  BB2_7:
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: sadd.sat.i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 5
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld iy, (ix + 4)
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    ld de, (ix + 8)
; EZ80-CODE16-NEXT:    ld bc, (ix + 10)
; EZ80-CODE16-NEXT:    add iy, de
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    jp pe, BB2_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    jr BB2_3
; EZ80-CODE16-NEXT:  BB2_2:
; EZ80-CODE16-NEXT:    ld a, -1
; EZ80-CODE16-NEXT:  BB2_3:
; EZ80-CODE16-NEXT:    ld (ix - 1), a
; EZ80-CODE16-NEXT:    ld a, 31
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    ld (ix - 5), iy
; EZ80-CODE16-NEXT:    ld (ix - 3), hl
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    call __lshrs
; EZ80-CODE16-NEXT:    ld iy, -32768
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld a, (ix - 1) ; 1-byte Folded Reload
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB2_5
; EZ80-CODE16-NEXT:  ; %bb.4:
; EZ80-CODE16-NEXT:    ld hl, (ix - 5)
; EZ80-CODE16-NEXT:  BB2_5:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB2_7
; EZ80-CODE16-NEXT:  ; %bb.6:
; EZ80-CODE16-NEXT:    ld de, (ix - 3)
; EZ80-CODE16-NEXT:  BB2_7:
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: sadd.sat.i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    dec sp
; EZ80-NEXT:    ld iy, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 12)
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld a, (ix + 9)
; EZ80-NEXT:    adc a, (ix + 15)
; EZ80-NEXT:    jp pe, BB2_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld d, 0
; EZ80-NEXT:    jr BB2_3
; EZ80-NEXT:  BB2_2:
; EZ80-NEXT:    ld d, -1
; EZ80-NEXT:  BB2_3:
; EZ80-NEXT:    ld l, 31
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    ld (ix - 1), a ; 1-byte Folded Spill
; EZ80-NEXT:    call __lshrs
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld bc, 0
; EZ80-NEXT:    ld a, -128
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    bit 0, d
; EZ80-NEXT:    jr nz, BB2_5
; EZ80-NEXT:  ; %bb.4:
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:  BB2_5:
; EZ80-NEXT:    bit 0, d
; EZ80-NEXT:    jr nz, BB2_7
; EZ80-NEXT:  ; %bb.6:
; EZ80-NEXT:    ld e, (ix - 1) ; 1-byte Folded Reload
; EZ80-NEXT:  BB2_7:
; EZ80-NEXT:    inc sp
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i32 @llvm.sadd.sat.i32(i32 %0, i32 %1)
  ret i32 %3
}
declare i64 @llvm.sadd.sat.i64(i64, i64)
define i64 @sadd.sat.i64(i64, i64) {
; Z80-LABEL: sadd.sat.i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld e, (ix + 12)
; Z80-NEXT:    ld d, (ix + 13)
; Z80-NEXT:    ld c, (ix + 14)
; Z80-NEXT:    ld b, (ix + 15)
; Z80-NEXT:    add iy, de
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 16)
; Z80-NEXT:    ld d, (ix + 17)
; Z80-NEXT:    adc hl, de
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ld e, (ix + 18)
; Z80-NEXT:    ld d, (ix + 19)
; Z80-NEXT:    adc hl, de
; Z80-NEXT:    jp pe, BB3_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    jr BB3_3
; Z80-NEXT:  BB3_2:
; Z80-NEXT:    ld a, -1
; Z80-NEXT:  BB3_3:
; Z80-NEXT:    ld de, 63
; Z80-NEXT:    push de
; Z80-NEXT:    ld (ix - 6), l
; Z80-NEXT:    ld (ix - 5), h
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, (ix - 2)
; Z80-NEXT:    ld d, (ix - 1)
; Z80-NEXT:    ld (ix - 8), c
; Z80-NEXT:    ld (ix - 7), b
; Z80-NEXT:    call __llshrs
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, -32768
; Z80-NEXT:    push hl
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    call __lladd
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB3_9
; Z80-NEXT:  ; %bb.4:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB3_10
; Z80-NEXT:  BB3_5:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB3_11
; Z80-NEXT:  BB3_6:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB3_8
; Z80-NEXT:  BB3_7:
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:  BB3_8:
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:  BB3_9:
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp nz, BB3_5
; Z80-NEXT:  BB3_10:
; Z80-NEXT:    ld e, (ix - 2)
; Z80-NEXT:    ld d, (ix - 1)
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp nz, BB3_6
; Z80-NEXT:  BB3_11:
; Z80-NEXT:    ld c, (ix - 8)
; Z80-NEXT:    ld b, (ix - 7)
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB3_7
; Z80-NEXT:    jp BB3_8
;
; EZ80-CODE16-LABEL: sadd.sat.i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 10
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld iy, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 12)
; EZ80-CODE16-NEXT:    ld bc, (ix + 14)
; EZ80-CODE16-NEXT:    add iy, de
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 16)
; EZ80-CODE16-NEXT:    adc hl, de
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    ld de, (ix + 18)
; EZ80-CODE16-NEXT:    adc hl, de
; EZ80-CODE16-NEXT:    jp pe, BB3_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    jr BB3_3
; EZ80-CODE16-NEXT:  BB3_2:
; EZ80-CODE16-NEXT:    ld a, -1
; EZ80-CODE16-NEXT:  BB3_3:
; EZ80-CODE16-NEXT:    ld de, 63
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld (ix - 6), hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld (ix - 10), iy
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld de, (ix - 2)
; EZ80-CODE16-NEXT:    ld (ix - 8), bc
; EZ80-CODE16-NEXT:    call __llshrs
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, -32768
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    call __lladd
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB3_9
; EZ80-CODE16-NEXT:  ; %bb.4:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB3_10
; EZ80-CODE16-NEXT:  BB3_5:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB3_11
; EZ80-CODE16-NEXT:  BB3_6:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB3_8
; EZ80-CODE16-NEXT:  BB3_7:
; EZ80-CODE16-NEXT:    ld iy, (ix - 6)
; EZ80-CODE16-NEXT:  BB3_8:
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
; EZ80-CODE16-NEXT:  BB3_9:
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp nz, BB3_5
; EZ80-CODE16-NEXT:  BB3_10:
; EZ80-CODE16-NEXT:    ld de, (ix - 2)
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp nz, BB3_6
; EZ80-CODE16-NEXT:  BB3_11:
; EZ80-CODE16-NEXT:    ld bc, (ix - 8)
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB3_7
; EZ80-CODE16-NEXT:    jp BB3_8
;
; EZ80-LABEL: sadd.sat.i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 9
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld iy, (ix + 6)
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ld de, (ix + 15)
; EZ80-NEXT:    ld bc, (ix + 18)
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    adc hl, bc
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld hl, (ix + 12)
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    ld bc, (ix + 21)
; EZ80-NEXT:    adc.sis hl, bc
; EZ80-NEXT:    ld c, l
; EZ80-NEXT:    ld b, h
; EZ80-NEXT:    jp pe, BB3_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    jr BB3_3
; EZ80-NEXT:  BB3_2:
; EZ80-NEXT:    ld a, -1
; EZ80-NEXT:  BB3_3:
; EZ80-NEXT:    ld hl, 63
; EZ80-NEXT:    push hl
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld (ix - 6), de
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    call __llshrs
; EZ80-NEXT:    ld (ix - 9), iy
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld iy, -32768
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    push iy
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __lladd
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB3_8
; EZ80-NEXT:  ; %bb.4:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB3_9
; EZ80-NEXT:  BB3_5:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB3_7
; EZ80-NEXT:  BB3_6:
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:  BB3_7:
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB3_8:
; EZ80-NEXT:    ld hl, (ix - 9)
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB3_5
; EZ80-NEXT:  BB3_9:
; EZ80-NEXT:    ld de, (ix - 6)
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB3_6
; EZ80-NEXT:    jp BB3_7
  call i64 @llvm.sadd.sat.i64(i64 %0, i64 %1)
  ret i64 %3
}

declare i8 @llvm.uadd.sat.i8(i8, i8)
define i8 @uadd.sat.i8(i8, i8) {
; Z80-LABEL: uadd.sat.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld e, (iy + 2)
; Z80-NEXT:    ld c, (iy + 4)
; Z80-NEXT:    ld a, e
; Z80-NEXT:    add a, c
; Z80-NEXT:    ld l, a
; Z80-NEXT:    ld a, e
; Z80-NEXT:    add a, c
; Z80-NEXT:    jr nc, BB4_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld l, -1
; Z80-NEXT:  BB4_2:
; Z80-NEXT:    ld a, l
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: uadd.sat.i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld e, (iy + 2)
; EZ80-CODE16-NEXT:    ld c, (iy + 4)
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    add a, c
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    add a, c
; EZ80-CODE16-NEXT:    jr nc, BB4_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld l, -1
; EZ80-CODE16-NEXT:  BB4_2:
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: uadd.sat.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld e, (iy + 3)
; EZ80-NEXT:    ld c, (iy + 6)
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    add a, c
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    add a, c
; EZ80-NEXT:    jr nc, BB4_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld l, -1
; EZ80-NEXT:  BB4_2:
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    ret
  call i8 @llvm.uadd.sat.i8(i8 %0, i8 %1)
  ret i8 %3
}
declare i16 @llvm.uadd.sat.i16(i16, i16)
define i16 @uadd.sat.i16(i16, i16) {
; Z80-LABEL: uadd.sat.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld d, (iy + 5)
; Z80-NEXT:    add hl, de
; Z80-NEXT:    jr nc, BB5_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:  BB5_2:
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: uadd.sat.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld de, (iy + 4)
; EZ80-CODE16-NEXT:    add hl, de
; EZ80-CODE16-NEXT:    jr nc, BB5_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:  BB5_2:
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: uadd.sat.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld de, (iy + 6)
; EZ80-NEXT:    add.sis hl, de
; EZ80-NEXT:    jr nc, BB5_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld.sis hl, -1
; EZ80-NEXT:  BB5_2:
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    ret
  call i16 @llvm.uadd.sat.i16(i16 %0, i16 %1)
  ret i16 %3
}
declare i32 @llvm.uadd.sat.i32(i32, i32)
define i32 @uadd.sat.i32(i32, i32) {
; Z80-LABEL: uadd.sat.i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ld e, (ix + 8)
; Z80-NEXT:    ld d, (ix + 9)
; Z80-NEXT:    ld c, (ix + 10)
; Z80-NEXT:    ld b, (ix + 11)
; Z80-NEXT:    add iy, de
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld de, -1
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld c, e
; Z80-NEXT:    ld b, d
; Z80-NEXT:    jr nz, BB6_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:  BB6_2:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB6_4
; Z80-NEXT:  ; %bb.3:
; Z80-NEXT:    ex de, hl
; Z80-NEXT:  BB6_4:
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: uadd.sat.i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld iy, (ix + 4)
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    ld de, (ix + 8)
; EZ80-CODE16-NEXT:    ld bc, (ix + 10)
; EZ80-CODE16-NEXT:    add iy, de
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld de, -1
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld c, e
; EZ80-CODE16-NEXT:    ld b, d
; EZ80-CODE16-NEXT:    jr nz, BB6_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:  BB6_2:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB6_4
; EZ80-CODE16-NEXT:  ; %bb.3:
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:  BB6_4:
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: uadd.sat.i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld iy, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 12)
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld a, (ix + 9)
; EZ80-NEXT:    adc a, (ix + 15)
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    scf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB6_3
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB6_4
; EZ80-NEXT:  BB6_2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB6_3:
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB6_2
; EZ80-NEXT:  BB6_4:
; EZ80-NEXT:    ld e, -1
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i32 @llvm.uadd.sat.i32(i32 %0, i32 %1)
  ret i32 %3
}
declare i64 @llvm.uadd.sat.i64(i64, i64)
define i64 @uadd.sat.i64(i64, i64) {
; Z80-LABEL: uadd.sat.i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -6
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 12)
; Z80-NEXT:    ld d, (ix + 13)
; Z80-NEXT:    ld c, (ix + 14)
; Z80-NEXT:    ld b, (ix + 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 16)
; Z80-NEXT:    ld h, (ix + 17)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    add hl, de
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld (ix - 6), l
; Z80-NEXT:    ld (ix - 5), h
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ld c, (ix + 18)
; Z80-NEXT:    ld b, (ix + 19)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld iy, -1
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    jr nz, BB7_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ex de, hl
; Z80-NEXT:  BB7_2:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    jr nz, BB7_4
; Z80-NEXT:  ; %bb.3:
; Z80-NEXT:    ld e, (ix - 6)
; Z80-NEXT:    ld d, (ix - 5)
; Z80-NEXT:  BB7_4:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    jr nz, BB7_6
; Z80-NEXT:  ; %bb.5:
; Z80-NEXT:    ld c, (ix - 4)
; Z80-NEXT:    ld b, (ix - 3)
; Z80-NEXT:  BB7_6:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB7_8
; Z80-NEXT:  ; %bb.7:
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:  BB7_8:
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: uadd.sat.i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 6
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 12)
; EZ80-CODE16-NEXT:    ld bc, (ix + 14)
; EZ80-CODE16-NEXT:    ld iy, (ix + 16)
; EZ80-CODE16-NEXT:    add hl, de
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 6), hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    ld bc, (ix + 18)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld iy, -1
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    jr nz, BB7_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:  BB7_2:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    jr nz, BB7_4
; EZ80-CODE16-NEXT:  ; %bb.3:
; EZ80-CODE16-NEXT:    ld de, (ix - 6)
; EZ80-CODE16-NEXT:  BB7_4:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    jr nz, BB7_6
; EZ80-CODE16-NEXT:  ; %bb.5:
; EZ80-CODE16-NEXT:    ld bc, (ix - 4)
; EZ80-CODE16-NEXT:  BB7_6:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB7_8
; EZ80-CODE16-NEXT:  ; %bb.7:
; EZ80-CODE16-NEXT:    ld iy, (ix - 2)
; EZ80-CODE16-NEXT:  BB7_8:
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: uadd.sat.i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld iy, (ix + 6)
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ld de, (ix + 15)
; EZ80-NEXT:    ld bc, (ix + 18)
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    adc hl, bc
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    ld hl, (ix + 12)
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    ld de, (ix + 21)
; EZ80-NEXT:    adc.sis hl, de
; EZ80-NEXT:    ld c, l
; EZ80-NEXT:    ld b, h
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ld de, -1
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    jp z, BB7_5
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB7_6
; EZ80-NEXT:  BB7_2:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr z, BB7_4
; EZ80-NEXT:  BB7_3:
; EZ80-NEXT:    ld.sis bc, -1
; EZ80-NEXT:  BB7_4:
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB7_5:
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB7_2
; EZ80-NEXT:  BB7_6:
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB7_3
; EZ80-NEXT:    jp BB7_4
  call i64 @llvm.uadd.sat.i64(i64 %0, i64 %1)
  ret i64 %3
}

declare i8 @llvm.ssub.sat.i8(i8, i8)
define i8 @ssub.sat.i8(i8, i8) {
; Z80-LABEL: ssub.sat.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 4)
; Z80-NEXT:    ld a, l
; Z80-NEXT:    sub a, h
; Z80-NEXT:    ld e, a
; Z80-NEXT:    rlc a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    add a, -128
; Z80-NEXT:    ld c, a
; Z80-NEXT:    ld a, l
; Z80-NEXT:    sub a, h
; Z80-NEXT:    jp pe, BB8_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld c, e
; Z80-NEXT:  BB8_2:
; Z80-NEXT:    ld a, c
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: ssub.sat.i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld l, (iy + 2)
; EZ80-CODE16-NEXT:    ld h, (iy + 4)
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    sub a, h
; EZ80-CODE16-NEXT:    ld e, a
; EZ80-CODE16-NEXT:    rlc a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    add a, -128
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    sub a, h
; EZ80-CODE16-NEXT:    jp pe, BB8_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld c, e
; EZ80-CODE16-NEXT:  BB8_2:
; EZ80-CODE16-NEXT:    ld a, c
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: ssub.sat.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld l, (iy + 3)
; EZ80-NEXT:    ld h, (iy + 6)
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    sub a, h
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    rlc a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    add a, -128
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    sub a, h
; EZ80-NEXT:    jp pe, BB8_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld c, e
; EZ80-NEXT:  BB8_2:
; EZ80-NEXT:    ld a, c
; EZ80-NEXT:    ret
  call i8 @llvm.ssub.sat.i8(i8 %0, i8 %1)
  ret i8 %3
}
declare i16 @llvm.ssub.sat.i16(i16, i16)
define i16 @ssub.sat.i16(i16, i16) {
; Z80-LABEL: ssub.sat.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    ld e, (ix + 4)
; Z80-NEXT:    ld d, (ix + 5)
; Z80-NEXT:    ld c, (ix + 6)
; Z80-NEXT:    ld b, (ix + 7)
; Z80-NEXT:    ld l, e
; Z80-NEXT:    ld h, d
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld bc, -32768
; Z80-NEXT:    add iy, bc
; Z80-NEXT:    or a, a
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:    jp pe, BB9_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:  BB9_2:
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: ssub.sat.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld de, (ix + 4)
; EZ80-CODE16-NEXT:    ld bc, (ix + 6)
; EZ80-CODE16-NEXT:    ld l, e
; EZ80-CODE16-NEXT:    ld h, d
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld (ix - 2), iy
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld bc, -32768
; EZ80-CODE16-NEXT:    add iy, bc
; EZ80-CODE16-NEXT:    or a, a
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    sbc hl, de
; EZ80-CODE16-NEXT:    jp pe, BB9_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld iy, (ix - 2)
; EZ80-CODE16-NEXT:  BB9_2:
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: ssub.sat.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld de, (ix + 6)
; EZ80-NEXT:    ld bc, (ix + 9)
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:    sbc.sis hl, bc
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld iyl, e
; EZ80-NEXT:    ld iyh, d
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld (ix - 3), iy
; EZ80-NEXT:    add.sis iy, iy
; EZ80-NEXT:    sbc.sis hl, hl
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld iyl, e
; EZ80-NEXT:    ld iyh, d
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld.sis bc, -32768
; EZ80-NEXT:    add.sis iy, bc
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:    jp pe, BB9_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld iy, (ix - 3)
; EZ80-NEXT:  BB9_2:
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld d, iyh
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i16 @llvm.ssub.sat.i16(i16 %0, i16 %1)
  ret i16 %3
}
declare i32 @llvm.ssub.sat.i32(i32, i32)
define i32 @ssub.sat.i32(i32, i32) {
; Z80-LABEL: ssub.sat.i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -5
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 8)
; Z80-NEXT:    ld d, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:    jp pe, BB10_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    jr BB10_3
; Z80-NEXT:  BB10_2:
; Z80-NEXT:    ld a, -1
; Z80-NEXT:  BB10_3:
; Z80-NEXT:    ld (ix - 1), a
; Z80-NEXT:    ld a, 31
; Z80-NEXT:    ld (ix - 3), l
; Z80-NEXT:    ld (ix - 2), h
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld (ix - 5), c
; Z80-NEXT:    ld (ix - 4), b
; Z80-NEXT:    call __lshrs
; Z80-NEXT:    ld iy, -32768
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld a, (ix - 1) ; 1-byte Folded Reload
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB10_5
; Z80-NEXT:  ; %bb.4:
; Z80-NEXT:    ld l, (ix - 5)
; Z80-NEXT:    ld h, (ix - 4)
; Z80-NEXT:  BB10_5:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB10_7
; Z80-NEXT:  ; %bb.6:
; Z80-NEXT:    ld e, (ix - 3)
; Z80-NEXT:    ld d, (ix - 2)
; Z80-NEXT:  BB10_7:
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: ssub.sat.i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 5
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 8)
; EZ80-CODE16-NEXT:    ld iy, (ix + 10)
; EZ80-CODE16-NEXT:    sbc hl, de
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    sbc hl, de
; EZ80-CODE16-NEXT:    jp pe, BB10_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    jr BB10_3
; EZ80-CODE16-NEXT:  BB10_2:
; EZ80-CODE16-NEXT:    ld a, -1
; EZ80-CODE16-NEXT:  BB10_3:
; EZ80-CODE16-NEXT:    ld (ix - 1), a
; EZ80-CODE16-NEXT:    ld a, 31
; EZ80-CODE16-NEXT:    ld (ix - 3), hl
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld (ix - 5), bc
; EZ80-CODE16-NEXT:    call __lshrs
; EZ80-CODE16-NEXT:    ld iy, -32768
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld a, (ix - 1) ; 1-byte Folded Reload
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB10_5
; EZ80-CODE16-NEXT:  ; %bb.4:
; EZ80-CODE16-NEXT:    ld hl, (ix - 5)
; EZ80-CODE16-NEXT:  BB10_5:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB10_7
; EZ80-CODE16-NEXT:  ; %bb.6:
; EZ80-CODE16-NEXT:    ld de, (ix - 3)
; EZ80-CODE16-NEXT:  BB10_7:
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: ssub.sat.i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    dec sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 12)
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld a, (ix + 9)
; EZ80-NEXT:    sbc a, (ix + 15)
; EZ80-NEXT:    jp pe, BB10_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld d, 0
; EZ80-NEXT:    jr BB10_3
; EZ80-NEXT:  BB10_2:
; EZ80-NEXT:    ld d, -1
; EZ80-NEXT:  BB10_3:
; EZ80-NEXT:    ld l, 31
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    ld (ix - 1), a ; 1-byte Folded Spill
; EZ80-NEXT:    call __lshrs
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld bc, 0
; EZ80-NEXT:    ld a, -128
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    bit 0, d
; EZ80-NEXT:    jr nz, BB10_5
; EZ80-NEXT:  ; %bb.4:
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:  BB10_5:
; EZ80-NEXT:    bit 0, d
; EZ80-NEXT:    jr nz, BB10_7
; EZ80-NEXT:  ; %bb.6:
; EZ80-NEXT:    ld e, (ix - 1) ; 1-byte Folded Reload
; EZ80-NEXT:  BB10_7:
; EZ80-NEXT:    inc sp
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i32 @llvm.ssub.sat.i32(i32 %0, i32 %1)
  ret i32 %3
}
declare i64 @llvm.ssub.sat.i64(i64, i64)
define i64 @ssub.sat.i64(i64, i64) {
; Z80-LABEL: ssub.sat.i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 12)
; Z80-NEXT:    ld d, (ix + 13)
; Z80-NEXT:    ld c, (ix + 14)
; Z80-NEXT:    ld b, (ix + 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 16)
; Z80-NEXT:    ld h, (ix + 17)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ld c, (ix + 18)
; Z80-NEXT:    ld b, (ix + 19)
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    jp pe, BB11_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    jr BB11_3
; Z80-NEXT:  BB11_2:
; Z80-NEXT:    ld a, -1
; Z80-NEXT:  BB11_3:
; Z80-NEXT:    ld bc, 63
; Z80-NEXT:    push bc
; Z80-NEXT:    ld (ix - 6), l
; Z80-NEXT:    ld (ix - 5), h
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld (ix - 10), e
; Z80-NEXT:    ld (ix - 9), d
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    call __llshrs
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, -32768
; Z80-NEXT:    push hl
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    call __lladd
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB11_9
; Z80-NEXT:  ; %bb.4:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB11_10
; Z80-NEXT:  BB11_5:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB11_11
; Z80-NEXT:  BB11_6:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB11_8
; Z80-NEXT:  BB11_7:
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:  BB11_8:
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:  BB11_9:
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp nz, BB11_5
; Z80-NEXT:  BB11_10:
; Z80-NEXT:    ld e, (ix - 10)
; Z80-NEXT:    ld d, (ix - 9)
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp nz, BB11_6
; Z80-NEXT:  BB11_11:
; Z80-NEXT:    ld c, (ix - 8)
; Z80-NEXT:    ld b, (ix - 7)
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB11_7
; Z80-NEXT:    jp BB11_8
;
; EZ80-CODE16-LABEL: ssub.sat.i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 10
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 12)
; EZ80-CODE16-NEXT:    ld bc, (ix + 14)
; EZ80-CODE16-NEXT:    ld iy, (ix + 16)
; EZ80-CODE16-NEXT:    sbc hl, de
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    ld bc, (ix + 18)
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    jp pe, BB11_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    jr BB11_3
; EZ80-CODE16-NEXT:  BB11_2:
; EZ80-CODE16-NEXT:    ld a, -1
; EZ80-CODE16-NEXT:  BB11_3:
; EZ80-CODE16-NEXT:    ld bc, 63
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld (ix - 6), hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld (ix - 10), de
; EZ80-CODE16-NEXT:    ld (ix - 8), iy
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    call __llshrs
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, -32768
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    call __lladd
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB11_9
; EZ80-CODE16-NEXT:  ; %bb.4:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB11_10
; EZ80-CODE16-NEXT:  BB11_5:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB11_11
; EZ80-CODE16-NEXT:  BB11_6:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB11_8
; EZ80-CODE16-NEXT:  BB11_7:
; EZ80-CODE16-NEXT:    ld iy, (ix - 6)
; EZ80-CODE16-NEXT:  BB11_8:
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
; EZ80-CODE16-NEXT:  BB11_9:
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp nz, BB11_5
; EZ80-CODE16-NEXT:  BB11_10:
; EZ80-CODE16-NEXT:    ld de, (ix - 10)
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp nz, BB11_6
; EZ80-CODE16-NEXT:  BB11_11:
; EZ80-CODE16-NEXT:    ld bc, (ix - 8)
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB11_7
; EZ80-CODE16-NEXT:    jp BB11_8
;
; EZ80-LABEL: ssub.sat.i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 9
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 15)
; EZ80-NEXT:    ld bc, (ix + 18)
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    sbc hl, bc
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld hl, (ix + 12)
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    ld bc, (ix + 21)
; EZ80-NEXT:    sbc.sis hl, bc
; EZ80-NEXT:    ld c, l
; EZ80-NEXT:    ld b, h
; EZ80-NEXT:    jp pe, BB11_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    jr BB11_3
; EZ80-NEXT:  BB11_2:
; EZ80-NEXT:    ld a, -1
; EZ80-NEXT:  BB11_3:
; EZ80-NEXT:    ld hl, 63
; EZ80-NEXT:    push hl
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld (ix - 6), de
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    call __llshrs
; EZ80-NEXT:    ld (ix - 9), iy
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld iy, -32768
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    push iy
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __lladd
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB11_8
; EZ80-NEXT:  ; %bb.4:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB11_9
; EZ80-NEXT:  BB11_5:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB11_7
; EZ80-NEXT:  BB11_6:
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:  BB11_7:
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB11_8:
; EZ80-NEXT:    ld hl, (ix - 9)
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB11_5
; EZ80-NEXT:  BB11_9:
; EZ80-NEXT:    ld de, (ix - 6)
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB11_6
; EZ80-NEXT:    jp BB11_7
  call i64 @llvm.ssub.sat.i64(i64 %0, i64 %1)
  ret i64 %3
}

declare i8 @llvm.usub.sat.i8(i8, i8)
define i8 @usub.sat.i8(i8, i8) {
; Z80-LABEL: usub.sat.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld c, (iy + 2)
; Z80-NEXT:    ld h, (iy + 4)
; Z80-NEXT:    ld a, c
; Z80-NEXT:    sub a, h
; Z80-NEXT:    ld l, a
; Z80-NEXT:    ld e, 0
; Z80-NEXT:    ld a, c
; Z80-NEXT:    sub a, h
; Z80-NEXT:    jr c, BB12_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld e, l
; Z80-NEXT:  BB12_2:
; Z80-NEXT:    ld a, e
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: usub.sat.i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld c, (iy + 2)
; EZ80-CODE16-NEXT:    ld h, (iy + 4)
; EZ80-CODE16-NEXT:    ld a, c
; EZ80-CODE16-NEXT:    sub a, h
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    ld e, 0
; EZ80-CODE16-NEXT:    ld a, c
; EZ80-CODE16-NEXT:    sub a, h
; EZ80-CODE16-NEXT:    jr c, BB12_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:  BB12_2:
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: usub.sat.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld c, (iy + 3)
; EZ80-NEXT:    ld h, (iy + 6)
; EZ80-NEXT:    ld a, c
; EZ80-NEXT:    sub a, h
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    ld e, 0
; EZ80-NEXT:    ld a, c
; EZ80-NEXT:    sub a, h
; EZ80-NEXT:    jr c, BB12_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld e, l
; EZ80-NEXT:  BB12_2:
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ret
  call i8 @llvm.usub.sat.i8(i8 %0, i8 %1)
  ret i8 %3
}
declare i16 @llvm.usub.sat.i16(i16, i16)
define i16 @usub.sat.i16(i16, i16) {
; Z80-LABEL: usub.sat.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld c, (iy + 2)
; Z80-NEXT:    ld b, (iy + 3)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld d, (iy + 5)
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    or a, a
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    jr nc, BB13_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld de, 0
; Z80-NEXT:  BB13_2:
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: usub.sat.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld bc, (iy + 2)
; EZ80-CODE16-NEXT:    ld de, (iy + 4)
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    sbc hl, de
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    or a, a
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    jr nc, BB13_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:  BB13_2:
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: usub.sat.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld bc, (iy + 3)
; EZ80-NEXT:    ld de, (iy + 6)
; EZ80-NEXT:    ld l, c
; EZ80-NEXT:    ld h, b
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld e, l
; EZ80-NEXT:    ld d, h
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    ld l, c
; EZ80-NEXT:    ld h, b
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    sbc.sis hl, bc
; EZ80-NEXT:    jr nc, BB13_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld.sis de, 0
; EZ80-NEXT:  BB13_2:
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:    ret
  call i16 @llvm.usub.sat.i16(i16 %0, i16 %1)
  ret i16 %3
}
declare i32 @llvm.usub.sat.i32(i32, i32)
define i32 @usub.sat.i32(i32, i32) {
; Z80-LABEL: usub.sat.i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 8)
; Z80-NEXT:    ld d, (ix + 9)
; Z80-NEXT:    ld c, (ix + 10)
; Z80-NEXT:    ld b, (ix + 11)
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld c, e
; Z80-NEXT:    ld b, d
; Z80-NEXT:    jr nz, BB14_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:  BB14_2:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB14_4
; Z80-NEXT:  ; %bb.3:
; Z80-NEXT:    ex de, hl
; Z80-NEXT:  BB14_4:
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: usub.sat.i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 8)
; EZ80-CODE16-NEXT:    ld bc, (ix + 10)
; EZ80-CODE16-NEXT:    sbc hl, de
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld c, e
; EZ80-CODE16-NEXT:    ld b, d
; EZ80-CODE16-NEXT:    jr nz, BB14_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:  BB14_2:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB14_4
; EZ80-CODE16-NEXT:  ; %bb.3:
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:  BB14_4:
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: usub.sat.i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld de, (iy + 9)
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:    ld a, (iy + 6)
; EZ80-NEXT:    sbc a, (iy + 12)
; EZ80-NEXT:    ld d, a
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ld bc, 0
; EZ80-NEXT:    ld e, b
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB14_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:  BB14_2:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB14_4
; EZ80-NEXT:  ; %bb.3:
; EZ80-NEXT:    ld e, d
; EZ80-NEXT:  BB14_4:
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ret
  call i32 @llvm.usub.sat.i32(i32 %0, i32 %1)
  ret i32 %3
}
declare i64 @llvm.usub.sat.i64(i64, i64)
define i64 @usub.sat.i64(i64, i64) {
; Z80-LABEL: usub.sat.i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -6
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 12)
; Z80-NEXT:    ld d, (ix + 13)
; Z80-NEXT:    ld c, (ix + 14)
; Z80-NEXT:    ld b, (ix + 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 16)
; Z80-NEXT:    ld h, (ix + 17)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    ld (ix - 6), l
; Z80-NEXT:    ld (ix - 5), h
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ld c, (ix + 18)
; Z80-NEXT:    ld b, (ix + 19)
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    jr nz, BB15_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ex de, hl
; Z80-NEXT:  BB15_2:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    jr nz, BB15_4
; Z80-NEXT:  ; %bb.3:
; Z80-NEXT:    ld e, (ix - 6)
; Z80-NEXT:    ld d, (ix - 5)
; Z80-NEXT:  BB15_4:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    jr nz, BB15_6
; Z80-NEXT:  ; %bb.5:
; Z80-NEXT:    ld c, (ix - 4)
; Z80-NEXT:    ld b, (ix - 3)
; Z80-NEXT:  BB15_6:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB15_8
; Z80-NEXT:  ; %bb.7:
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:  BB15_8:
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: usub.sat.i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 6
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 12)
; EZ80-CODE16-NEXT:    ld bc, (ix + 14)
; EZ80-CODE16-NEXT:    ld iy, (ix + 16)
; EZ80-CODE16-NEXT:    sbc hl, de
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 6), hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    ld bc, (ix + 18)
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    jr nz, BB15_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:  BB15_2:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    jr nz, BB15_4
; EZ80-CODE16-NEXT:  ; %bb.3:
; EZ80-CODE16-NEXT:    ld de, (ix - 6)
; EZ80-CODE16-NEXT:  BB15_4:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    jr nz, BB15_6
; EZ80-CODE16-NEXT:  ; %bb.5:
; EZ80-CODE16-NEXT:    ld bc, (ix - 4)
; EZ80-CODE16-NEXT:  BB15_6:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB15_8
; EZ80-CODE16-NEXT:  ; %bb.7:
; EZ80-CODE16-NEXT:    ld iy, (ix - 2)
; EZ80-CODE16-NEXT:  BB15_8:
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: usub.sat.i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 15)
; EZ80-NEXT:    ld bc, (ix + 18)
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    sbc hl, bc
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    ld hl, (ix + 12)
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    ld de, (ix + 21)
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:    ld c, l
; EZ80-NEXT:    ld b, h
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    jp z, BB15_5
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB15_6
; EZ80-NEXT:  BB15_2:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr z, BB15_4
; EZ80-NEXT:  BB15_3:
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:  BB15_4:
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB15_5:
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB15_2
; EZ80-NEXT:  BB15_6:
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB15_3
; EZ80-NEXT:    jp BB15_4
  call i64 @llvm.usub.sat.i64(i64 %0, i64 %1)
  ret i64 %3
}

declare i8 @llvm.sshl.sat.i8(i8, i8)
define i8 @sshl.sat.i8(i8, i8) {
; Z80-LABEL: sshl.sat.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld b, (iy + 4)
; Z80-NEXT:    ld a, l
; Z80-NEXT:    call __bshl
; Z80-NEXT:    ld e, a
; Z80-NEXT:    call __bshrs
; Z80-NEXT:    ld c, a
; Z80-NEXT:    ld a, l
; Z80-NEXT:    add a, -128
; Z80-NEXT:    cp a, -128
; Z80-NEXT:    jr c, BB16_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld h, 127
; Z80-NEXT:    jr BB16_3
; Z80-NEXT:  BB16_2:
; Z80-NEXT:    ld h, -128
; Z80-NEXT:  BB16_3:
; Z80-NEXT:    ld a, l
; Z80-NEXT:    cp a, c
; Z80-NEXT:    jr nz, BB16_5
; Z80-NEXT:  ; %bb.4:
; Z80-NEXT:    ld h, e
; Z80-NEXT:  BB16_5:
; Z80-NEXT:    ld a, h
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: sshl.sat.i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld l, (iy + 2)
; EZ80-CODE16-NEXT:    ld b, (iy + 4)
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    call __bshl
; EZ80-CODE16-NEXT:    ld e, a
; EZ80-CODE16-NEXT:    call __bshrs
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    add a, -128
; EZ80-CODE16-NEXT:    cp a, -128
; EZ80-CODE16-NEXT:    jr c, BB16_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld h, 127
; EZ80-CODE16-NEXT:    jr BB16_3
; EZ80-CODE16-NEXT:  BB16_2:
; EZ80-CODE16-NEXT:    ld h, -128
; EZ80-CODE16-NEXT:  BB16_3:
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    cp a, c
; EZ80-CODE16-NEXT:    jr nz, BB16_5
; EZ80-CODE16-NEXT:  ; %bb.4:
; EZ80-CODE16-NEXT:    ld h, e
; EZ80-CODE16-NEXT:  BB16_5:
; EZ80-CODE16-NEXT:    ld a, h
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: sshl.sat.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld l, (iy + 3)
; EZ80-NEXT:    ld b, (iy + 6)
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    call __bshl
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    call __bshrs
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    add a, -128
; EZ80-NEXT:    cp a, -128
; EZ80-NEXT:    jr c, BB16_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld h, 127
; EZ80-NEXT:    jr BB16_3
; EZ80-NEXT:  BB16_2:
; EZ80-NEXT:    ld h, -128
; EZ80-NEXT:  BB16_3:
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    cp a, c
; EZ80-NEXT:    jr nz, BB16_5
; EZ80-NEXT:  ; %bb.4:
; EZ80-NEXT:    ld h, e
; EZ80-NEXT:  BB16_5:
; EZ80-NEXT:    ld a, h
; EZ80-NEXT:    ret
  call i8 @llvm.sshl.sat.i8(i8 %0, i8 %1)
  ret i8 %3
}
declare i16 @llvm.sshl.sat.i16(i16, i16)
define i16 @sshl.sat.i16(i16, i16) {
; Z80-LABEL: sshl.sat.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld c, (ix + 6)
; Z80-NEXT:    ld b, (ix + 7)
; Z80-NEXT:    call __sshl
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ; kill: def $c killed $c killed $bc
; Z80-NEXT:    call __sshrs
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    ld bc, -32768
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    jr c, BB17_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld bc, 32767
; Z80-NEXT:    jr BB17_3
; Z80-NEXT:  BB17_2:
; Z80-NEXT:    ld bc, -32768
; Z80-NEXT:  BB17_3:
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:    jr nz, BB17_5
; Z80-NEXT:  ; %bb.4:
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:  BB17_5:
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: sshl.sat.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld bc, (ix + 6)
; EZ80-CODE16-NEXT:    call __sshl
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ; kill: def $c killed $c killed $bc
; EZ80-CODE16-NEXT:    call __sshrs
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    ld bc, -32768
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    add hl, bc
; EZ80-CODE16-NEXT:    or a, a
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    jr c, BB17_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld bc, 32767
; EZ80-CODE16-NEXT:    jr BB17_3
; EZ80-CODE16-NEXT:  BB17_2:
; EZ80-CODE16-NEXT:    ld bc, -32768
; EZ80-CODE16-NEXT:  BB17_3:
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    or a, a
; EZ80-CODE16-NEXT:    sbc hl, de
; EZ80-CODE16-NEXT:    jr nz, BB17_5
; EZ80-CODE16-NEXT:  ; %bb.4:
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:  BB17_5:
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: sshl.sat.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld bc, (ix + 9)
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    call __sshl
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld iyl, e
; EZ80-NEXT:    ld iyh, d
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ; kill: def $c killed $c killed $ubc
; EZ80-NEXT:    call __sshrs
; EZ80-NEXT:    ld e, l
; EZ80-NEXT:    ld d, h
; EZ80-NEXT:    ld.sis bc, -32768
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    add.sis hl, bc
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, bc
; EZ80-NEXT:    jr c, BB17_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld.sis bc, 32767
; EZ80-NEXT:    jr BB17_3
; EZ80-NEXT:  BB17_2:
; EZ80-NEXT:    ld.sis bc, -32768
; EZ80-NEXT:  BB17_3:
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:    jr nz, BB17_5
; EZ80-NEXT:  ; %bb.4:
; EZ80-NEXT:    ld c, iyl
; EZ80-NEXT:    ld b, iyh
; EZ80-NEXT:  BB17_5:
; EZ80-NEXT:    ld l, c
; EZ80-NEXT:    ld h, b
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i16 @llvm.sshl.sat.i16(i16 %0, i16 %1)
  ret i16 %3
}
declare i32 @llvm.sshl.sat.i32(i32, i32)
define i32 @sshl.sat.i32(i32, i32) {
; Z80-LABEL: sshl.sat.i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -8
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld c, (ix + 4)
; Z80-NEXT:    ld b, (ix + 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld a, l
; Z80-NEXT:    call __lshl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld (ix - 8), c
; Z80-NEXT:    ld (ix - 7), b
; Z80-NEXT:    ld (ix - 6), e
; Z80-NEXT:    ld (ix - 5), d
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld a, l
; Z80-NEXT:    call __lshrs
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    call __lcmpzero
; Z80-NEXT:    jp m, BB18_3
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr z, BB18_4
; Z80-NEXT:  BB18_2:
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    jr BB18_5
; Z80-NEXT:  BB18_3:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB18_2
; Z80-NEXT:  BB18_4:
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:  BB18_5:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    jr nz, BB18_7
; Z80-NEXT:  ; %bb.6:
; Z80-NEXT:    ld hl, 32767
; Z80-NEXT:    jr BB18_8
; Z80-NEXT:  BB18_7:
; Z80-NEXT:    ld hl, -32768
; Z80-NEXT:  BB18_8:
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    call __lcmpu
; Z80-NEXT:    jr nz, BB18_10
; Z80-NEXT:  ; %bb.9:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    jr BB18_11
; Z80-NEXT:  BB18_10:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:  BB18_11:
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    jr nz, BB18_13
; Z80-NEXT:  ; %bb.12:
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:  BB18_13:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB18_15
; Z80-NEXT:  ; %bb.14:
; Z80-NEXT:    ld e, (ix - 6)
; Z80-NEXT:    ld d, (ix - 5)
; Z80-NEXT:  BB18_15:
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: sshl.sat.i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 8
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld bc, (ix + 4)
; EZ80-CODE16-NEXT:    ld iy, (ix + 6)
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    call __lshl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld (ix - 8), bc
; EZ80-CODE16-NEXT:    ld (ix - 6), de
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    call __lshrs
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    call __lcmpzero
; EZ80-CODE16-NEXT:    jp m, BB18_3
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr z, BB18_4
; EZ80-CODE16-NEXT:  BB18_2:
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    jr BB18_5
; EZ80-CODE16-NEXT:  BB18_3:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB18_2
; EZ80-CODE16-NEXT:  BB18_4:
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:  BB18_5:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    jr nz, BB18_7
; EZ80-CODE16-NEXT:  ; %bb.6:
; EZ80-CODE16-NEXT:    ld hl, 32767
; EZ80-CODE16-NEXT:    jr BB18_8
; EZ80-CODE16-NEXT:  BB18_7:
; EZ80-CODE16-NEXT:    ld hl, -32768
; EZ80-CODE16-NEXT:  BB18_8:
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    call __lcmpu
; EZ80-CODE16-NEXT:    jr nz, BB18_10
; EZ80-CODE16-NEXT:  ; %bb.9:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    jr BB18_11
; EZ80-CODE16-NEXT:  BB18_10:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:  BB18_11:
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    jr nz, BB18_13
; EZ80-CODE16-NEXT:  ; %bb.12:
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:  BB18_13:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB18_15
; EZ80-CODE16-NEXT:  ; %bb.14:
; EZ80-CODE16-NEXT:    ld de, (ix - 6)
; EZ80-CODE16-NEXT:  BB18_15:
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: sshl.sat.i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 4
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld iy, (ix + 6)
; EZ80-NEXT:    ld e, (ix + 9)
; EZ80-NEXT:    ld hl, (ix + 12)
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    call __lshl
; EZ80-NEXT:    ld (ix - 4), bc
; EZ80-NEXT:    ld (ix - 1), a ; 1-byte Folded Spill
; EZ80-NEXT:    ; kill: def $l killed $l killed $uhl
; EZ80-NEXT:    call __lshrs
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    call __lcmpzero
; EZ80-NEXT:    jp m, BB18_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld l, 0
; EZ80-NEXT:    jr BB18_3
; EZ80-NEXT:  BB18_2:
; EZ80-NEXT:    ld l, 1
; EZ80-NEXT:  BB18_3:
; EZ80-NEXT:    bit 0, l
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    jr nz, BB18_5
; EZ80-NEXT:  ; %bb.4:
; EZ80-NEXT:    ld iy, -1
; EZ80-NEXT:  BB18_5:
; EZ80-NEXT:    bit 0, l
; EZ80-NEXT:    jr nz, BB18_7
; EZ80-NEXT:  ; %bb.6:
; EZ80-NEXT:    ld d, 127
; EZ80-NEXT:    jr BB18_8
; EZ80-NEXT:  BB18_7:
; EZ80-NEXT:    ld d, -128
; EZ80-NEXT:  BB18_8:
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    call __lcmpu
; EZ80-NEXT:    jr nz, BB18_10
; EZ80-NEXT:  ; %bb.9:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr z, BB18_11
; EZ80-NEXT:    jr BB18_12
; EZ80-NEXT:  BB18_10:
; EZ80-NEXT:    ld a, 1
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB18_12
; EZ80-NEXT:  BB18_11:
; EZ80-NEXT:    ld iy, (ix - 4)
; EZ80-NEXT:  BB18_12:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB18_14
; EZ80-NEXT:  ; %bb.13:
; EZ80-NEXT:    ld d, (ix - 1) ; 1-byte Folded Reload
; EZ80-NEXT:  BB18_14:
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld e, d
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i32 @llvm.sshl.sat.i32(i32 %0, i32 %1)
  ret i32 %3
}
declare i64 @llvm.sshl.sat.i64(i64, i64)
define i64 @sshl.sat.i64(i64, i64) {
; Z80-LABEL: sshl.sat.i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -22
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 18), l
; Z80-NEXT:    ld (ix - 17), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld (ix - 22), e
; Z80-NEXT:    ld (ix - 21), d
; Z80-NEXT:    ld (ix - 20), c
; Z80-NEXT:    ld (ix - 19), b
; Z80-NEXT:    call __llshrs
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:    ld (ix - 12), e
; Z80-NEXT:    ld (ix - 11), d
; Z80-NEXT:    ld (ix - 14), c
; Z80-NEXT:    ld (ix - 13), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 16), l
; Z80-NEXT:    ld (ix - 15), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    call __llcmpzero
; Z80-NEXT:    pop hl
; Z80-NEXT:    jp m, BB19_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    jr BB19_3
; Z80-NEXT:  BB19_2:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:  BB19_3:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    jr nz, BB19_5
; Z80-NEXT:  ; %bb.4:
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:  BB19_5:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    jr nz, BB19_7
; Z80-NEXT:  ; %bb.6:
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:  BB19_7:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB19_9
; Z80-NEXT:  ; %bb.8:
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:  BB19_9:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld (ix - 6), e
; Z80-NEXT:    ld (ix - 5), d
; Z80-NEXT:    ld (ix - 8), c
; Z80-NEXT:    ld (ix - 7), b
; Z80-NEXT:    jr nz, BB19_11
; Z80-NEXT:  ; %bb.10:
; Z80-NEXT:    ld hl, 32767
; Z80-NEXT:    jr BB19_12
; Z80-NEXT:  BB19_11:
; Z80-NEXT:    ld hl, -32768
; Z80-NEXT:  BB19_12:
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld l, (ix - 16)
; Z80-NEXT:    ld h, (ix - 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 14)
; Z80-NEXT:    ld h, (ix - 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 12)
; Z80-NEXT:    ld h, (ix - 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    call __llcmpu
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    jr nz, BB19_14
; Z80-NEXT:  ; %bb.13:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    jr BB19_15
; Z80-NEXT:  BB19_14:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:  BB19_15:
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    ld e, (ix - 8)
; Z80-NEXT:    ld d, (ix - 7)
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB19_21
; Z80-NEXT:  ; %bb.16:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB19_22
; Z80-NEXT:  BB19_17:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB19_23
; Z80-NEXT:  BB19_18:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB19_20
; Z80-NEXT:  BB19_19:
; Z80-NEXT:    ld c, (ix - 18)
; Z80-NEXT:    ld b, (ix - 17)
; Z80-NEXT:    ld (ix - 4), c
; Z80-NEXT:    ld (ix - 3), b
; Z80-NEXT:  BB19_20:
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:  BB19_21:
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp nz, BB19_17
; Z80-NEXT:  BB19_22:
; Z80-NEXT:    ld e, (ix - 22)
; Z80-NEXT:    ld d, (ix - 21)
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp nz, BB19_18
; Z80-NEXT:  BB19_23:
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 20)
; Z80-NEXT:    ld h, (ix - 19)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB19_19
; Z80-NEXT:    jp BB19_20
;
; EZ80-CODE16-LABEL: sshl.sat.i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 22
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    ld iy, (ix + 10)
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld (ix - 18), iy
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld (ix - 22), de
; EZ80-CODE16-NEXT:    ld (ix - 20), bc
; EZ80-CODE16-NEXT:    call __llshrs
; EZ80-CODE16-NEXT:    ld (ix - 10), hl
; EZ80-CODE16-NEXT:    ld (ix - 12), de
; EZ80-CODE16-NEXT:    ld (ix - 14), bc
; EZ80-CODE16-NEXT:    ld (ix - 16), iy
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    call __llcmpzero
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    jp m, BB19_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    jr BB19_3
; EZ80-CODE16-NEXT:  BB19_2:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:  BB19_3:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    jr nz, BB19_5
; EZ80-CODE16-NEXT:  ; %bb.4:
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:  BB19_5:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    jr nz, BB19_7
; EZ80-CODE16-NEXT:  ; %bb.6:
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:  BB19_7:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB19_9
; EZ80-CODE16-NEXT:  ; %bb.8:
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:  BB19_9:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld (ix - 6), de
; EZ80-CODE16-NEXT:    ld (ix - 8), bc
; EZ80-CODE16-NEXT:    jr nz, BB19_11
; EZ80-CODE16-NEXT:  ; %bb.10:
; EZ80-CODE16-NEXT:    ld hl, 32767
; EZ80-CODE16-NEXT:    jr BB19_12
; EZ80-CODE16-NEXT:  BB19_11:
; EZ80-CODE16-NEXT:    ld hl, -32768
; EZ80-CODE16-NEXT:  BB19_12:
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 16)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 14)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    call __llcmpu
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 10), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 10)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    jr nz, BB19_14
; EZ80-CODE16-NEXT:  ; %bb.13:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    jr BB19_15
; EZ80-CODE16-NEXT:  BB19_14:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:  BB19_15:
; EZ80-CODE16-NEXT:    ld hl, (ix - 6)
; EZ80-CODE16-NEXT:    ld de, (ix - 8)
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB19_21
; EZ80-CODE16-NEXT:  ; %bb.16:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB19_22
; EZ80-CODE16-NEXT:  BB19_17:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB19_23
; EZ80-CODE16-NEXT:  BB19_18:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB19_20
; EZ80-CODE16-NEXT:  BB19_19:
; EZ80-CODE16-NEXT:    ld bc, (ix - 18)
; EZ80-CODE16-NEXT:    ld (ix - 4), bc
; EZ80-CODE16-NEXT:  BB19_20:
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    ld iy, (ix - 4)
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
; EZ80-CODE16-NEXT:  BB19_21:
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp nz, BB19_17
; EZ80-CODE16-NEXT:  BB19_22:
; EZ80-CODE16-NEXT:    ld de, (ix - 22)
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp nz, BB19_18
; EZ80-CODE16-NEXT:  BB19_23:
; EZ80-CODE16-NEXT:    ld iy, (ix - 20)
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB19_19
; EZ80-CODE16-NEXT:    jp BB19_20
;
; EZ80-LABEL: sshl.sat.i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 24
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld iy, (ix + 6)
; EZ80-NEXT:    ld bc, (ix + 12)
; EZ80-NEXT:    ld de, (ix + 15)
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld (ix - 24), iy
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld (ix - 21), de
; EZ80-NEXT:    ld (ix - 18), bc
; EZ80-NEXT:    call __llshrs
; EZ80-NEXT:    ld (ix - 6), hl
; EZ80-NEXT:    ld (ix - 9), de
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    ld (ix - 12), bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ld bc, (ix + 12)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llcmpzero
; EZ80-NEXT:    jp m, BB19_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    jr BB19_3
; EZ80-NEXT:  BB19_2:
; EZ80-NEXT:    ld a, 1
; EZ80-NEXT:  BB19_3:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    jr z, BB19_7
; EZ80-NEXT:  ; %bb.4:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr z, BB19_8
; EZ80-NEXT:  BB19_5:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB19_9
; EZ80-NEXT:  BB19_6:
; EZ80-NEXT:    ld.sis hl, 32767
; EZ80-NEXT:    jr BB19_10
; EZ80-NEXT:  BB19_7:
; EZ80-NEXT:    ld iy, -1
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB19_5
; EZ80-NEXT:  BB19_8:
; EZ80-NEXT:    scf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr z, BB19_6
; EZ80-NEXT:  BB19_9:
; EZ80-NEXT:    ld.sis hl, -32768
; EZ80-NEXT:  BB19_10:
; EZ80-NEXT:    ld (ix - 15), hl
; EZ80-NEXT:    ld hl, (ix - 12)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 9)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 6)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ld bc, (ix + 12)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llcmpu
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 6), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 6)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    jr nz, BB19_12
; EZ80-NEXT:  ; %bb.11:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    jr BB19_13
; EZ80-NEXT:  BB19_12:
; EZ80-NEXT:    ld a, 1
; EZ80-NEXT:  BB19_13:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    ld bc, (ix - 15)
; EZ80-NEXT:    jp z, BB19_18
; EZ80-NEXT:  ; %bb.14:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB19_19
; EZ80-NEXT:  BB19_15:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB19_17
; EZ80-NEXT:  BB19_16:
; EZ80-NEXT:    ld bc, (ix - 18)
; EZ80-NEXT:  BB19_17:
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB19_18:
; EZ80-NEXT:    ld iy, (ix - 24)
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB19_15
; EZ80-NEXT:  BB19_19:
; EZ80-NEXT:    ld hl, (ix - 21)
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB19_16
; EZ80-NEXT:    jp BB19_17
  call i64 @llvm.sshl.sat.i64(i64 %0, i64 %1)
  ret i64 %3
}

declare i8 @llvm.ushl.sat.i8(i8, i8)
define i8 @ushl.sat.i8(i8, i8) {
; Z80-LABEL: ushl.sat.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld e, (iy + 2)
; Z80-NEXT:    ld b, (iy + 4)
; Z80-NEXT:    ld a, e
; Z80-NEXT:    call __bshl
; Z80-NEXT:    ld l, a
; Z80-NEXT:    call __bshru
; Z80-NEXT:    ld c, a
; Z80-NEXT:    ld a, e
; Z80-NEXT:    cp a, c
; Z80-NEXT:    jr z, BB20_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld l, -1
; Z80-NEXT:  BB20_2:
; Z80-NEXT:    ld a, l
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: ushl.sat.i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld e, (iy + 2)
; EZ80-CODE16-NEXT:    ld b, (iy + 4)
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    call __bshl
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    call __bshru
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    cp a, c
; EZ80-CODE16-NEXT:    jr z, BB20_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld l, -1
; EZ80-CODE16-NEXT:  BB20_2:
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: ushl.sat.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld e, (iy + 3)
; EZ80-NEXT:    ld b, (iy + 6)
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    call __bshl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    call __bshru
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    cp a, c
; EZ80-NEXT:    jr z, BB20_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld l, -1
; EZ80-NEXT:  BB20_2:
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    ret
  call i8 @llvm.ushl.sat.i8(i8 %0, i8 %1)
  ret i8 %3
}
declare i16 @llvm.ushl.sat.i16(i16, i16)
define i16 @ushl.sat.i16(i16, i16) {
; Z80-LABEL: ushl.sat.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld c, (ix + 6)
; Z80-NEXT:    ld b, (ix + 7)
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    call __sshl
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    ; kill: def $c killed $c killed $bc
; Z80-NEXT:    call __sshru
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    jr z, BB21_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld de, -1
; Z80-NEXT:  BB21_2:
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: ushl.sat.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld iy, (ix + 4)
; EZ80-CODE16-NEXT:    ld bc, (ix + 6)
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    call __sshl
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    ; kill: def $c killed $c killed $bc
; EZ80-CODE16-NEXT:    call __sshru
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    or a, a
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    jr z, BB21_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld de, -1
; EZ80-CODE16-NEXT:  BB21_2:
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: ushl.sat.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld iy, (ix + 6)
; EZ80-NEXT:    ld bc, (ix + 9)
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld d, iyh
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    call __sshl
; EZ80-NEXT:    ld e, l
; EZ80-NEXT:    ld d, h
; EZ80-NEXT:    ; kill: def $c killed $c killed $ubc
; EZ80-NEXT:    call __sshru
; EZ80-NEXT:    ld c, l
; EZ80-NEXT:    ld b, h
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld d, iyh
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, bc
; EZ80-NEXT:    jr z, BB21_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld.sis de, -1
; EZ80-NEXT:  BB21_2:
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i16 @llvm.ushl.sat.i16(i16 %0, i16 %1)
  ret i16 %3
}
declare i32 @llvm.ushl.sat.i32(i32, i32)
define i32 @ushl.sat.i32(i32, i32) {
; Z80-LABEL: ushl.sat.i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld c, (ix + 4)
; Z80-NEXT:    ld b, (ix + 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld a, l
; Z80-NEXT:    call __lshl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld (ix - 4), c
; Z80-NEXT:    ld (ix - 3), b
; Z80-NEXT:    ld (ix - 2), e
; Z80-NEXT:    ld (ix - 1), d
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld a, l
; Z80-NEXT:    call __lshru
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    call __lcmpu
; Z80-NEXT:    jr nz, BB22_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    jr BB22_3
; Z80-NEXT:  BB22_2:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:  BB22_3:
; Z80-NEXT:    ld de, -1
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld l, e
; Z80-NEXT:    ld h, d
; Z80-NEXT:    jr nz, BB22_5
; Z80-NEXT:  ; %bb.4:
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:  BB22_5:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB22_7
; Z80-NEXT:  ; %bb.6:
; Z80-NEXT:    ld e, (ix - 2)
; Z80-NEXT:    ld d, (ix - 1)
; Z80-NEXT:  BB22_7:
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: ushl.sat.i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 4
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld bc, (ix + 4)
; EZ80-CODE16-NEXT:    ld iy, (ix + 6)
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    call __lshl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld (ix - 4), bc
; EZ80-CODE16-NEXT:    ld (ix - 2), de
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    call __lshru
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    call __lcmpu
; EZ80-CODE16-NEXT:    jr nz, BB22_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    jr BB22_3
; EZ80-CODE16-NEXT:  BB22_2:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:  BB22_3:
; EZ80-CODE16-NEXT:    ld de, -1
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld l, e
; EZ80-CODE16-NEXT:    ld h, d
; EZ80-CODE16-NEXT:    jr nz, BB22_5
; EZ80-CODE16-NEXT:  ; %bb.4:
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:  BB22_5:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB22_7
; EZ80-CODE16-NEXT:  ; %bb.6:
; EZ80-CODE16-NEXT:    ld de, (ix - 2)
; EZ80-CODE16-NEXT:  BB22_7:
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: ushl.sat.i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, (ix + 6)
; EZ80-NEXT:    ld e, (ix + 9)
; EZ80-NEXT:    ld hl, (ix + 12)
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    call __lshl
; EZ80-NEXT:    ld d, a
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ; kill: def $l killed $l killed $uhl
; EZ80-NEXT:    call __lshru
; EZ80-NEXT:    ld iy, -1
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    call __lcmpu
; EZ80-NEXT:    jr nz, BB22_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr z, BB22_3
; EZ80-NEXT:    jr BB22_4
; EZ80-NEXT:  BB22_2:
; EZ80-NEXT:    ld a, 1
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB22_4
; EZ80-NEXT:  BB22_3:
; EZ80-NEXT:    ld iy, (ix - 3)
; EZ80-NEXT:  BB22_4:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr z, BB22_6
; EZ80-NEXT:  ; %bb.5:
; EZ80-NEXT:    ld d, -1
; EZ80-NEXT:  BB22_6:
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld e, d
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i32 @llvm.ushl.sat.i32(i32 %0, i32 %1)
  ret i32 %3
}
declare i64 @llvm.ushl.sat.i64(i64, i64)
define i64 @ushl.sat.i64(i64, i64) {
; Z80-LABEL: ushl.sat.i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 6), l
; Z80-NEXT:    ld (ix - 5), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld (ix - 10), e
; Z80-NEXT:    ld (ix - 9), d
; Z80-NEXT:    ld (ix - 8), c
; Z80-NEXT:    ld (ix - 7), b
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    call __llcmpu
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    jr nz, BB23_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    jr BB23_3
; Z80-NEXT:  BB23_2:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:  BB23_3:
; Z80-NEXT:    ld iy, -1
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    jr nz, BB23_5
; Z80-NEXT:  ; %bb.4:
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:  BB23_5:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    jr nz, BB23_7
; Z80-NEXT:  ; %bb.6:
; Z80-NEXT:    ld e, (ix - 10)
; Z80-NEXT:    ld d, (ix - 9)
; Z80-NEXT:  BB23_7:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    jr nz, BB23_9
; Z80-NEXT:  ; %bb.8:
; Z80-NEXT:    ld c, (ix - 8)
; Z80-NEXT:    ld b, (ix - 7)
; Z80-NEXT:  BB23_9:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB23_11
; Z80-NEXT:  ; %bb.10:
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:  BB23_11:
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: ushl.sat.i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 10
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    ld iy, (ix + 10)
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld (ix - 6), iy
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld (ix - 10), de
; EZ80-CODE16-NEXT:    ld (ix - 8), bc
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    call __llcmpu
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 4), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 4)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    jr nz, BB23_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    jr BB23_3
; EZ80-CODE16-NEXT:  BB23_2:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:  BB23_3:
; EZ80-CODE16-NEXT:    ld iy, -1
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    jr nz, BB23_5
; EZ80-CODE16-NEXT:  ; %bb.4:
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:  BB23_5:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    jr nz, BB23_7
; EZ80-CODE16-NEXT:  ; %bb.6:
; EZ80-CODE16-NEXT:    ld de, (ix - 10)
; EZ80-CODE16-NEXT:  BB23_7:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    jr nz, BB23_9
; EZ80-CODE16-NEXT:  ; %bb.8:
; EZ80-CODE16-NEXT:    ld bc, (ix - 8)
; EZ80-CODE16-NEXT:  BB23_9:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB23_11
; EZ80-CODE16-NEXT:  ; %bb.10:
; EZ80-CODE16-NEXT:    ld iy, (ix - 6)
; EZ80-CODE16-NEXT:  BB23_11:
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: ushl.sat.i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 10
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ld bc, (ix + 12)
; EZ80-NEXT:    ld iy, (ix + 15)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld (ix - 10), iy
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld (ix - 7), de
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld iy, -1
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ld bc, (ix + 12)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llcmpu
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 4), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 4)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    jr nz, BB23_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    jr BB23_3
; EZ80-NEXT:  BB23_2:
; EZ80-NEXT:    ld a, 1
; EZ80-NEXT:  BB23_3:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    jp z, BB23_8
; EZ80-NEXT:  ; %bb.4:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB23_9
; EZ80-NEXT:  BB23_5:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr z, BB23_7
; EZ80-NEXT:  BB23_6:
; EZ80-NEXT:    ld.sis bc, -1
; EZ80-NEXT:  BB23_7:
; EZ80-NEXT:    lea de, iy
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB23_8:
; EZ80-NEXT:    ld hl, (ix - 10)
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB23_5
; EZ80-NEXT:  BB23_9:
; EZ80-NEXT:    ld iy, (ix - 7)
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB23_6
; EZ80-NEXT:    jp BB23_7
  call i64 @llvm.ushl.sat.i64(i64 %0, i64 %1)
  ret i64 %3
}

declare i8 @llvm.smul.sat.i8(i8, i8)
define i8 @smul.sat.i8(i8, i8) {
; Z80-LABEL: smul.sat.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld a, (iy + 2)
; Z80-NEXT:    ld l, (iy + 4)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, a
; Z80-NEXT:    push hl
; Z80-NEXT:    call _llvm.smul.sat.i8
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: smul.sat.i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld a, (iy + 2)
; EZ80-CODE16-NEXT:    ld l, (iy + 4)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    call _llvm.smul.sat.i8
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: smul.sat.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld a, (iy + 3)
; EZ80-NEXT:    ld l, (iy + 6)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    push hl
; EZ80-NEXT:    call _llvm.smul.sat.i8
; EZ80-NEXT:    ld hl, 6
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ret
  call i8 @llvm.smul.sat.i8(i8 %0, i8 %1)
  ret i8 %3
}
declare i16 @llvm.smul.sat.i16(i16, i16)
define i16 @smul.sat.i16(i16, i16) {
; Z80-LABEL: smul.sat.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld d, (iy + 5)
; Z80-NEXT:    push de
; Z80-NEXT:    push hl
; Z80-NEXT:    call _llvm.smul.sat.i16
; Z80-NEXT:    pop iy
; Z80-NEXT:    pop iy
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: smul.sat.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld de, (iy + 4)
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    call _llvm.smul.sat.i16
; EZ80-CODE16-NEXT:    ld iy, 4
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld sp, iy
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: smul.sat.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld de, (iy + 6)
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    call _llvm.smul.sat.i16
; EZ80-NEXT:    ld iy, 6
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ret
  call i16 @llvm.smul.sat.i16(i16 %0, i16 %1)
  ret i16 %3
}
declare i32 @llvm.smul.sat.i32(i32, i32)
define i32 @smul.sat.i32(i32, i32) {
; Z80-LABEL: smul.sat.i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    push iy
; Z80-NEXT:    call _llvm.smul.sat.i32
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: smul.sat.i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld iy, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    call _llvm.smul.sat.i32
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: smul.sat.i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld a, (iy + 6)
; EZ80-NEXT:    ld de, (iy + 9)
; EZ80-NEXT:    ld c, (iy + 12)
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    call _llvm.smul.sat.i32
; EZ80-NEXT:    ld iy, 12
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ret
  call i32 @llvm.smul.sat.i32(i32 %0, i32 %1)
  ret i32 %3
}
declare i64 @llvm.smul.sat.i64(i64, i64)
define i64 @smul.sat.i64(i64, i64) {
; Z80-LABEL: smul.sat.i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld c, (ix + 14)
; Z80-NEXT:    ld b, (ix + 15)
; Z80-NEXT:    ld e, (ix + 16)
; Z80-NEXT:    ld d, (ix + 17)
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    push bc
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    call _llvm.smul.sat.i64
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld hl, 16
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: smul.sat.i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld iy, (ix + 12)
; EZ80-CODE16-NEXT:    ld bc, (ix + 14)
; EZ80-CODE16-NEXT:    ld de, (ix + 16)
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    call _llvm.smul.sat.i64
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 16
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: smul.sat.i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld iy, (ix + 12)
; EZ80-NEXT:    ld bc, (ix + 15)
; EZ80-NEXT:    ld de, (ix + 18)
; EZ80-NEXT:    ld hl, (ix + 21)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    call _llvm.smul.sat.i64
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i64 @llvm.smul.sat.i64(i64 %0, i64 %1)
  ret i64 %3
}

declare i8 @llvm.umul.sat.i8(i8, i8)
define i8 @umul.sat.i8(i8, i8) {
; Z80-LABEL: umul.sat.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld a, (iy + 2)
; Z80-NEXT:    ld l, (iy + 4)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, a
; Z80-NEXT:    push hl
; Z80-NEXT:    call _llvm.umul.sat.i8
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: umul.sat.i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld a, (iy + 2)
; EZ80-CODE16-NEXT:    ld l, (iy + 4)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    call _llvm.umul.sat.i8
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: umul.sat.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld a, (iy + 3)
; EZ80-NEXT:    ld l, (iy + 6)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    push hl
; EZ80-NEXT:    call _llvm.umul.sat.i8
; EZ80-NEXT:    ld hl, 6
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ret
  call i8 @llvm.umul.sat.i8(i8 %0, i8 %1)
  ret i8 %3
}
declare i16 @llvm.umul.sat.i16(i16, i16)
define i16 @umul.sat.i16(i16, i16) {
; Z80-LABEL: umul.sat.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld d, (iy + 5)
; Z80-NEXT:    push de
; Z80-NEXT:    push hl
; Z80-NEXT:    call _llvm.umul.sat.i16
; Z80-NEXT:    pop iy
; Z80-NEXT:    pop iy
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: umul.sat.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld de, (iy + 4)
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    call _llvm.umul.sat.i16
; EZ80-CODE16-NEXT:    ld iy, 4
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld sp, iy
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: umul.sat.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld de, (iy + 6)
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    call _llvm.umul.sat.i16
; EZ80-NEXT:    ld iy, 6
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ret
  call i16 @llvm.umul.sat.i16(i16 %0, i16 %1)
  ret i16 %3
}
declare i32 @llvm.umul.sat.i32(i32, i32)
define i32 @umul.sat.i32(i32, i32) {
; Z80-LABEL: umul.sat.i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    push iy
; Z80-NEXT:    call _llvm.umul.sat.i32
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: umul.sat.i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld iy, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    call _llvm.umul.sat.i32
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: umul.sat.i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld a, (iy + 6)
; EZ80-NEXT:    ld de, (iy + 9)
; EZ80-NEXT:    ld c, (iy + 12)
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    call _llvm.umul.sat.i32
; EZ80-NEXT:    ld iy, 12
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ret
  call i32 @llvm.umul.sat.i32(i32 %0, i32 %1)
  ret i32 %3
}
declare i64 @llvm.umul.sat.i64(i64, i64)
define i64 @umul.sat.i64(i64, i64) {
; Z80-LABEL: umul.sat.i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld c, (ix + 14)
; Z80-NEXT:    ld b, (ix + 15)
; Z80-NEXT:    ld e, (ix + 16)
; Z80-NEXT:    ld d, (ix + 17)
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    push bc
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    call _llvm.umul.sat.i64
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld hl, 16
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: umul.sat.i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld iy, (ix + 12)
; EZ80-CODE16-NEXT:    ld bc, (ix + 14)
; EZ80-CODE16-NEXT:    ld de, (ix + 16)
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    call _llvm.umul.sat.i64
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 16
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: umul.sat.i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld iy, (ix + 12)
; EZ80-NEXT:    ld bc, (ix + 15)
; EZ80-NEXT:    ld de, (ix + 18)
; EZ80-NEXT:    ld hl, (ix + 21)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    call _llvm.umul.sat.i64
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i64 @llvm.umul.sat.i64(i64 %0, i64 %1)
  ret i64 %3
}

declare i8 @llvm.smul.fix.sat.i8(i8, i8, i32 immarg)
define i8 @smul.fix.sat.i8.7(i8, i8) {
; Z80-LABEL: smul.fix.sat.i8.7:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld c, (iy + 2)
; Z80-NEXT:    ld d, (iy + 4)
; Z80-NEXT:    ld e, 7
; Z80-NEXT:    ld a, c
; Z80-NEXT:    rlc a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld h, a
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld a, d
; Z80-NEXT:    rlc a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld b, a
; Z80-NEXT:    ld c, d
; Z80-NEXT:    call __smulu
; Z80-NEXT:    ld c, e
; Z80-NEXT:    call __sshrs
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    ld bc, -32768
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld bc, 32641
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    jr nc, BB32_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld de, -128
; Z80-NEXT:  BB32_2:
; Z80-NEXT:    ld l, e
; Z80-NEXT:    ld h, d
; Z80-NEXT:    ld bc, -32768
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld bc, -32641
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    jr c, BB32_4
; Z80-NEXT:  ; %bb.3:
; Z80-NEXT:    ld de, 127
; Z80-NEXT:  BB32_4:
; Z80-NEXT:    ld a, e
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: smul.fix.sat.i8.7:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld c, (iy + 2)
; EZ80-CODE16-NEXT:    ld d, (iy + 4)
; EZ80-CODE16-NEXT:    ld e, 7
; EZ80-CODE16-NEXT:    ld a, c
; EZ80-CODE16-NEXT:    rlc a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld h, a
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld a, d
; EZ80-CODE16-NEXT:    rlc a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld b, a
; EZ80-CODE16-NEXT:    ld c, d
; EZ80-CODE16-NEXT:    call __smulu
; EZ80-CODE16-NEXT:    ld c, e
; EZ80-CODE16-NEXT:    call __sshrs
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    ld bc, -32768
; EZ80-CODE16-NEXT:    add hl, bc
; EZ80-CODE16-NEXT:    ld bc, 32641
; EZ80-CODE16-NEXT:    or a, a
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    jr nc, BB32_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld de, -128
; EZ80-CODE16-NEXT:  BB32_2:
; EZ80-CODE16-NEXT:    ld l, e
; EZ80-CODE16-NEXT:    ld h, d
; EZ80-CODE16-NEXT:    ld bc, -32768
; EZ80-CODE16-NEXT:    add hl, bc
; EZ80-CODE16-NEXT:    ld bc, -32641
; EZ80-CODE16-NEXT:    or a, a
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    jr c, BB32_4
; EZ80-CODE16-NEXT:  ; %bb.3:
; EZ80-CODE16-NEXT:    ld de, 127
; EZ80-CODE16-NEXT:  BB32_4:
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: smul.fix.sat.i8.7:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld c, (iy + 3)
; EZ80-NEXT:    ld d, (iy + 6)
; EZ80-NEXT:    ld e, 7
; EZ80-NEXT:    ld a, c
; EZ80-NEXT:    rlc a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ld h, a
; EZ80-NEXT:    ld l, c
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    rlc a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ld b, a
; EZ80-NEXT:    ld c, d
; EZ80-NEXT:    call __smulu
; EZ80-NEXT:    ld c, e
; EZ80-NEXT:    call __sshrs
; EZ80-NEXT:    ld e, l
; EZ80-NEXT:    ld d, h
; EZ80-NEXT:    ld.sis bc, -32768
; EZ80-NEXT:    add.sis hl, bc
; EZ80-NEXT:    ld.sis bc, 32641
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, bc
; EZ80-NEXT:    jr nc, BB32_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld.sis de, -128
; EZ80-NEXT:  BB32_2:
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:    ld.sis bc, -32768
; EZ80-NEXT:    add.sis hl, bc
; EZ80-NEXT:    ld.sis bc, -32641
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, bc
; EZ80-NEXT:    jr c, BB32_4
; EZ80-NEXT:  ; %bb.3:
; EZ80-NEXT:    ld.sis de, 127
; EZ80-NEXT:  BB32_4:
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ret
  call i8 @llvm.smul.fix.sat.i8(i8 %0, i8 %1, i32 7)
  ret i8 %3
}
declare i16 @llvm.smul.fix.sat.i16(i16, i16, i32 immarg)
define i16 @smul.fix.sat.i16.7(i16, i16) {
; Z80-LABEL: smul.fix.sat.i16.7:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    ld c, (ix + 4)
; Z80-NEXT:    ld b, (ix + 5)
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    ld iyl, c
; Z80-NEXT:    ld iyh, b
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    ld c, (ix + 6)
; Z80-NEXT:    ld b, (ix + 7)
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld a, 7
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    call __lshrs
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ld hl, -32768
; Z80-NEXT:    ld de, -1
; Z80-NEXT:    ld (ix - 2), c
; Z80-NEXT:    ld (ix - 1), b
; Z80-NEXT:    call __lcmps
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    jp m, BB33_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr z, BB33_3
; Z80-NEXT:    jr BB33_4
; Z80-NEXT:  BB33_2:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB33_4
; Z80-NEXT:  BB33_3:
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:  BB33_4:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB33_6
; Z80-NEXT:  ; %bb.5:
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:  BB33_6:
; Z80-NEXT:    ld bc, 32767
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __lcmps
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    jp m, BB33_8
; Z80-NEXT:  ; %bb.7:
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:  BB33_8:
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: smul.fix.sat.i16.7:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld bc, (ix + 4)
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    ld iyl, c
; EZ80-CODE16-NEXT:    ld iyh, b
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    ld iy, (ix + 6)
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    ld bc, (ix + 6)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld a, 7
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    call __lshrs
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ld hl, -32768
; EZ80-CODE16-NEXT:    ld de, -1
; EZ80-CODE16-NEXT:    ld (ix - 2), bc
; EZ80-CODE16-NEXT:    call __lcmps
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    jp m, BB33_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr z, BB33_3
; EZ80-CODE16-NEXT:    jr BB33_4
; EZ80-CODE16-NEXT:  BB33_2:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB33_4
; EZ80-CODE16-NEXT:  BB33_3:
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:  BB33_4:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB33_6
; EZ80-CODE16-NEXT:  ; %bb.5:
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:  BB33_6:
; EZ80-CODE16-NEXT:    ld bc, 32767
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __lcmps
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    jp m, BB33_8
; EZ80-CODE16-NEXT:  ; %bb.7:
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:  BB33_8:
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: smul.fix.sat.i16.7:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, (ix + 6)
; EZ80-NEXT:    ld a, b
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld d, a
; EZ80-NEXT:    ld e, c
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    ld iy, (ix + 9)
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld b, a
; EZ80-NEXT:    ld c, iyl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ; kill: def $e killed $e killed $ude
; EZ80-NEXT:    ld a, iyl
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld d, 0
; EZ80-NEXT:    ld l, 7
; EZ80-NEXT:    call __lshrs
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld hl, -32768
; EZ80-NEXT:    ld e, -1
; EZ80-NEXT:    call __lcmps
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    jp m, BB33_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld c, 0
; EZ80-NEXT:    bit 0, c
; EZ80-NEXT:    jr z, BB33_3
; EZ80-NEXT:    jr BB33_4
; EZ80-NEXT:  BB33_2:
; EZ80-NEXT:    ld c, 1
; EZ80-NEXT:    bit 0, c
; EZ80-NEXT:    jr nz, BB33_4
; EZ80-NEXT:  BB33_3:
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:  BB33_4:
; EZ80-NEXT:    bit 0, c
; EZ80-NEXT:    jr nz, BB33_6
; EZ80-NEXT:  ; %bb.5:
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:  BB33_6:
; EZ80-NEXT:    ld bc, 32767
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __lcmps
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    jp m, BB33_8
; EZ80-NEXT:  ; %bb.7:
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:  BB33_8:
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld d, iyh
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i16 @llvm.smul.fix.sat.i16(i16 %0, i16 %1, i32 7)
  ret i16 %3
}
define i16 @smul.fix.sat.i16.15(i16, i16) {
; Z80-LABEL: smul.fix.sat.i16.15:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    ld c, (ix + 4)
; Z80-NEXT:    ld b, (ix + 5)
; Z80-NEXT:    ld a, 15
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    ld iyl, c
; Z80-NEXT:    ld iyh, b
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    ld c, (ix + 6)
; Z80-NEXT:    ld b, (ix + 7)
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    call __lshrs
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ld hl, -32768
; Z80-NEXT:    ld de, -1
; Z80-NEXT:    ld (ix - 2), c
; Z80-NEXT:    ld (ix - 1), b
; Z80-NEXT:    call __lcmps
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    jp m, BB34_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr z, BB34_3
; Z80-NEXT:    jr BB34_4
; Z80-NEXT:  BB34_2:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB34_4
; Z80-NEXT:  BB34_3:
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:  BB34_4:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB34_6
; Z80-NEXT:  ; %bb.5:
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:  BB34_6:
; Z80-NEXT:    ld bc, 32767
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __lcmps
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    jp m, BB34_8
; Z80-NEXT:  ; %bb.7:
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:  BB34_8:
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: smul.fix.sat.i16.15:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld bc, (ix + 4)
; EZ80-CODE16-NEXT:    ld a, 15
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    ld iyl, c
; EZ80-CODE16-NEXT:    ld iyh, b
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    ld iy, (ix + 6)
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    ld bc, (ix + 6)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    call __lshrs
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ld hl, -32768
; EZ80-CODE16-NEXT:    ld de, -1
; EZ80-CODE16-NEXT:    ld (ix - 2), bc
; EZ80-CODE16-NEXT:    call __lcmps
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    jp m, BB34_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr z, BB34_3
; EZ80-CODE16-NEXT:    jr BB34_4
; EZ80-CODE16-NEXT:  BB34_2:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB34_4
; EZ80-CODE16-NEXT:  BB34_3:
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:  BB34_4:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB34_6
; EZ80-CODE16-NEXT:  ; %bb.5:
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:  BB34_6:
; EZ80-CODE16-NEXT:    ld bc, 32767
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __lcmps
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    jp m, BB34_8
; EZ80-CODE16-NEXT:  ; %bb.7:
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:  BB34_8:
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: smul.fix.sat.i16.15:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, (ix + 6)
; EZ80-NEXT:    ld a, b
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld d, a
; EZ80-NEXT:    ld e, c
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    ld iy, (ix + 9)
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld b, a
; EZ80-NEXT:    ld c, iyl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ; kill: def $e killed $e killed $ude
; EZ80-NEXT:    ld a, iyl
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld d, 0
; EZ80-NEXT:    ld l, 15
; EZ80-NEXT:    call __lshrs
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld hl, -32768
; EZ80-NEXT:    ld e, -1
; EZ80-NEXT:    call __lcmps
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    jp m, BB34_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld c, 0
; EZ80-NEXT:    bit 0, c
; EZ80-NEXT:    jr z, BB34_3
; EZ80-NEXT:    jr BB34_4
; EZ80-NEXT:  BB34_2:
; EZ80-NEXT:    ld c, 1
; EZ80-NEXT:    bit 0, c
; EZ80-NEXT:    jr nz, BB34_4
; EZ80-NEXT:  BB34_3:
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:  BB34_4:
; EZ80-NEXT:    bit 0, c
; EZ80-NEXT:    jr nz, BB34_6
; EZ80-NEXT:  ; %bb.5:
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:  BB34_6:
; EZ80-NEXT:    ld bc, 32767
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __lcmps
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    jp m, BB34_8
; EZ80-NEXT:  ; %bb.7:
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:  BB34_8:
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld d, iyh
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i16 @llvm.smul.fix.sat.i16(i16 %0, i16 %1, i32 15)
  ret i16 %3
}
declare i32 @llvm.smul.fix.sat.i32(i32, i32, i32 immarg)
define i32 @smul.fix.sat.i32.15(i32, i32) {
; Z80-LABEL: smul.fix.sat.i32.15:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -9
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld l, e
; Z80-NEXT:    ld h, d
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 15
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    call __llshrs
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld (ix - 6), c
; Z80-NEXT:    ld (ix - 5), b
; Z80-NEXT:    push bc
; Z80-NEXT:    ld (ix - 2), e
; Z80-NEXT:    ld (ix - 1), d
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld bc, -1
; Z80-NEXT:    push bc
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    ld de, -32768
; Z80-NEXT:    call __llcmps
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 9), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 9)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    jp m, BB35_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    jr BB35_3
; Z80-NEXT:  BB35_2:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:  BB35_3:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    ld c, (ix - 6)
; Z80-NEXT:    ld b, (ix - 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    jp z, BB35_10
; Z80-NEXT:  ; %bb.4:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB35_11
; Z80-NEXT:  BB35_5:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB35_12
; Z80-NEXT:  BB35_6:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB35_8
; Z80-NEXT:  BB35_7:
; Z80-NEXT:    ld iy, -1
; Z80-NEXT:  BB35_8:
; Z80-NEXT:    ld de, 32767
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    ld e, (ix - 2)
; Z80-NEXT:    ld d, (ix - 1)
; Z80-NEXT:    call __llcmps
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 6), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld iy, 10
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld sp, iy
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    jp m, BB35_13
; Z80-NEXT:  ; %bb.9:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr z, BB35_14
; Z80-NEXT:    jr BB35_15
; Z80-NEXT:  BB35_10:
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp nz, BB35_5
; Z80-NEXT:  BB35_11:
; Z80-NEXT:    ld de, -32768
; Z80-NEXT:    ld (ix - 2), e
; Z80-NEXT:    ld (ix - 1), d
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp nz, BB35_6
; Z80-NEXT:  BB35_12:
; Z80-NEXT:    ld de, -1
; Z80-NEXT:    ld c, e
; Z80-NEXT:    ld b, d
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB35_7
; Z80-NEXT:    jp BB35_8
; Z80-NEXT:  BB35_13:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB35_15
; Z80-NEXT:  BB35_14:
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:  BB35_15:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB35_17
; Z80-NEXT:  ; %bb.16:
; Z80-NEXT:    ld de, 32767
; Z80-NEXT:    ld (ix - 2), e
; Z80-NEXT:    ld (ix - 1), d
; Z80-NEXT:  BB35_17:
; Z80-NEXT:    ld e, (ix - 2)
; Z80-NEXT:    ld d, (ix - 1)
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: smul.fix.sat.i32.15:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 9
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld iy, (ix + 6)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld l, e
; EZ80-CODE16-NEXT:    ld h, d
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 15
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    call __llshrs
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld (ix - 8), iy
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld (ix - 6), bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld (ix - 2), de
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld bc, -1
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    ld de, -32768
; EZ80-CODE16-NEXT:    call __llcmps
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 9), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 9)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    jp m, BB35_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    jr BB35_3
; EZ80-CODE16-NEXT:  BB35_2:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:  BB35_3:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    ld bc, (ix - 6)
; EZ80-CODE16-NEXT:    ld iy, (ix - 8)
; EZ80-CODE16-NEXT:    jp z, BB35_10
; EZ80-CODE16-NEXT:  ; %bb.4:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB35_11
; EZ80-CODE16-NEXT:  BB35_5:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB35_12
; EZ80-CODE16-NEXT:  BB35_6:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB35_8
; EZ80-CODE16-NEXT:  BB35_7:
; EZ80-CODE16-NEXT:    ld iy, -1
; EZ80-CODE16-NEXT:  BB35_8:
; EZ80-CODE16-NEXT:    ld de, 32767
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    ld de, (ix - 2)
; EZ80-CODE16-NEXT:    call __llcmps
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 6), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld iy, 10
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld sp, iy
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 6)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    jp m, BB35_13
; EZ80-CODE16-NEXT:  ; %bb.9:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr z, BB35_14
; EZ80-CODE16-NEXT:    jr BB35_15
; EZ80-CODE16-NEXT:  BB35_10:
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp nz, BB35_5
; EZ80-CODE16-NEXT:  BB35_11:
; EZ80-CODE16-NEXT:    ld de, -32768
; EZ80-CODE16-NEXT:    ld (ix - 2), de
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp nz, BB35_6
; EZ80-CODE16-NEXT:  BB35_12:
; EZ80-CODE16-NEXT:    ld de, -1
; EZ80-CODE16-NEXT:    ld c, e
; EZ80-CODE16-NEXT:    ld b, d
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB35_7
; EZ80-CODE16-NEXT:    jp BB35_8
; EZ80-CODE16-NEXT:  BB35_13:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB35_15
; EZ80-CODE16-NEXT:  BB35_14:
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:  BB35_15:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB35_17
; EZ80-CODE16-NEXT:  ; %bb.16:
; EZ80-CODE16-NEXT:    ld de, 32767
; EZ80-CODE16-NEXT:    ld (ix - 2), de
; EZ80-CODE16-NEXT:  BB35_17:
; EZ80-CODE16-NEXT:    ld de, (ix - 2)
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: smul.fix.sat.i32.15:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 10
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld e, (ix + 9)
; EZ80-NEXT:    ld a, (ix + 15)
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld c, e
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld hl, (ix + 12)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 15
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshrs
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld (ix - 6), bc
; EZ80-NEXT:    push bc
; EZ80-NEXT:    ld (ix - 9), de
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld (ix - 3), iy
; EZ80-NEXT:    push iy
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld de, -128
; EZ80-NEXT:    ld.sis bc, -1
; EZ80-NEXT:    call __llcmps
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 10), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 10)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    jp m, BB35_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    jr BB35_3
; EZ80-NEXT:  BB35_2:
; EZ80-NEXT:    ld a, 1
; EZ80-NEXT:  BB35_3:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    ld iy, (ix - 9)
; EZ80-NEXT:    jp z, BB35_9
; EZ80-NEXT:  ; %bb.4:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB35_10
; EZ80-NEXT:  BB35_5:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB35_7
; EZ80-NEXT:  BB35_6:
; EZ80-NEXT:    ld.sis hl, -1
; EZ80-NEXT:    ; kill: def $hl killed $hl def $uhl
; EZ80-NEXT:    ld (ix - 6), hl
; EZ80-NEXT:  BB35_7:
; EZ80-NEXT:    ld bc, -1
; EZ80-NEXT:    ld de, 127
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    push bc
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    lea de, iy
; EZ80-NEXT:    ld bc, (ix - 6)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llcmps
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 6), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 6)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    jp m, BB35_11
; EZ80-NEXT:  ; %bb.8:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr z, BB35_12
; EZ80-NEXT:    jr BB35_13
; EZ80-NEXT:  BB35_9:
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB35_5
; EZ80-NEXT:  BB35_10:
; EZ80-NEXT:    ld iy, -128
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB35_6
; EZ80-NEXT:    jp BB35_7
; EZ80-NEXT:  BB35_11:
; EZ80-NEXT:    ld a, 1
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB35_13
; EZ80-NEXT:  BB35_12:
; EZ80-NEXT:    scf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:  BB35_13:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB35_15
; EZ80-NEXT:  ; %bb.14:
; EZ80-NEXT:    ld iy, 127
; EZ80-NEXT:  BB35_15:
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i32 @llvm.smul.fix.sat.i32(i32 %0, i32 %1, i32 15)
  ret i32 %3
}
define i32 @smul.fix.sat.i32.31(i32, i32) {
; Z80-LABEL: smul.fix.sat.i32.31:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -9
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld l, e
; Z80-NEXT:    ld h, d
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 31
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    call __llshrs
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld (ix - 6), c
; Z80-NEXT:    ld (ix - 5), b
; Z80-NEXT:    push bc
; Z80-NEXT:    ld (ix - 2), e
; Z80-NEXT:    ld (ix - 1), d
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld bc, -1
; Z80-NEXT:    push bc
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    ld de, -32768
; Z80-NEXT:    call __llcmps
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 9), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 9)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    jp m, BB36_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    jr BB36_3
; Z80-NEXT:  BB36_2:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:  BB36_3:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    ld c, (ix - 6)
; Z80-NEXT:    ld b, (ix - 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    jp z, BB36_10
; Z80-NEXT:  ; %bb.4:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB36_11
; Z80-NEXT:  BB36_5:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB36_12
; Z80-NEXT:  BB36_6:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB36_8
; Z80-NEXT:  BB36_7:
; Z80-NEXT:    ld iy, -1
; Z80-NEXT:  BB36_8:
; Z80-NEXT:    ld de, 32767
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    ld e, (ix - 2)
; Z80-NEXT:    ld d, (ix - 1)
; Z80-NEXT:    call __llcmps
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 6), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld iy, 10
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld sp, iy
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    jp m, BB36_13
; Z80-NEXT:  ; %bb.9:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr z, BB36_14
; Z80-NEXT:    jr BB36_15
; Z80-NEXT:  BB36_10:
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp nz, BB36_5
; Z80-NEXT:  BB36_11:
; Z80-NEXT:    ld de, -32768
; Z80-NEXT:    ld (ix - 2), e
; Z80-NEXT:    ld (ix - 1), d
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp nz, BB36_6
; Z80-NEXT:  BB36_12:
; Z80-NEXT:    ld de, -1
; Z80-NEXT:    ld c, e
; Z80-NEXT:    ld b, d
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB36_7
; Z80-NEXT:    jp BB36_8
; Z80-NEXT:  BB36_13:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB36_15
; Z80-NEXT:  BB36_14:
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:  BB36_15:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB36_17
; Z80-NEXT:  ; %bb.16:
; Z80-NEXT:    ld de, 32767
; Z80-NEXT:    ld (ix - 2), e
; Z80-NEXT:    ld (ix - 1), d
; Z80-NEXT:  BB36_17:
; Z80-NEXT:    ld e, (ix - 2)
; Z80-NEXT:    ld d, (ix - 1)
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: smul.fix.sat.i32.31:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 9
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld iy, (ix + 6)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld l, e
; EZ80-CODE16-NEXT:    ld h, d
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 31
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    call __llshrs
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld (ix - 8), iy
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld (ix - 6), bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld (ix - 2), de
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld bc, -1
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    ld de, -32768
; EZ80-CODE16-NEXT:    call __llcmps
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 9), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 9)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    jp m, BB36_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    jr BB36_3
; EZ80-CODE16-NEXT:  BB36_2:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:  BB36_3:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    ld bc, (ix - 6)
; EZ80-CODE16-NEXT:    ld iy, (ix - 8)
; EZ80-CODE16-NEXT:    jp z, BB36_10
; EZ80-CODE16-NEXT:  ; %bb.4:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB36_11
; EZ80-CODE16-NEXT:  BB36_5:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB36_12
; EZ80-CODE16-NEXT:  BB36_6:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB36_8
; EZ80-CODE16-NEXT:  BB36_7:
; EZ80-CODE16-NEXT:    ld iy, -1
; EZ80-CODE16-NEXT:  BB36_8:
; EZ80-CODE16-NEXT:    ld de, 32767
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    ld de, (ix - 2)
; EZ80-CODE16-NEXT:    call __llcmps
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 6), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld iy, 10
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld sp, iy
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 6)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    jp m, BB36_13
; EZ80-CODE16-NEXT:  ; %bb.9:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr z, BB36_14
; EZ80-CODE16-NEXT:    jr BB36_15
; EZ80-CODE16-NEXT:  BB36_10:
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp nz, BB36_5
; EZ80-CODE16-NEXT:  BB36_11:
; EZ80-CODE16-NEXT:    ld de, -32768
; EZ80-CODE16-NEXT:    ld (ix - 2), de
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp nz, BB36_6
; EZ80-CODE16-NEXT:  BB36_12:
; EZ80-CODE16-NEXT:    ld de, -1
; EZ80-CODE16-NEXT:    ld c, e
; EZ80-CODE16-NEXT:    ld b, d
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB36_7
; EZ80-CODE16-NEXT:    jp BB36_8
; EZ80-CODE16-NEXT:  BB36_13:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB36_15
; EZ80-CODE16-NEXT:  BB36_14:
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:  BB36_15:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB36_17
; EZ80-CODE16-NEXT:  ; %bb.16:
; EZ80-CODE16-NEXT:    ld de, 32767
; EZ80-CODE16-NEXT:    ld (ix - 2), de
; EZ80-CODE16-NEXT:  BB36_17:
; EZ80-CODE16-NEXT:    ld de, (ix - 2)
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: smul.fix.sat.i32.31:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 10
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld e, (ix + 9)
; EZ80-NEXT:    ld a, (ix + 15)
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld c, e
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld hl, (ix + 12)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 31
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshrs
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld (ix - 6), bc
; EZ80-NEXT:    push bc
; EZ80-NEXT:    ld (ix - 9), de
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld (ix - 3), iy
; EZ80-NEXT:    push iy
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld de, -128
; EZ80-NEXT:    ld.sis bc, -1
; EZ80-NEXT:    call __llcmps
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 10), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 10)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    jp m, BB36_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    jr BB36_3
; EZ80-NEXT:  BB36_2:
; EZ80-NEXT:    ld a, 1
; EZ80-NEXT:  BB36_3:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    ld iy, (ix - 9)
; EZ80-NEXT:    jp z, BB36_9
; EZ80-NEXT:  ; %bb.4:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB36_10
; EZ80-NEXT:  BB36_5:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB36_7
; EZ80-NEXT:  BB36_6:
; EZ80-NEXT:    ld.sis hl, -1
; EZ80-NEXT:    ; kill: def $hl killed $hl def $uhl
; EZ80-NEXT:    ld (ix - 6), hl
; EZ80-NEXT:  BB36_7:
; EZ80-NEXT:    ld bc, -1
; EZ80-NEXT:    ld de, 127
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    push bc
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    lea de, iy
; EZ80-NEXT:    ld bc, (ix - 6)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llcmps
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 6), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 6)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    jp m, BB36_11
; EZ80-NEXT:  ; %bb.8:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr z, BB36_12
; EZ80-NEXT:    jr BB36_13
; EZ80-NEXT:  BB36_9:
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB36_5
; EZ80-NEXT:  BB36_10:
; EZ80-NEXT:    ld iy, -128
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB36_6
; EZ80-NEXT:    jp BB36_7
; EZ80-NEXT:  BB36_11:
; EZ80-NEXT:    ld a, 1
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB36_13
; EZ80-NEXT:  BB36_12:
; EZ80-NEXT:    scf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:  BB36_13:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB36_15
; EZ80-NEXT:  ; %bb.14:
; EZ80-NEXT:    ld iy, 127
; EZ80-NEXT:  BB36_15:
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i32 @llvm.smul.fix.sat.i32(i32 %0, i32 %1, i32 31)
  ret i32 %3
}
declare i64 @llvm.smul.fix.sat.i64(i64, i64, i32 immarg)
define i64 @smul.fix.sat.i64.31(i64, i64) {
; Z80-LABEL: smul.fix.sat.i64.31:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -44
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld a, 31
; Z80-NEXT:    call __lshrs
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    ld (ix - 10), e
; Z80-NEXT:    ld (ix - 9), d
; Z80-NEXT:    ld c, (ix + 16)
; Z80-NEXT:    ld b, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lshrs
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld (ix - 6), e
; Z80-NEXT:    ld (ix - 5), d
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 12)
; Z80-NEXT:    ld b, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 20), l
; Z80-NEXT:    ld (ix - 19), h
; Z80-NEXT:    ld (ix - 22), e
; Z80-NEXT:    ld (ix - 21), d
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    ld c, (ix + 12)
; Z80-NEXT:    ld b, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 12), l
; Z80-NEXT:    ld (ix - 11), h
; Z80-NEXT:    ld (ix - 2), e
; Z80-NEXT:    ld (ix - 1), d
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 16)
; Z80-NEXT:    ld b, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 16), l
; Z80-NEXT:    ld (ix - 15), h
; Z80-NEXT:    ld (ix - 14), e
; Z80-NEXT:    ld (ix - 13), d
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 18), l
; Z80-NEXT:    ld (ix - 17), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ld h, (ix - 17)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 24), l
; Z80-NEXT:    ld (ix - 23), h
; Z80-NEXT:    ld (ix - 18), e
; Z80-NEXT:    ld (ix - 17), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix - 12)
; Z80-NEXT:    ld h, (ix - 11)
; Z80-NEXT:    ld e, (ix - 16)
; Z80-NEXT:    ld d, (ix - 15)
; Z80-NEXT:    add hl, de
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld c, (ix - 14)
; Z80-NEXT:    ld b, (ix - 13)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    inc iy
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, (ix - 24)
; Z80-NEXT:    ld d, (ix - 23)
; Z80-NEXT:    add hl, de
; Z80-NEXT:    ld (ix - 12), l
; Z80-NEXT:    ld (ix - 11), h
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    ld e, (ix - 18)
; Z80-NEXT:    ld d, (ix - 17)
; Z80-NEXT:    adc hl, de
; Z80-NEXT:    ld (ix - 24), l
; Z80-NEXT:    ld (ix - 23), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    inc bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld (ix - 16), l
; Z80-NEXT:    ld (ix - 15), h
; Z80-NEXT:    ld (ix - 14), e
; Z80-NEXT:    ld (ix - 13), d
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    ld e, (ix - 10)
; Z80-NEXT:    ld d, (ix - 9)
; Z80-NEXT:    ld c, (ix + 12)
; Z80-NEXT:    ld b, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld (ix - 18), e
; Z80-NEXT:    ld (ix - 17), d
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    ld c, (ix + 16)
; Z80-NEXT:    ld b, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 30), l
; Z80-NEXT:    ld (ix - 29), h
; Z80-NEXT:    ld (ix - 26), e
; Z80-NEXT:    ld (ix - 25), d
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix - 4)
; Z80-NEXT:    ld b, (ix - 3)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 32), l
; Z80-NEXT:    ld (ix - 31), h
; Z80-NEXT:    ld (ix - 28), e
; Z80-NEXT:    ld (ix - 27), d
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 34), l
; Z80-NEXT:    ld (ix - 33), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 34)
; Z80-NEXT:    ld h, (ix - 33)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 36), l
; Z80-NEXT:    ld (ix - 35), h
; Z80-NEXT:    ld (ix - 34), e
; Z80-NEXT:    ld (ix - 33), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 16)
; Z80-NEXT:    ld h, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 38), l
; Z80-NEXT:    ld (ix - 37), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 38)
; Z80-NEXT:    ld h, (ix - 37)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 40), l
; Z80-NEXT:    ld (ix - 39), h
; Z80-NEXT:    ld (ix - 38), e
; Z80-NEXT:    ld (ix - 37), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld e, (ix - 30)
; Z80-NEXT:    ld d, (ix - 29)
; Z80-NEXT:    add iy, de
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ld h, (ix - 17)
; Z80-NEXT:    ld e, (ix - 26)
; Z80-NEXT:    ld d, (ix - 25)
; Z80-NEXT:    adc hl, de
; Z80-NEXT:    ld (ix - 18), l
; Z80-NEXT:    ld (ix - 17), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    inc de
; Z80-NEXT:    ld c, (ix - 32)
; Z80-NEXT:    ld b, (ix - 31)
; Z80-NEXT:    add iy, bc
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ld h, (ix - 17)
; Z80-NEXT:    ld c, (ix - 28)
; Z80-NEXT:    ld b, (ix - 27)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld (ix - 18), l
; Z80-NEXT:    ld (ix - 17), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    inc bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld c, (ix - 36)
; Z80-NEXT:    ld b, (ix - 35)
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ld h, (ix - 17)
; Z80-NEXT:    ld c, (ix - 34)
; Z80-NEXT:    ld b, (ix - 33)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld (ix - 18), l
; Z80-NEXT:    ld (ix - 17), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    inc bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld c, (ix - 40)
; Z80-NEXT:    ld b, (ix - 39)
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ld h, (ix - 17)
; Z80-NEXT:    ld c, (ix - 38)
; Z80-NEXT:    ld b, (ix - 37)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld (ix - 18), l
; Z80-NEXT:    ld (ix - 17), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    inc bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld c, (ix - 16)
; Z80-NEXT:    ld b, (ix - 15)
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ld h, (ix - 17)
; Z80-NEXT:    ld c, (ix - 14)
; Z80-NEXT:    ld b, (ix - 13)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld (ix - 14), l
; Z80-NEXT:    ld (ix - 13), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    inc bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld (ix - 16), l
; Z80-NEXT:    ld (ix - 15), h
; Z80-NEXT:    ld (ix - 18), e
; Z80-NEXT:    ld (ix - 17), d
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    ld e, (ix - 10)
; Z80-NEXT:    ld d, (ix - 9)
; Z80-NEXT:    ld c, (ix + 12)
; Z80-NEXT:    ld b, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 26), l
; Z80-NEXT:    ld (ix - 25), h
; Z80-NEXT:    ld (ix - 28), e
; Z80-NEXT:    ld (ix - 27), d
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    ld e, (ix - 10)
; Z80-NEXT:    ld d, (ix - 9)
; Z80-NEXT:    ld c, (ix + 16)
; Z80-NEXT:    ld b, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 38), l
; Z80-NEXT:    ld (ix - 37), h
; Z80-NEXT:    ld (ix - 40), e
; Z80-NEXT:    ld (ix - 39), d
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    ld c, (ix - 4)
; Z80-NEXT:    ld b, (ix - 3)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 34), l
; Z80-NEXT:    ld (ix - 33), h
; Z80-NEXT:    ld (ix - 36), e
; Z80-NEXT:    ld (ix - 35), d
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix - 4)
; Z80-NEXT:    ld b, (ix - 3)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 30), l
; Z80-NEXT:    ld (ix - 29), h
; Z80-NEXT:    ld (ix - 32), e
; Z80-NEXT:    ld (ix - 31), d
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    ld e, (ix - 10)
; Z80-NEXT:    ld d, (ix - 9)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    ld (ix - 10), e
; Z80-NEXT:    ld (ix - 9), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 16)
; Z80-NEXT:    ld h, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 42), l
; Z80-NEXT:    ld (ix - 41), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 42)
; Z80-NEXT:    ld h, (ix - 41)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 42), l
; Z80-NEXT:    ld (ix - 41), h
; Z80-NEXT:    ld (ix - 44), e
; Z80-NEXT:    ld (ix - 43), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld (ix - 6), e
; Z80-NEXT:    ld (ix - 5), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix - 26)
; Z80-NEXT:    ld h, (ix - 25)
; Z80-NEXT:    ld e, (ix - 28)
; Z80-NEXT:    ld d, (ix - 27)
; Z80-NEXT:    ld c, (ix - 38)
; Z80-NEXT:    ld b, (ix - 37)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 40)
; Z80-NEXT:    ld h, (ix - 39)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 34)
; Z80-NEXT:    ld b, (ix - 33)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 36)
; Z80-NEXT:    ld h, (ix - 35)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 30)
; Z80-NEXT:    ld b, (ix - 29)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 32)
; Z80-NEXT:    ld h, (ix - 31)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 8)
; Z80-NEXT:    ld b, (ix - 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 42)
; Z80-NEXT:    ld b, (ix - 41)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 44)
; Z80-NEXT:    ld h, (ix - 43)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 4)
; Z80-NEXT:    ld b, (ix - 3)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 16)
; Z80-NEXT:    ld b, (ix - 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ld h, (ix - 17)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld (ix - 16), l
; Z80-NEXT:    ld (ix - 15), h
; Z80-NEXT:    ld (ix - 18), e
; Z80-NEXT:    ld (ix - 17), d
; Z80-NEXT:    ld hl, 31
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 24)
; Z80-NEXT:    ld h, (ix - 23)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 20)
; Z80-NEXT:    ld h, (ix - 19)
; Z80-NEXT:    ld e, (ix - 22)
; Z80-NEXT:    ld d, (ix - 21)
; Z80-NEXT:    ld c, (ix - 12)
; Z80-NEXT:    ld b, (ix - 11)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld (ix - 6), e
; Z80-NEXT:    ld (ix - 5), d
; Z80-NEXT:    ld (ix - 8), c
; Z80-NEXT:    ld (ix - 7), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 33
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ld h, (ix - 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 14)
; Z80-NEXT:    ld d, (ix - 13)
; Z80-NEXT:    ld c, (ix - 16)
; Z80-NEXT:    ld b, (ix - 15)
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 12), l
; Z80-NEXT:    ld (ix - 11), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 12)
; Z80-NEXT:    ld h, (ix - 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    ld e, (ix - 6)
; Z80-NEXT:    ld d, (ix - 5)
; Z80-NEXT:    ld c, (ix - 8)
; Z80-NEXT:    ld b, (ix - 7)
; Z80-NEXT:    call __llor
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld (ix - 6), e
; Z80-NEXT:    ld (ix - 5), d
; Z80-NEXT:    ld (ix - 8), c
; Z80-NEXT:    ld (ix - 7), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 31
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ld h, (ix - 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 14)
; Z80-NEXT:    ld d, (ix - 13)
; Z80-NEXT:    ld c, (ix - 16)
; Z80-NEXT:    ld b, (ix - 15)
; Z80-NEXT:    call __llshrs
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 16), l
; Z80-NEXT:    ld (ix - 15), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld (ix - 14), c
; Z80-NEXT:    ld (ix - 13), b
; Z80-NEXT:    push bc
; Z80-NEXT:    ld (ix - 12), e
; Z80-NEXT:    ld (ix - 11), d
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    call __llcmps
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 18), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    ld l, 1
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    ld (ix - 18), l ; 1-byte Folded Spill
; Z80-NEXT:    jp m, BB37_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld l, a
; Z80-NEXT:  BB37_2:
; Z80-NEXT:    ld (ix - 20), l
; Z80-NEXT:    push iy
; Z80-NEXT:    push iy
; Z80-NEXT:    push iy
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 16)
; Z80-NEXT:    ld h, (ix - 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 12)
; Z80-NEXT:    ld d, (ix - 11)
; Z80-NEXT:    ld c, (ix - 14)
; Z80-NEXT:    ld b, (ix - 13)
; Z80-NEXT:    call __llcmpu
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 22), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 22)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    jr z, BB37_4
; Z80-NEXT:  ; %bb.3:
; Z80-NEXT:    ld (ix - 18), a ; 1-byte Folded Spill
; Z80-NEXT:  BB37_4:
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld hl, -32768
; Z80-NEXT:    push hl
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    ld e, c
; Z80-NEXT:    ld d, b
; Z80-NEXT:    call __llcmpu
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 22), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 22)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld l, a
; Z80-NEXT:    ld a, (ix - 20)
; Z80-NEXT:    rrc a
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    bit 0, (ix - 18) ; 1-byte Folded Reload
; Z80-NEXT:    jp z, BB37_25
; Z80-NEXT:  ; %bb.5:
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp z, BB37_26
; Z80-NEXT:  BB37_6:
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp z, BB37_27
; Z80-NEXT:  BB37_7:
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp z, BB37_28
; Z80-NEXT:  BB37_8:
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp z, BB37_29
; Z80-NEXT:  BB37_9:
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp z, BB37_30
; Z80-NEXT:  BB37_10:
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp z, BB37_31
; Z80-NEXT:  BB37_11:
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp z, BB37_32
; Z80-NEXT:  BB37_12:
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jr nz, BB37_14
; Z80-NEXT:  BB37_13:
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 16), l
; Z80-NEXT:    ld (ix - 15), h
; Z80-NEXT:    pop hl
; Z80-NEXT:  BB37_14:
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 16)
; Z80-NEXT:    ld h, (ix - 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 12)
; Z80-NEXT:    ld d, (ix - 11)
; Z80-NEXT:    ld c, (ix - 14)
; Z80-NEXT:    ld b, (ix - 13)
; Z80-NEXT:    call __llcmps
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 18), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    ld l, 1
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    ld (ix - 18), l ; 1-byte Folded Spill
; Z80-NEXT:    jp m, BB37_16
; Z80-NEXT:  ; %bb.15:
; Z80-NEXT:    ld l, a
; Z80-NEXT:  BB37_16:
; Z80-NEXT:    ld (ix - 20), l
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 16)
; Z80-NEXT:    ld h, (ix - 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 12)
; Z80-NEXT:    ld d, (ix - 11)
; Z80-NEXT:    ld c, (ix - 14)
; Z80-NEXT:    ld b, (ix - 13)
; Z80-NEXT:    call __llcmpu
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    jr z, BB37_18
; Z80-NEXT:  ; %bb.17:
; Z80-NEXT:    ld (ix - 18), a ; 1-byte Folded Spill
; Z80-NEXT:  BB37_18:
; Z80-NEXT:    ld hl, 32767
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push iy
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    ld e, (ix - 6)
; Z80-NEXT:    ld d, (ix - 5)
; Z80-NEXT:    ld c, (ix - 8)
; Z80-NEXT:    ld b, (ix - 7)
; Z80-NEXT:    call __llcmpu
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld l, a
; Z80-NEXT:    ld a, (ix - 20)
; Z80-NEXT:    rrc a
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    bit 0, (ix - 18) ; 1-byte Folded Reload
; Z80-NEXT:    jp z, BB37_33
; Z80-NEXT:  ; %bb.19:
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp z, BB37_34
; Z80-NEXT:  BB37_20:
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp z, BB37_35
; Z80-NEXT:  BB37_21:
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp z, BB37_36
; Z80-NEXT:  BB37_22:
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jr nz, BB37_24
; Z80-NEXT:  BB37_23:
; Z80-NEXT:    ld hl, 32767
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:  BB37_24:
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    ld e, (ix - 6)
; Z80-NEXT:    ld d, (ix - 5)
; Z80-NEXT:    ld c, (ix - 8)
; Z80-NEXT:    ld b, (ix - 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:  BB37_25:
; Z80-NEXT:    ld l, a
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp nz, BB37_6
; Z80-NEXT:  BB37_26:
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    ld (ix - 4), e
; Z80-NEXT:    ld (ix - 3), d
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp nz, BB37_7
; Z80-NEXT:  BB37_27:
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    ld (ix - 6), e
; Z80-NEXT:    ld (ix - 5), d
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp nz, BB37_8
; Z80-NEXT:  BB37_28:
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    ld (ix - 8), e
; Z80-NEXT:    ld (ix - 7), d
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp nz, BB37_9
; Z80-NEXT:  BB37_29:
; Z80-NEXT:    ld de, -32768
; Z80-NEXT:    ld (ix - 10), e
; Z80-NEXT:    ld (ix - 9), d
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp nz, BB37_10
; Z80-NEXT:  BB37_30:
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp nz, BB37_11
; Z80-NEXT:  BB37_31:
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 12), l
; Z80-NEXT:    ld (ix - 11), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp nz, BB37_12
; Z80-NEXT:  BB37_32:
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 14), l
; Z80-NEXT:    ld (ix - 13), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp z, BB37_13
; Z80-NEXT:    jp BB37_14
; Z80-NEXT:  BB37_33:
; Z80-NEXT:    ld l, a
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp nz, BB37_20
; Z80-NEXT:  BB37_34:
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp nz, BB37_21
; Z80-NEXT:  BB37_35:
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 6), l
; Z80-NEXT:    ld (ix - 5), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp nz, BB37_22
; Z80-NEXT:  BB37_36:
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp z, BB37_23
; Z80-NEXT:    jp BB37_24
;
; EZ80-CODE16-LABEL: smul.fix.sat.i64.31:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 44
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    ld iy, (ix + 10)
; EZ80-CODE16-NEXT:    ld a, 31
; EZ80-CODE16-NEXT:    call __lshrs
; EZ80-CODE16-NEXT:    ld (ix - 8), hl
; EZ80-CODE16-NEXT:    ld (ix - 10), de
; EZ80-CODE16-NEXT:    ld bc, (ix + 16)
; EZ80-CODE16-NEXT:    ld iy, (ix + 18)
; EZ80-CODE16-NEXT:    call __lshrs
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld (ix - 6), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 12)
; EZ80-CODE16-NEXT:    ld iy, (ix + 14)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 20), hl
; EZ80-CODE16-NEXT:    ld (ix - 22), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    ld bc, (ix + 12)
; EZ80-CODE16-NEXT:    ld iy, (ix + 14)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 12), hl
; EZ80-CODE16-NEXT:    ld (ix - 2), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 16)
; EZ80-CODE16-NEXT:    ld iy, (ix + 18)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 16), hl
; EZ80-CODE16-NEXT:    ld (ix - 14), de
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 14)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 18), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 18)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 24), hl
; EZ80-CODE16-NEXT:    ld (ix - 18), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 12)
; EZ80-CODE16-NEXT:    ld de, (ix - 16)
; EZ80-CODE16-NEXT:    add hl, de
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld bc, (ix - 14)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    inc iy
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld de, (ix - 24)
; EZ80-CODE16-NEXT:    add hl, de
; EZ80-CODE16-NEXT:    ld (ix - 12), hl
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    ld de, (ix - 18)
; EZ80-CODE16-NEXT:    adc hl, de
; EZ80-CODE16-NEXT:    ld (ix - 24), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld (ix - 16), hl
; EZ80-CODE16-NEXT:    ld (ix - 14), de
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    ld de, (ix - 10)
; EZ80-CODE16-NEXT:    ld bc, (ix + 12)
; EZ80-CODE16-NEXT:    ld iy, (ix + 14)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld (ix - 18), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    ld bc, (ix + 16)
; EZ80-CODE16-NEXT:    ld iy, (ix + 18)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 30), hl
; EZ80-CODE16-NEXT:    ld (ix - 26), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix - 4)
; EZ80-CODE16-NEXT:    ld iy, (ix - 6)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 32), hl
; EZ80-CODE16-NEXT:    ld (ix - 28), de
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 14)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 34), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 34)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 36), hl
; EZ80-CODE16-NEXT:    ld (ix - 34), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 16)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 38), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 38)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 40), hl
; EZ80-CODE16-NEXT:    ld (ix - 38), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld iy, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 30)
; EZ80-CODE16-NEXT:    add iy, de
; EZ80-CODE16-NEXT:    ld hl, (ix - 18)
; EZ80-CODE16-NEXT:    ld de, (ix - 26)
; EZ80-CODE16-NEXT:    adc hl, de
; EZ80-CODE16-NEXT:    ld (ix - 18), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    inc de
; EZ80-CODE16-NEXT:    ld bc, (ix - 32)
; EZ80-CODE16-NEXT:    add iy, bc
; EZ80-CODE16-NEXT:    ld (ix - 2), iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 18)
; EZ80-CODE16-NEXT:    ld bc, (ix - 28)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 18), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld bc, (ix - 36)
; EZ80-CODE16-NEXT:    add hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 18)
; EZ80-CODE16-NEXT:    ld bc, (ix - 34)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 18), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld bc, (ix - 40)
; EZ80-CODE16-NEXT:    add hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 18)
; EZ80-CODE16-NEXT:    ld bc, (ix - 38)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 18), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld bc, (ix - 16)
; EZ80-CODE16-NEXT:    add hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 18)
; EZ80-CODE16-NEXT:    ld bc, (ix - 14)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 14), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld (ix - 16), hl
; EZ80-CODE16-NEXT:    ld (ix - 18), de
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    ld de, (ix - 10)
; EZ80-CODE16-NEXT:    ld bc, (ix + 12)
; EZ80-CODE16-NEXT:    ld iy, (ix + 14)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 26), hl
; EZ80-CODE16-NEXT:    ld (ix - 28), de
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    ld de, (ix - 10)
; EZ80-CODE16-NEXT:    ld bc, (ix + 16)
; EZ80-CODE16-NEXT:    ld iy, (ix + 18)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 38), hl
; EZ80-CODE16-NEXT:    ld (ix - 40), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    ld bc, (ix - 4)
; EZ80-CODE16-NEXT:    ld iy, (ix - 6)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 34), hl
; EZ80-CODE16-NEXT:    ld (ix - 36), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix - 4)
; EZ80-CODE16-NEXT:    ld iy, (ix - 6)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 30), hl
; EZ80-CODE16-NEXT:    ld (ix - 32), de
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 14)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    ld de, (ix - 10)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 8), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 8), hl
; EZ80-CODE16-NEXT:    ld (ix - 10), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 16)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 42), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 42)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 42), hl
; EZ80-CODE16-NEXT:    ld (ix - 44), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix - 6)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld (ix - 6), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 26)
; EZ80-CODE16-NEXT:    ld de, (ix - 28)
; EZ80-CODE16-NEXT:    ld bc, (ix - 38)
; EZ80-CODE16-NEXT:    ld iy, (ix - 40)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 34)
; EZ80-CODE16-NEXT:    ld iy, (ix - 36)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 30)
; EZ80-CODE16-NEXT:    ld iy, (ix - 32)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 8)
; EZ80-CODE16-NEXT:    ld iy, (ix - 10)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 42)
; EZ80-CODE16-NEXT:    ld iy, (ix - 44)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 4)
; EZ80-CODE16-NEXT:    ld iy, (ix - 6)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 16)
; EZ80-CODE16-NEXT:    ld iy, (ix - 18)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld (ix - 16), hl
; EZ80-CODE16-NEXT:    ld (ix - 18), de
; EZ80-CODE16-NEXT:    ld hl, 31
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 24)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 20)
; EZ80-CODE16-NEXT:    ld de, (ix - 22)
; EZ80-CODE16-NEXT:    ld bc, (ix - 12)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld (ix - 6), de
; EZ80-CODE16-NEXT:    ld (ix - 8), bc
; EZ80-CODE16-NEXT:    ld (ix - 10), iy
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 33
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 14)
; EZ80-CODE16-NEXT:    ld bc, (ix - 16)
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 12), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    ld de, (ix - 6)
; EZ80-CODE16-NEXT:    ld bc, (ix - 8)
; EZ80-CODE16-NEXT:    call __llor
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld (ix - 6), de
; EZ80-CODE16-NEXT:    ld (ix - 8), bc
; EZ80-CODE16-NEXT:    ld (ix - 10), iy
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 31
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 14)
; EZ80-CODE16-NEXT:    ld bc, (ix - 16)
; EZ80-CODE16-NEXT:    call __llshrs
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:    ld (ix - 16), iy
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld (ix - 14), bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld (ix - 12), de
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    call __llcmps
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 18), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 18)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    ld l, 1
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    ld (ix - 18), l ; 1-byte Folded Spill
; EZ80-CODE16-NEXT:    jp m, BB37_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:  BB37_2:
; EZ80-CODE16-NEXT:    ld (ix - 20), l
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 16)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 12)
; EZ80-CODE16-NEXT:    ld bc, (ix - 14)
; EZ80-CODE16-NEXT:    call __llcmpu
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 22), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 22)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    jr z, BB37_4
; EZ80-CODE16-NEXT:  ; %bb.3:
; EZ80-CODE16-NEXT:    ld (ix - 18), a ; 1-byte Folded Spill
; EZ80-CODE16-NEXT:  BB37_4:
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 6)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, -32768
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    ld e, c
; EZ80-CODE16-NEXT:    ld d, b
; EZ80-CODE16-NEXT:    call __llcmpu
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 22), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 22)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    ld a, (ix - 20)
; EZ80-CODE16-NEXT:    rrc a
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    bit 0, (ix - 18) ; 1-byte Folded Reload
; EZ80-CODE16-NEXT:    jp z, BB37_25
; EZ80-CODE16-NEXT:  ; %bb.5:
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp z, BB37_26
; EZ80-CODE16-NEXT:  BB37_6:
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp z, BB37_27
; EZ80-CODE16-NEXT:  BB37_7:
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp z, BB37_28
; EZ80-CODE16-NEXT:  BB37_8:
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp z, BB37_29
; EZ80-CODE16-NEXT:  BB37_9:
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp z, BB37_30
; EZ80-CODE16-NEXT:  BB37_10:
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp z, BB37_31
; EZ80-CODE16-NEXT:  BB37_11:
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp z, BB37_32
; EZ80-CODE16-NEXT:  BB37_12:
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jr nz, BB37_14
; EZ80-CODE16-NEXT:  BB37_13:
; EZ80-CODE16-NEXT:    ld (ix - 16), iy
; EZ80-CODE16-NEXT:  BB37_14:
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 16)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 12)
; EZ80-CODE16-NEXT:    ld bc, (ix - 14)
; EZ80-CODE16-NEXT:    call __llcmps
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 18), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 18)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    ld l, 1
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    ld (ix - 18), l ; 1-byte Folded Spill
; EZ80-CODE16-NEXT:    jp m, BB37_16
; EZ80-CODE16-NEXT:  ; %bb.15:
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:  BB37_16:
; EZ80-CODE16-NEXT:    ld (ix - 20), l
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 16)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 12)
; EZ80-CODE16-NEXT:    ld bc, (ix - 14)
; EZ80-CODE16-NEXT:    call __llcmpu
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 2), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 2)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    jr z, BB37_18
; EZ80-CODE16-NEXT:  ; %bb.17:
; EZ80-CODE16-NEXT:    ld (ix - 18), a ; 1-byte Folded Spill
; EZ80-CODE16-NEXT:  BB37_18:
; EZ80-CODE16-NEXT:    ld hl, 32767
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    ld de, (ix - 6)
; EZ80-CODE16-NEXT:    ld bc, (ix - 8)
; EZ80-CODE16-NEXT:    call __llcmpu
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 2), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 2)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    ld a, (ix - 20)
; EZ80-CODE16-NEXT:    rrc a
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    bit 0, (ix - 18) ; 1-byte Folded Reload
; EZ80-CODE16-NEXT:    jp z, BB37_33
; EZ80-CODE16-NEXT:  ; %bb.19:
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp z, BB37_34
; EZ80-CODE16-NEXT:  BB37_20:
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp z, BB37_35
; EZ80-CODE16-NEXT:  BB37_21:
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp z, BB37_36
; EZ80-CODE16-NEXT:  BB37_22:
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jr nz, BB37_24
; EZ80-CODE16-NEXT:  BB37_23:
; EZ80-CODE16-NEXT:    ld hl, 32767
; EZ80-CODE16-NEXT:    ld (ix - 10), hl
; EZ80-CODE16-NEXT:  BB37_24:
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    ld de, (ix - 6)
; EZ80-CODE16-NEXT:    ld bc, (ix - 8)
; EZ80-CODE16-NEXT:    ld iy, (ix - 10)
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
; EZ80-CODE16-NEXT:  BB37_25:
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp nz, BB37_6
; EZ80-CODE16-NEXT:  BB37_26:
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    ld (ix - 4), de
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp nz, BB37_7
; EZ80-CODE16-NEXT:  BB37_27:
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    ld (ix - 6), de
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp nz, BB37_8
; EZ80-CODE16-NEXT:  BB37_28:
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    ld (ix - 8), de
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp nz, BB37_9
; EZ80-CODE16-NEXT:  BB37_29:
; EZ80-CODE16-NEXT:    ld de, -32768
; EZ80-CODE16-NEXT:    ld (ix - 10), de
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp nz, BB37_10
; EZ80-CODE16-NEXT:  BB37_30:
; EZ80-CODE16-NEXT:    ld (ix - 2), iy
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp nz, BB37_11
; EZ80-CODE16-NEXT:  BB37_31:
; EZ80-CODE16-NEXT:    ld (ix - 12), iy
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp nz, BB37_12
; EZ80-CODE16-NEXT:  BB37_32:
; EZ80-CODE16-NEXT:    ld (ix - 14), iy
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp z, BB37_13
; EZ80-CODE16-NEXT:    jp BB37_14
; EZ80-CODE16-NEXT:  BB37_33:
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp nz, BB37_20
; EZ80-CODE16-NEXT:  BB37_34:
; EZ80-CODE16-NEXT:    ld (ix - 4), iy
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp nz, BB37_21
; EZ80-CODE16-NEXT:  BB37_35:
; EZ80-CODE16-NEXT:    ld (ix - 6), iy
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp nz, BB37_22
; EZ80-CODE16-NEXT:  BB37_36:
; EZ80-CODE16-NEXT:    ld (ix - 8), iy
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp z, BB37_23
; EZ80-CODE16-NEXT:    jp BB37_24
;
; EZ80-LABEL: smul.fix.sat.i64.31:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, -329
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld bc, -225
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld bc, -237
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    ld de, (ix + 12)
; EZ80-NEXT:    ld bc, (ix + 21)
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld h, a
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -246
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld de, -249
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    ld a, b
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld h, a
; EZ80-NEXT:    ld l, c
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -243
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld de, -271
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    ld bc, (ix + 9)
; EZ80-NEXT:    ld a, c
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -234
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), a
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -237
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld iy, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (iy), bc
; EZ80-NEXT:    ld.sis hl, (iy + 1)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -291
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (iy + 3), bc
; EZ80-NEXT:    ld.sis bc, (iy + 4)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld l, 31
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -294
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), a
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (iy + 6), bc
; EZ80-NEXT:    ld (iy + 8), a
; EZ80-NEXT:    ld bc, (iy + 6)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -304
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), a
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    call __lshrs
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -287
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    dec de
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), a ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix + 18)
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -231
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), a
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (iy + 9), de
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld.sis bc, (iy + 10)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -268
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld (iy + 12), de
; EZ80-NEXT:    ld.sis de, (iy + 13)
; EZ80-NEXT:    ld hl, (ix + 21)
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -300
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), a
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (iy + 15), de
; EZ80-NEXT:    ld (iy + 17), a
; EZ80-NEXT:    ld bc, (iy + 15)
; EZ80-NEXT:    ld a, h
; EZ80-NEXT:    ld de, -301
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    ld l, 31
; EZ80-NEXT:    call __lshrs
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -283
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    dec de
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), a ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -234
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld e, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (ix + 15)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -231
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -274
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ; kill: def $e killed $e def $ude
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -277
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ld (iy + 18), hl
; EZ80-NEXT:    ld.sis hl, (iy + 19)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -246
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -258
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), a
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (iy + 21), hl
; EZ80-NEXT:    ld (iy + 23), a
; EZ80-NEXT:    ld hl, (iy + 21)
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -255
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), a
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -231
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -240
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -228
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 18)
; EZ80-NEXT:    ld (iy + 24), hl
; EZ80-NEXT:    ld.sis hl, (iy + 25)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -243
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -264
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), a
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (iy + 27), hl
; EZ80-NEXT:    ld (iy + 29), a
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (iy + 27)
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    ld de, -265
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, -234
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    push af
; EZ80-NEXT:    ld a, (iy) ; 1-byte Folded Reload
; EZ80-NEXT:    ld iyl, a
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -297
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -280
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -252
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -231
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    push af
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    ld iyl, a
; EZ80-NEXT:    pop af
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -261
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), iy
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld bc, -307
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld bc, -310
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -240
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld iy, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -297
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -228
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -280
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    adc a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    inc de
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -307
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -240
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), iy
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, -310
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    push af
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    pop af
; EZ80-NEXT:    adc a, (iy) ; 1-byte Folded Reload
; EZ80-NEXT:    ld h, a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -280
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld iyh, 0
; EZ80-NEXT:    ld e, iyh
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ld bc, -314
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -311
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -237
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld iy, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -246
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (iy + 30), hl
; EZ80-NEXT:    ld l, (iy + 32)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -249
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld c, e
; EZ80-NEXT:    ld b, d
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -297
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (iy + 33), hl
; EZ80-NEXT:    ld.sis (iy + 34), bc
; EZ80-NEXT:    ld hl, (iy + 33)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld (iy + 36), de
; EZ80-NEXT:    ld e, (iy + 38)
; EZ80-NEXT:    ld bc, (ix + 15)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -231
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -228
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -317
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ld (iy + 39), hl
; EZ80-NEXT:    ld.sis hl, (iy + 40)
; EZ80-NEXT:    ld (iy + 42), hl
; EZ80-NEXT:    ld bc, -258
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld a, (hl)
; EZ80-NEXT:    ld (iy + 44), a
; EZ80-NEXT:    ld hl, (iy + 42)
; EZ80-NEXT:    ld de, (ix + 18)
; EZ80-NEXT:    ld (iy + 45), de
; EZ80-NEXT:    ld.sis de, (iy + 46)
; EZ80-NEXT:    ld (iy + 48), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -264
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (iy + 50), a
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (iy + 48)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -255
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld e, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -265
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -321
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -318
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -243
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (iy + 51), hl
; EZ80-NEXT:    ld l, (iy + 53)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -271
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld c, e
; EZ80-NEXT:    ld b, d
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -310
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (iy + 54), hl
; EZ80-NEXT:    ld.sis (iy + 55), bc
; EZ80-NEXT:    ld bc, (iy + 54)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld (iy + 57), de
; EZ80-NEXT:    ld a, (iy + 59)
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -234
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld e, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -325
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -322
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -291
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (iy + 60), hl
; EZ80-NEXT:    ld bc, -294
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld a, (hl)
; EZ80-NEXT:    ld (iy + 62), a
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (iy + 60)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld de, -294
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld (iy), bc
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -304
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld e, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -291
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -261
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld bc, -328
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    dec bc
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -268
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -237
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld iy, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (iy + 63), hl
; EZ80-NEXT:    ld bc, -300
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld a, (hl)
; EZ80-NEXT:    ld (iy + 65), a
; EZ80-NEXT:    ld de, (iy + 63)
; EZ80-NEXT:    ld bc, -304
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), de
; EZ80-NEXT:    ld bc, 0
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -301
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld c, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -307
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -252
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld bc, -268
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld bc, -300
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -228
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld iy, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -321
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -317
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    dec bc
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    adc a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    inc de
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -325
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -228
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), iy
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, -322
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    push af
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    pop af
; EZ80-NEXT:    adc a, (iy) ; 1-byte Folded Reload
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -301
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), a ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld d, 0
; EZ80-NEXT:    ld e, d
; EZ80-NEXT:    ld iyh, d
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld de, -317
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -328
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -228
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -228
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, -301
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    push af
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld a, (hl) ; 1-byte Folded Reload
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -329
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    adc a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld d, a
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -317
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld iyh, 0
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -268
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -228
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -228
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    ld bc, -300
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    push af
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    adc a, (hl) ; 1-byte Folded Reload
; EZ80-NEXT:    ld d, a
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld iyh, 0
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -314
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -228
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -228
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    ld bc, -311
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    push af
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    adc a, (hl) ; 1-byte Folded Reload
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -268
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld iyh, 0
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ld bc, -300
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    push ix
; EZ80-NEXT:    dec bc
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -249
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ; kill: def $e killed $e killed $ude
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (ix + 15)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -231
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -231
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -311
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -237
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld iy, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -246
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (iy + 66), hl
; EZ80-NEXT:    ld l, (iy + 68)
; EZ80-NEXT:    ld (iy + 69), hl
; EZ80-NEXT:    ld bc, -297
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld.sis (iy + 70), hl
; EZ80-NEXT:    ld hl, (iy + 69)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -249
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (iy + 72), de
; EZ80-NEXT:    ld e, (iy + 74)
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (ix + 18)
; EZ80-NEXT:    ld (iy + 75), bc
; EZ80-NEXT:    ld.sis bc, (iy + 76)
; EZ80-NEXT:    ld (iy + 78), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -264
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (iy + 80), a
; EZ80-NEXT:    ld bc, (iy + 78)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -265
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -246
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -249
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ld (iy + 81), hl
; EZ80-NEXT:    ld.sis hl, (iy + 82)
; EZ80-NEXT:    ld (iy + 84), hl
; EZ80-NEXT:    ld bc, -258
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld a, (hl)
; EZ80-NEXT:    ld (iy + 86), a
; EZ80-NEXT:    ld hl, (iy + 84)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -243
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (iy + 87), de
; EZ80-NEXT:    ld e, (iy + 89)
; EZ80-NEXT:    ld (iy + 90), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -310
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -134
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld.sis (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (iy + 90)
; EZ80-NEXT:    ld de, -271
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld iy, (iy)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -132
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), iy
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -130
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -255
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld e, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -243
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -255
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -234
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld e, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    ld a, iyl
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ld bc, -234
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -237
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -288
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld e, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -261
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -287
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld bc, -258
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld bc, -261
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -307
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -304
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -294
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -291
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld bc, -264
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    dec bc
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -284
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld l, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -252
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld d, e
; EZ80-NEXT:    ld bc, -231
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -311
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld e, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -246
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -249
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -243
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -255
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -234
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -237
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -258
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -261
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -264
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    dec de
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld de, -300
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld bc, (iy)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    dec de
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld h, e
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -234
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, -240
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld bc, (hl)
; EZ80-NEXT:    ld l, c
; EZ80-NEXT:    ld h, b
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -277
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -129
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld.sis (ix - 128), hl
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld de, (hl)
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld (ix - 126), bc
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -280
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld c, (ix - 124)
; EZ80-NEXT:    ld hl, 31
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld de, -274
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -231
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -237
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -246
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld de, -243
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld (hl), iy
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld d, iyh
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -240
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -268
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 123), hl
; EZ80-NEXT:    ld.sis (ix - 122), de
; EZ80-NEXT:    ld de, (ix - 123)
; EZ80-NEXT:    ld (ix - 120), iy
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld de, -234
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld bc, (hl)
; EZ80-NEXT:    ld c, (ix - 118)
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld (iy), bc
; EZ80-NEXT:    ld hl, 33
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld de, -228
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -231
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld bc, -237
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld de, (iy)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -246
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __llor
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -237
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -231
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -249
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld bc, -268
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld (ix - 117), hl
; EZ80-NEXT:    ld bc, -240
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld.sis (ix - 116), hl
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld de, (ix - 117)
; EZ80-NEXT:    ld bc, -243
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld (ix - 114), hl
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld de, -234
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld bc, (hl)
; EZ80-NEXT:    ld c, (ix - 112)
; EZ80-NEXT:    ld hl, 31
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld de, -228
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __llshrs
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -243
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -240
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -234
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, -32768
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld de, -1
; EZ80-NEXT:    ld b, d
; EZ80-NEXT:    ld (ix - 111), hl
; EZ80-NEXT:    ld l, (ix - 109)
; EZ80-NEXT:    ld iyl, e
; EZ80-NEXT:    ld iyh, d
; EZ80-NEXT:    ld (ix - 108), hl
; EZ80-NEXT:    ld.sis (ix - 107), iy
; EZ80-NEXT:    ld hl, (ix - 108)
; EZ80-NEXT:    ld (ix - 105), de
; EZ80-NEXT:    ld e, (ix - 103)
; EZ80-NEXT:    ld (ix - 102), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -255
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), iy
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld.sis (ix - 101), iy
; EZ80-NEXT:    ld de, (ix - 102)
; EZ80-NEXT:    ld iy, -1
; EZ80-NEXT:    ld (ix - 99), iy
; EZ80-NEXT:    ld c, (ix - 97)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld de, -234
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld iy, (iy)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld de, -240
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld iy, (iy)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld de, -243
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld iy, (iy)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld de, -246
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld (iy), bc
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __llcmps
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -228
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), l
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld l, (hl)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    ld l, 1
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    push ix
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), l ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    jp m, BB37_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:  BB37_2:
; EZ80-NEXT:    ld de, -252
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld (iy), l
; EZ80-NEXT:    ld hl, -32768
; EZ80-NEXT:    ld (ix - 96), hl
; EZ80-NEXT:    ld l, (ix - 94)
; EZ80-NEXT:    ld (ix - 93), hl
; EZ80-NEXT:    ld de, -255
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld bc, (hl)
; EZ80-NEXT:    ld.sis (ix - 92), bc
; EZ80-NEXT:    ld hl, (ix - 93)
; EZ80-NEXT:    ld de, -1
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld (ix - 90), iy
; EZ80-NEXT:    ld e, (ix - 88)
; EZ80-NEXT:    ld (ix - 87), de
; EZ80-NEXT:    ld.sis (ix - 86), bc
; EZ80-NEXT:    ld de, (ix - 87)
; EZ80-NEXT:    ld (ix - 84), iy
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld de, -246
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld bc, (iy)
; EZ80-NEXT:    ld c, (ix - 82)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push bc
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -243
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -240
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -234
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __llcmpu
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -255
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), l
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld l, (hl)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    jr z, BB37_4
; EZ80-NEXT:  ; %bb.3:
; EZ80-NEXT:    ld bc, -228
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a ; 1-byte Folded Spill
; EZ80-NEXT:  BB37_4:
; EZ80-NEXT:    ld hl, -32768
; EZ80-NEXT:    ld c, l
; EZ80-NEXT:    ld b, h
; EZ80-NEXT:    ld de, -249
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld de, -231
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld de, -237
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld iy, (hl)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    call __llcmpu
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -255
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), l
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld l, (hl)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -252
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    rrc a
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -228
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    bit 0, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    jr nz, BB37_6
; EZ80-NEXT:  ; %bb.5:
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:  BB37_6:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -243
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld a, c
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -249
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 81), de
; EZ80-NEXT:    ld (ix - 79), a
; EZ80-NEXT:    ld de, (ix - 81)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -228
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld (ix - 78), bc
; EZ80-NEXT:    ld.sis de, (ix - 77)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -240
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld a, c
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld (ix - 75), de
; EZ80-NEXT:    ld (ix - 73), a
; EZ80-NEXT:    ld de, (ix - 75)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -243
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld (ix - 72), bc
; EZ80-NEXT:    ld.sis de, (ix - 71)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -234
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld a, c
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld (ix - 69), de
; EZ80-NEXT:    ld (ix - 67), a
; EZ80-NEXT:    ld de, (ix - 69)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -240
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    bit 0, l
; EZ80-NEXT:    jr z, BB37_14
; EZ80-NEXT:  ; %bb.7:
; EZ80-NEXT:    bit 0, l
; EZ80-NEXT:    jr z, BB37_15
; EZ80-NEXT:  BB37_8:
; EZ80-NEXT:    bit 0, l
; EZ80-NEXT:    jr z, BB37_16
; EZ80-NEXT:  BB37_9:
; EZ80-NEXT:    bit 0, l
; EZ80-NEXT:    jr z, BB37_17
; EZ80-NEXT:  BB37_10:
; EZ80-NEXT:    bit 0, l
; EZ80-NEXT:    jr nz, BB37_12
; EZ80-NEXT:  BB37_11:
; EZ80-NEXT:    ld de, -1
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -240
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:  BB37_12:
; EZ80-NEXT:    bit 0, l
; EZ80-NEXT:    ld bc, -237
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    push af
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (hl), iy
; EZ80-NEXT:    jr nz, BB37_18
; EZ80-NEXT:  ; %bb.13:
; EZ80-NEXT:    ld de, -246
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld bc, (hl)
; EZ80-NEXT:    jr BB37_19
; EZ80-NEXT:  BB37_14:
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    bit 0, l
; EZ80-NEXT:    jr nz, BB37_8
; EZ80-NEXT:  BB37_15:
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -231
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    bit 0, l
; EZ80-NEXT:    jr nz, BB37_9
; EZ80-NEXT:  BB37_16:
; EZ80-NEXT:    ld de, -32768
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -228
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    bit 0, l
; EZ80-NEXT:    jr nz, BB37_10
; EZ80-NEXT:  BB37_17:
; EZ80-NEXT:    ld de, -1
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -243
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    bit 0, l
; EZ80-NEXT:    jr z, BB37_11
; EZ80-NEXT:    jr BB37_12
; EZ80-NEXT:  BB37_18:
; EZ80-NEXT:    ld de, -234
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld b, h
; EZ80-NEXT:  BB37_19:
; EZ80-NEXT:    ld de, -228
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld (ix - 66), hl
; EZ80-NEXT:    push af
; EZ80-NEXT:    ld a, (ix - 64)
; EZ80-NEXT:    ld iyl, a
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ld bc, -243
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld de, (hl)
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:    ld (ix - 63), iy
; EZ80-NEXT:    ld bc, -255
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    ld.sis (ix - 62), hl
; EZ80-NEXT:    ld hl, (ix - 63)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -234
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 60), de
; EZ80-NEXT:    push af
; EZ80-NEXT:    ld a, (ix - 58)
; EZ80-NEXT:    ld iyl, a
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld bc, -240
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld e, l
; EZ80-NEXT:    ld d, h
; EZ80-NEXT:    ld (ix - 57), iy
; EZ80-NEXT:    ld bc, -258
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), de
; EZ80-NEXT:    ld.sis (ix - 56), de
; EZ80-NEXT:    ld de, (ix - 57)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -249
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 54), hl
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld c, (ix - 52)
; EZ80-NEXT:    ld hl, 32767
; EZ80-NEXT:    ld (ix - 51), hl
; EZ80-NEXT:    ld e, (ix - 49)
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld d, iyh
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld (ix - 48), de
; EZ80-NEXT:    ld.sis (ix - 47), hl
; EZ80-NEXT:    ld de, (ix - 48)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -261
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 45), iy
; EZ80-NEXT:    ld e, (ix - 43)
; EZ80-NEXT:    ld (ix - 42), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -252
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld.sis (ix - 41), hl
; EZ80-NEXT:    ld de, (ix - 42)
; EZ80-NEXT:    ld (ix - 39), iy
; EZ80-NEXT:    ld h, 0
; EZ80-NEXT:    ld l, (ix - 37)
; EZ80-NEXT:    ld bc, -246
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld bc, -261
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -234
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -249
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llcmps
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -234
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), l
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld l, (hl)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    ld l, 1
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    push ix
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), l ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    jp m, BB37_21
; EZ80-NEXT:  ; %bb.20:
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:  BB37_21:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -249
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), l
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, -228
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld (ix - 36), hl
; EZ80-NEXT:    ld l, (ix - 34)
; EZ80-NEXT:    ld (ix - 33), hl
; EZ80-NEXT:    ld bc, -255
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld.sis (ix - 32), hl
; EZ80-NEXT:    ld hl, (ix - 33)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, -243
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld (ix - 30), hl
; EZ80-NEXT:    ld e, (ix - 28)
; EZ80-NEXT:    ld (ix - 27), de
; EZ80-NEXT:    ld de, -258
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld.sis (ix - 26), hl
; EZ80-NEXT:    ld hl, (ix - 27)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -243
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, -240
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld (ix - 24), hl
; EZ80-NEXT:    push af
; EZ80-NEXT:    ld a, (ix - 22)
; EZ80-NEXT:    ld iyl, a
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld hl, 32767
; EZ80-NEXT:    ld (ix - 21), hl
; EZ80-NEXT:    ld c, (ix - 19)
; EZ80-NEXT:    ld (ix - 18), bc
; EZ80-NEXT:    ld bc, -252
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld de, (hl)
; EZ80-NEXT:    ld.sis (ix - 17), de
; EZ80-NEXT:    ld hl, (ix - 18)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -240
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, 0
; EZ80-NEXT:    ld (ix - 15), hl
; EZ80-NEXT:    ld c, (ix - 13)
; EZ80-NEXT:    ld (ix - 12), bc
; EZ80-NEXT:    ld.sis (ix - 11), de
; EZ80-NEXT:    ld bc, (ix - 12)
; EZ80-NEXT:    ld (ix - 9), hl
; EZ80-NEXT:    ld de, -246
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld l, (ix - 7)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    ld bc, -240
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -255
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -243
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld c, iyl
; EZ80-NEXT:    ld b, iyh
; EZ80-NEXT:    call __llcmpu
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ld bc, -240
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    push af
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (iy), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld l, (hl)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    jr z, BB37_23
; EZ80-NEXT:  ; %bb.22:
; EZ80-NEXT:    ld bc, -234
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a ; 1-byte Folded Spill
; EZ80-NEXT:  BB37_23:
; EZ80-NEXT:    ld de, -228
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld c, l
; EZ80-NEXT:    ld b, h
; EZ80-NEXT:    ld hl, 32767
; EZ80-NEXT:    push hl
; EZ80-NEXT:    scf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld de, -237
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ld bc, -231
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld de, (iy)
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __llcmpu
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -240
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), l
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld l, (iy)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -249
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    rrc a
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -234
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    bit 0, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    jp z, BB37_29
; EZ80-NEXT:  ; %bb.24:
; EZ80-NEXT:    bit 0, e
; EZ80-NEXT:    jp z, BB37_30
; EZ80-NEXT:  BB37_25:
; EZ80-NEXT:    bit 0, e
; EZ80-NEXT:    jp z, BB37_31
; EZ80-NEXT:  BB37_26:
; EZ80-NEXT:    bit 0, e
; EZ80-NEXT:    jr nz, BB37_28
; EZ80-NEXT:  BB37_27:
; EZ80-NEXT:    ld de, 32767
; EZ80-NEXT:    ld bc, -228
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), de
; EZ80-NEXT:  BB37_28:
; EZ80-NEXT:    ld bc, -228
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld de, (iy)
; EZ80-NEXT:    ld c, e
; EZ80-NEXT:    ld b, d
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -231
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB37_29:
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    bit 0, e
; EZ80-NEXT:    jp nz, BB37_25
; EZ80-NEXT:  BB37_30:
; EZ80-NEXT:    scf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    bit 0, e
; EZ80-NEXT:    jp nz, BB37_26
; EZ80-NEXT:  BB37_31:
; EZ80-NEXT:    ld bc, -1
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld de, -231
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld (iy), bc
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    bit 0, e
; EZ80-NEXT:    jp z, BB37_27
; EZ80-NEXT:    jp BB37_28
  call i64 @llvm.smul.fix.sat.i64(i64 %0, i64 %1, i32 31)
  ret i64 %3
}

declare i8 @llvm.umul.fix.sat.i8(i8, i8, i32 immarg)
define i8 @umul.fix.sat.i8.8(i8, i8) {
; Z80-LABEL: umul.fix.sat.i8.8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld d, 0
; Z80-NEXT:    ld e, (iy + 2)
; Z80-NEXT:    ld b, d
; Z80-NEXT:    ld c, (iy + 4)
; Z80-NEXT:    ld l, e
; Z80-NEXT:    ld h, d
; Z80-NEXT:    call __smulu
; Z80-NEXT:    ld e, h
; Z80-NEXT:    ld bc, 255
; Z80-NEXT:    ld l, e
; Z80-NEXT:    ld h, d
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    jr c, BB38_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld de, 255
; Z80-NEXT:  BB38_2:
; Z80-NEXT:    ld a, e
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: umul.fix.sat.i8.8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld d, 0
; EZ80-CODE16-NEXT:    ld e, (iy + 2)
; EZ80-CODE16-NEXT:    ld b, d
; EZ80-CODE16-NEXT:    ld c, (iy + 4)
; EZ80-CODE16-NEXT:    ld l, e
; EZ80-CODE16-NEXT:    ld h, d
; EZ80-CODE16-NEXT:    call __smulu
; EZ80-CODE16-NEXT:    ld e, h
; EZ80-CODE16-NEXT:    ld bc, 255
; EZ80-CODE16-NEXT:    ld l, e
; EZ80-CODE16-NEXT:    ld h, d
; EZ80-CODE16-NEXT:    or a, a
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    jr c, BB38_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld de, 255
; EZ80-CODE16-NEXT:  BB38_2:
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: umul.fix.sat.i8.8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld d, 0
; EZ80-NEXT:    ld e, (iy + 3)
; EZ80-NEXT:    ld b, d
; EZ80-NEXT:    ld c, (iy + 6)
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:    call __smulu
; EZ80-NEXT:    ld e, h
; EZ80-NEXT:    ld.sis bc, 255
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, bc
; EZ80-NEXT:    jr c, BB38_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld.sis de, 255
; EZ80-NEXT:  BB38_2:
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ret
  call i8 @llvm.umul.fix.sat.i8(i8 %0, i8 %1, i32 8)
  ret i8 %3
}
declare i16 @llvm.umul.fix.sat.i16(i16, i16, i32 immarg)
define i16 @umul.fix.sat.i16.8(i16, i16) {
; Z80-LABEL: umul.fix.sat.i16.8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld c, (iy + 4)
; Z80-NEXT:    ld b, (iy + 5)
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld a, 8
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    call __lshru
; Z80-NEXT:    ld bc, -1
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __lcmpu
; Z80-NEXT:    jr c, BB39_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:  BB39_2:
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: umul.fix.sat.i16.8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld bc, (iy + 4)
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld a, 8
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    call __lshru
; EZ80-CODE16-NEXT:    ld bc, -1
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __lcmpu
; EZ80-CODE16-NEXT:    jr c, BB39_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:  BB39_2:
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: umul.fix.sat.i16.8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld de, (iy + 3)
; EZ80-NEXT:    ld iy, (iy + 6)
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:    ld d, 0
; EZ80-NEXT:    ld bc, 0
; EZ80-NEXT:    ld c, iyl
; EZ80-NEXT:    ld b, iyh
; EZ80-NEXT:    ld e, d
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld l, 8
; EZ80-NEXT:    call __lshru
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld bc, 65535
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __lcmpu
; EZ80-NEXT:    jr c, BB39_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:  BB39_2:
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    ret
  call i16 @llvm.umul.fix.sat.i16(i16 %0, i16 %1, i32 8)
  ret i16 %3
}
define i16 @umul.fix.sat.i16.16(i16, i16) {
; Z80-LABEL: umul.fix.sat.i16.16:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld c, (iy + 4)
; Z80-NEXT:    ld b, (iy + 5)
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld a, 16
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    call __lshru
; Z80-NEXT:    ld bc, -1
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __lcmpu
; Z80-NEXT:    jr c, BB40_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:  BB40_2:
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: umul.fix.sat.i16.16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld bc, (iy + 4)
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld a, 16
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    call __lshru
; EZ80-CODE16-NEXT:    ld bc, -1
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __lcmpu
; EZ80-CODE16-NEXT:    jr c, BB40_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:  BB40_2:
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: umul.fix.sat.i16.16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld de, (iy + 3)
; EZ80-NEXT:    ld iy, (iy + 6)
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:    ld d, 0
; EZ80-NEXT:    ld bc, 0
; EZ80-NEXT:    ld c, iyl
; EZ80-NEXT:    ld b, iyh
; EZ80-NEXT:    ld e, d
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld l, 16
; EZ80-NEXT:    call __lshru
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld bc, 65535
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __lcmpu
; EZ80-NEXT:    jr c, BB40_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:  BB40_2:
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    ret
  call i16 @llvm.umul.fix.sat.i16(i16 %0, i16 %1, i32 16)
  ret i16 %3
}
declare i32 @llvm.umul.fix.sat.i32(i32, i32, i32 immarg)
define i32 @umul.fix.sat.i32.16(i32, i32) {
; Z80-LABEL: umul.fix.sat.i32.16:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -6
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 16
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 6), c
; Z80-NEXT:    ld (ix - 5), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop bc
; Z80-NEXT:    pop bc
; Z80-NEXT:    ld iy, -1
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    push iy
; Z80-NEXT:    push iy
; Z80-NEXT:    ld c, (ix - 2)
; Z80-NEXT:    ld b, (ix - 1)
; Z80-NEXT:    push bc
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld (ix - 4), e
; Z80-NEXT:    ld (ix - 3), d
; Z80-NEXT:    ld c, (ix - 6)
; Z80-NEXT:    ld b, (ix - 5)
; Z80-NEXT:    call __llcmpu
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 6), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld iy, 10
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld sp, iy
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    ccf
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    inc a
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB41_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:  BB41_2:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    jr nz, BB41_4
; Z80-NEXT:  ; %bb.3:
; Z80-NEXT:    ld de, -1
; Z80-NEXT:  BB41_4:
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: umul.fix.sat.i32.16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 4
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld iy, (ix + 8)
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 16
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld (ix - 2), bc
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    ld bc, (ix - 2)
; EZ80-CODE16-NEXT:    call __llcmpu
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 2), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld iy, 10
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld sp, iy
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 2)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    inc a
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB41_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:  BB41_2:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB41_4
; EZ80-CODE16-NEXT:  ; %bb.3:
; EZ80-CODE16-NEXT:    ld de, -1
; EZ80-CODE16-NEXT:  BB41_4:
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: umul.fix.sat.i32.16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    dec sp
; EZ80-NEXT:    ld hl, (ix + 12)
; EZ80-NEXT:    ld a, (ix + 15)
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld c, (ix + 9)
; EZ80-NEXT:    ld.sis iy, 0
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld c, iyl
; EZ80-NEXT:    ld b, iyh
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 16
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld iy, 255
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld iy, -1
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llcmpu
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 1), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 1)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ccf
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    inc a
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB41_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    scf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:  BB41_2:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB41_4
; EZ80-NEXT:  ; %bb.3:
; EZ80-NEXT:    ld de, 255
; EZ80-NEXT:  BB41_4:
; EZ80-NEXT:    inc sp
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i32 @llvm.umul.fix.sat.i32(i32 %0, i32 %1, i32 16)
  ret i32 %3
}
define i32 @umul.fix.sat.i32.32(i32, i32) {
; Z80-LABEL: umul.fix.sat.i32.32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -6
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 6), c
; Z80-NEXT:    ld (ix - 5), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop bc
; Z80-NEXT:    pop bc
; Z80-NEXT:    ld iy, -1
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    push iy
; Z80-NEXT:    push iy
; Z80-NEXT:    ld c, (ix - 2)
; Z80-NEXT:    ld b, (ix - 1)
; Z80-NEXT:    push bc
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld (ix - 4), e
; Z80-NEXT:    ld (ix - 3), d
; Z80-NEXT:    ld c, (ix - 6)
; Z80-NEXT:    ld b, (ix - 5)
; Z80-NEXT:    call __llcmpu
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 6), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld iy, 10
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld sp, iy
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    ccf
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    inc a
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB42_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:  BB42_2:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    jr nz, BB42_4
; Z80-NEXT:  ; %bb.3:
; Z80-NEXT:    ld de, -1
; Z80-NEXT:  BB42_4:
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: umul.fix.sat.i32.32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 4
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld iy, (ix + 8)
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld (ix - 2), bc
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    ld bc, (ix - 2)
; EZ80-CODE16-NEXT:    call __llcmpu
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 2), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld iy, 10
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld sp, iy
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 2)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    inc a
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB42_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:  BB42_2:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB42_4
; EZ80-CODE16-NEXT:  ; %bb.3:
; EZ80-CODE16-NEXT:    ld de, -1
; EZ80-CODE16-NEXT:  BB42_4:
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: umul.fix.sat.i32.32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    dec sp
; EZ80-NEXT:    ld hl, (ix + 12)
; EZ80-NEXT:    ld a, (ix + 15)
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld c, (ix + 9)
; EZ80-NEXT:    ld.sis iy, 0
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld c, iyl
; EZ80-NEXT:    ld b, iyh
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld iy, 255
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld iy, -1
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llcmpu
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 1), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 1)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ccf
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    inc a
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB42_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    scf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:  BB42_2:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB42_4
; EZ80-NEXT:  ; %bb.3:
; EZ80-NEXT:    ld de, 255
; EZ80-NEXT:  BB42_4:
; EZ80-NEXT:    inc sp
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i32 @llvm.umul.fix.sat.i32(i32 %0, i32 %1, i32 32)
  ret i32 %3
}
declare i64 @llvm.umul.fix.sat.i64(i64, i64, i32 immarg)
define i64 @umul.fix.sat.i64.32(i64, i64) {
; Z80-LABEL: umul.fix.sat.i64.32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -44
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 12)
; Z80-NEXT:    ld b, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 6), l
; Z80-NEXT:    ld (ix - 5), h
; Z80-NEXT:    ld (ix - 8), e
; Z80-NEXT:    ld (ix - 7), d
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    ld c, (ix + 12)
; Z80-NEXT:    ld b, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld (ix - 2), e
; Z80-NEXT:    ld (ix - 1), d
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 16)
; Z80-NEXT:    ld b, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 12), l
; Z80-NEXT:    ld (ix - 11), h
; Z80-NEXT:    ld (ix - 10), e
; Z80-NEXT:    ld (ix - 9), d
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 14), l
; Z80-NEXT:    ld (ix - 13), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 14)
; Z80-NEXT:    ld h, (ix - 13)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 16), l
; Z80-NEXT:    ld (ix - 15), h
; Z80-NEXT:    ld (ix - 14), e
; Z80-NEXT:    ld (ix - 13), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    ld e, (ix - 12)
; Z80-NEXT:    ld d, (ix - 11)
; Z80-NEXT:    add hl, de
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld c, (ix - 10)
; Z80-NEXT:    ld b, (ix - 9)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    inc iy
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, (ix - 16)
; Z80-NEXT:    ld d, (ix - 15)
; Z80-NEXT:    add hl, de
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    ld e, (ix - 14)
; Z80-NEXT:    ld d, (ix - 13)
; Z80-NEXT:    adc hl, de
; Z80-NEXT:    ld (ix - 16), l
; Z80-NEXT:    ld (ix - 15), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    inc bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld (ix - 12), l
; Z80-NEXT:    ld (ix - 11), h
; Z80-NEXT:    ld (ix - 10), e
; Z80-NEXT:    ld (ix - 9), d
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    ld l, e
; Z80-NEXT:    ld h, d
; Z80-NEXT:    ld c, (ix + 12)
; Z80-NEXT:    ld b, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld (ix - 14), e
; Z80-NEXT:    ld (ix - 13), d
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    ld c, (ix + 16)
; Z80-NEXT:    ld b, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 22), l
; Z80-NEXT:    ld (ix - 21), h
; Z80-NEXT:    ld (ix - 18), e
; Z80-NEXT:    ld (ix - 17), d
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 24), l
; Z80-NEXT:    ld (ix - 23), h
; Z80-NEXT:    ld (ix - 20), e
; Z80-NEXT:    ld (ix - 19), d
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 26), l
; Z80-NEXT:    ld (ix - 25), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 26)
; Z80-NEXT:    ld h, (ix - 25)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 28), l
; Z80-NEXT:    ld (ix - 27), h
; Z80-NEXT:    ld (ix - 26), e
; Z80-NEXT:    ld (ix - 25), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 16)
; Z80-NEXT:    ld h, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 30), l
; Z80-NEXT:    ld (ix - 29), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 30)
; Z80-NEXT:    ld h, (ix - 29)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 32), l
; Z80-NEXT:    ld (ix - 31), h
; Z80-NEXT:    ld (ix - 30), e
; Z80-NEXT:    ld (ix - 29), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld e, (ix - 22)
; Z80-NEXT:    ld d, (ix - 21)
; Z80-NEXT:    add iy, de
; Z80-NEXT:    ld l, (ix - 14)
; Z80-NEXT:    ld h, (ix - 13)
; Z80-NEXT:    ld e, (ix - 18)
; Z80-NEXT:    ld d, (ix - 17)
; Z80-NEXT:    adc hl, de
; Z80-NEXT:    ld (ix - 14), l
; Z80-NEXT:    ld (ix - 13), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    inc de
; Z80-NEXT:    ld c, (ix - 24)
; Z80-NEXT:    ld b, (ix - 23)
; Z80-NEXT:    add iy, bc
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix - 14)
; Z80-NEXT:    ld h, (ix - 13)
; Z80-NEXT:    ld c, (ix - 20)
; Z80-NEXT:    ld b, (ix - 19)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld (ix - 14), l
; Z80-NEXT:    ld (ix - 13), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    inc bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld c, (ix - 28)
; Z80-NEXT:    ld b, (ix - 27)
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld l, (ix - 14)
; Z80-NEXT:    ld h, (ix - 13)
; Z80-NEXT:    ld c, (ix - 26)
; Z80-NEXT:    ld b, (ix - 25)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld (ix - 14), l
; Z80-NEXT:    ld (ix - 13), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    inc bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld c, (ix - 32)
; Z80-NEXT:    ld b, (ix - 31)
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld l, (ix - 14)
; Z80-NEXT:    ld h, (ix - 13)
; Z80-NEXT:    ld c, (ix - 30)
; Z80-NEXT:    ld b, (ix - 29)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld (ix - 14), l
; Z80-NEXT:    ld (ix - 13), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    inc bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld c, (ix - 12)
; Z80-NEXT:    ld b, (ix - 11)
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld l, (ix - 14)
; Z80-NEXT:    ld h, (ix - 13)
; Z80-NEXT:    ld c, (ix - 10)
; Z80-NEXT:    ld b, (ix - 9)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    inc bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld (ix - 12), l
; Z80-NEXT:    ld (ix - 11), h
; Z80-NEXT:    ld (ix - 14), e
; Z80-NEXT:    ld (ix - 13), d
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    ld l, e
; Z80-NEXT:    ld h, d
; Z80-NEXT:    ld c, (ix + 12)
; Z80-NEXT:    ld b, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 18), l
; Z80-NEXT:    ld (ix - 17), h
; Z80-NEXT:    ld (ix - 20), e
; Z80-NEXT:    ld (ix - 19), d
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    ld l, e
; Z80-NEXT:    ld h, d
; Z80-NEXT:    ld c, (ix + 16)
; Z80-NEXT:    ld b, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 30), l
; Z80-NEXT:    ld (ix - 29), h
; Z80-NEXT:    ld (ix - 32), e
; Z80-NEXT:    ld (ix - 31), d
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 26), l
; Z80-NEXT:    ld (ix - 25), h
; Z80-NEXT:    ld (ix - 28), e
; Z80-NEXT:    ld (ix - 27), d
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 22), l
; Z80-NEXT:    ld (ix - 21), h
; Z80-NEXT:    ld (ix - 24), e
; Z80-NEXT:    ld (ix - 23), d
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    ld e, c
; Z80-NEXT:    ld d, b
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 34), l
; Z80-NEXT:    ld (ix - 33), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 34)
; Z80-NEXT:    ld h, (ix - 33)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 34), l
; Z80-NEXT:    ld (ix - 33), h
; Z80-NEXT:    ld (ix - 36), e
; Z80-NEXT:    ld (ix - 35), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 16)
; Z80-NEXT:    ld h, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 38), l
; Z80-NEXT:    ld (ix - 37), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 38)
; Z80-NEXT:    ld h, (ix - 37)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 38), l
; Z80-NEXT:    ld (ix - 37), h
; Z80-NEXT:    ld (ix - 40), e
; Z80-NEXT:    ld (ix - 39), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 42), l
; Z80-NEXT:    ld (ix - 41), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 42)
; Z80-NEXT:    ld h, (ix - 41)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 42), l
; Z80-NEXT:    ld (ix - 41), h
; Z80-NEXT:    ld (ix - 44), e
; Z80-NEXT:    ld (ix - 43), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ld h, (ix - 17)
; Z80-NEXT:    ld e, (ix - 20)
; Z80-NEXT:    ld d, (ix - 19)
; Z80-NEXT:    ld c, (ix - 30)
; Z80-NEXT:    ld b, (ix - 29)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 32)
; Z80-NEXT:    ld h, (ix - 31)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 26)
; Z80-NEXT:    ld b, (ix - 25)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 28)
; Z80-NEXT:    ld h, (ix - 27)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 22)
; Z80-NEXT:    ld b, (ix - 21)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 24)
; Z80-NEXT:    ld h, (ix - 23)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 34)
; Z80-NEXT:    ld b, (ix - 33)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 36)
; Z80-NEXT:    ld h, (ix - 35)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 38)
; Z80-NEXT:    ld b, (ix - 37)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 40)
; Z80-NEXT:    ld h, (ix - 39)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 42)
; Z80-NEXT:    ld b, (ix - 41)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 44)
; Z80-NEXT:    ld h, (ix - 43)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 12)
; Z80-NEXT:    ld b, (ix - 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 14)
; Z80-NEXT:    ld h, (ix - 13)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld (ix - 12), l
; Z80-NEXT:    ld (ix - 11), h
; Z80-NEXT:    ld (ix - 14), e
; Z80-NEXT:    ld (ix - 13), d
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 16)
; Z80-NEXT:    ld h, (ix - 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    ld e, (ix - 8)
; Z80-NEXT:    ld d, (ix - 7)
; Z80-NEXT:    ld c, (ix - 4)
; Z80-NEXT:    ld b, (ix - 3)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld (ix - 6), e
; Z80-NEXT:    ld (ix - 5), d
; Z80-NEXT:    ld (ix - 8), c
; Z80-NEXT:    ld (ix - 7), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 16), l
; Z80-NEXT:    ld (ix - 15), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 14)
; Z80-NEXT:    ld h, (ix - 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 10)
; Z80-NEXT:    ld d, (ix - 9)
; Z80-NEXT:    ld c, (ix - 12)
; Z80-NEXT:    ld b, (ix - 11)
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 18), l
; Z80-NEXT:    ld (ix - 17), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ld h, (ix - 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 16)
; Z80-NEXT:    ld h, (ix - 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    ld e, (ix - 6)
; Z80-NEXT:    ld d, (ix - 5)
; Z80-NEXT:    ld c, (ix - 8)
; Z80-NEXT:    ld b, (ix - 7)
; Z80-NEXT:    call __llor
; Z80-NEXT:    ld (ix - 16), l
; Z80-NEXT:    ld (ix - 15), h
; Z80-NEXT:    ld (ix - 4), e
; Z80-NEXT:    ld (ix - 3), d
; Z80-NEXT:    ld (ix - 6), c
; Z80-NEXT:    ld (ix - 5), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 14)
; Z80-NEXT:    ld h, (ix - 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 10)
; Z80-NEXT:    ld d, (ix - 9)
; Z80-NEXT:    ld c, (ix - 12)
; Z80-NEXT:    ld b, (ix - 11)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 14), l
; Z80-NEXT:    ld (ix - 13), h
; Z80-NEXT:    ld (ix - 2), e
; Z80-NEXT:    ld (ix - 1), d
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ld (ix - 12), e
; Z80-NEXT:    ld (ix - 11), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 14)
; Z80-NEXT:    ld h, (ix - 13)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, (ix - 2)
; Z80-NEXT:    ld d, (ix - 1)
; Z80-NEXT:    call __llcmpu
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    ccf
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    inc a
; Z80-NEXT:    ld (ix - 10), a
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 12)
; Z80-NEXT:    ld h, (ix - 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, (ix - 2)
; Z80-NEXT:    ld d, (ix - 1)
; Z80-NEXT:    call __llcmpu
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    jr z, BB43_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    jr BB43_3
; Z80-NEXT:  BB43_2:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:  BB43_3:
; Z80-NEXT:    ld (ix - 2), a
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 16)
; Z80-NEXT:    ld h, (ix - 15)
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    ld c, (ix - 6)
; Z80-NEXT:    ld b, (ix - 5)
; Z80-NEXT:    call __llcmpu
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 12), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld iy, 10
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld sp, iy
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 12)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld e, a
; Z80-NEXT:    ld a, (ix - 10)
; Z80-NEXT:    rrc a
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    bit 0, (ix - 2) ; 1-byte Folded Reload
; Z80-NEXT:    jp z, BB43_10
; Z80-NEXT:  ; %bb.4:
; Z80-NEXT:    bit 0, e
; Z80-NEXT:    jp z, BB43_11
; Z80-NEXT:  BB43_5:
; Z80-NEXT:    bit 0, e
; Z80-NEXT:    jp z, BB43_12
; Z80-NEXT:  BB43_6:
; Z80-NEXT:    bit 0, e
; Z80-NEXT:    jp z, BB43_13
; Z80-NEXT:  BB43_7:
; Z80-NEXT:    bit 0, e
; Z80-NEXT:    jr nz, BB43_9
; Z80-NEXT:  BB43_8:
; Z80-NEXT:    ld de, -1
; Z80-NEXT:    ld (ix - 8), e
; Z80-NEXT:    ld (ix - 7), d
; Z80-NEXT:  BB43_9:
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    ld c, (ix - 6)
; Z80-NEXT:    ld b, (ix - 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:  BB43_10:
; Z80-NEXT:    ld e, a
; Z80-NEXT:    bit 0, e
; Z80-NEXT:    jp nz, BB43_5
; Z80-NEXT:  BB43_11:
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:    bit 0, e
; Z80-NEXT:    jp nz, BB43_6
; Z80-NEXT:  BB43_12:
; Z80-NEXT:    ld bc, -1
; Z80-NEXT:    ld (ix - 4), c
; Z80-NEXT:    ld (ix - 3), b
; Z80-NEXT:    bit 0, e
; Z80-NEXT:    jp nz, BB43_7
; Z80-NEXT:  BB43_13:
; Z80-NEXT:    ld bc, -1
; Z80-NEXT:    ld (ix - 6), c
; Z80-NEXT:    ld (ix - 5), b
; Z80-NEXT:    bit 0, e
; Z80-NEXT:    jp z, BB43_8
; Z80-NEXT:    jp BB43_9
;
; EZ80-CODE16-LABEL: umul.fix.sat.i64.32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 44
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 12)
; EZ80-CODE16-NEXT:    ld iy, (ix + 14)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 6), hl
; EZ80-CODE16-NEXT:    ld (ix - 8), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    ld bc, (ix + 12)
; EZ80-CODE16-NEXT:    ld iy, (ix + 14)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld (ix - 2), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 16)
; EZ80-CODE16-NEXT:    ld iy, (ix + 18)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 12), hl
; EZ80-CODE16-NEXT:    ld (ix - 10), de
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 14)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 14), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 14)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 16), hl
; EZ80-CODE16-NEXT:    ld (ix - 14), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    ld de, (ix - 12)
; EZ80-CODE16-NEXT:    add hl, de
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld bc, (ix - 10)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    inc iy
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld de, (ix - 16)
; EZ80-CODE16-NEXT:    add hl, de
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    ld de, (ix - 14)
; EZ80-CODE16-NEXT:    adc hl, de
; EZ80-CODE16-NEXT:    ld (ix - 16), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld (ix - 12), hl
; EZ80-CODE16-NEXT:    ld (ix - 10), de
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    ld l, e
; EZ80-CODE16-NEXT:    ld h, d
; EZ80-CODE16-NEXT:    ld bc, (ix + 12)
; EZ80-CODE16-NEXT:    ld iy, (ix + 14)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld (ix - 14), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    ld bc, (ix + 16)
; EZ80-CODE16-NEXT:    ld iy, (ix + 18)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 22), hl
; EZ80-CODE16-NEXT:    ld (ix - 18), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 24), hl
; EZ80-CODE16-NEXT:    ld (ix - 20), de
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 14)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 26), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 26)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 28), hl
; EZ80-CODE16-NEXT:    ld (ix - 26), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 16)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 30), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 30)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 32), hl
; EZ80-CODE16-NEXT:    ld (ix - 30), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld iy, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 22)
; EZ80-CODE16-NEXT:    add iy, de
; EZ80-CODE16-NEXT:    ld hl, (ix - 14)
; EZ80-CODE16-NEXT:    ld de, (ix - 18)
; EZ80-CODE16-NEXT:    adc hl, de
; EZ80-CODE16-NEXT:    ld (ix - 14), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    inc de
; EZ80-CODE16-NEXT:    ld bc, (ix - 24)
; EZ80-CODE16-NEXT:    add iy, bc
; EZ80-CODE16-NEXT:    ld (ix - 2), iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 14)
; EZ80-CODE16-NEXT:    ld bc, (ix - 20)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 14), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld bc, (ix - 28)
; EZ80-CODE16-NEXT:    add hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 14)
; EZ80-CODE16-NEXT:    ld bc, (ix - 26)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 14), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld bc, (ix - 32)
; EZ80-CODE16-NEXT:    add hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 14)
; EZ80-CODE16-NEXT:    ld bc, (ix - 30)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 14), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld bc, (ix - 12)
; EZ80-CODE16-NEXT:    add hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 14)
; EZ80-CODE16-NEXT:    ld bc, (ix - 10)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 10), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld (ix - 12), hl
; EZ80-CODE16-NEXT:    ld (ix - 14), de
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    ld l, e
; EZ80-CODE16-NEXT:    ld h, d
; EZ80-CODE16-NEXT:    ld bc, (ix + 12)
; EZ80-CODE16-NEXT:    ld iy, (ix + 14)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 18), hl
; EZ80-CODE16-NEXT:    ld (ix - 20), de
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    ld l, e
; EZ80-CODE16-NEXT:    ld h, d
; EZ80-CODE16-NEXT:    ld bc, (ix + 16)
; EZ80-CODE16-NEXT:    ld iy, (ix + 18)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 30), hl
; EZ80-CODE16-NEXT:    ld (ix - 32), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 26), hl
; EZ80-CODE16-NEXT:    ld (ix - 28), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 22), hl
; EZ80-CODE16-NEXT:    ld (ix - 24), de
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 14)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    ld e, c
; EZ80-CODE16-NEXT:    ld d, b
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 34), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 34)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 34), hl
; EZ80-CODE16-NEXT:    ld (ix - 36), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 16)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 38), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 38)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 38), hl
; EZ80-CODE16-NEXT:    ld (ix - 40), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 42), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 42)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 42), hl
; EZ80-CODE16-NEXT:    ld (ix - 44), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 18)
; EZ80-CODE16-NEXT:    ld de, (ix - 20)
; EZ80-CODE16-NEXT:    ld bc, (ix - 30)
; EZ80-CODE16-NEXT:    ld iy, (ix - 32)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 26)
; EZ80-CODE16-NEXT:    ld iy, (ix - 28)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 22)
; EZ80-CODE16-NEXT:    ld iy, (ix - 24)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 34)
; EZ80-CODE16-NEXT:    ld iy, (ix - 36)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 38)
; EZ80-CODE16-NEXT:    ld iy, (ix - 40)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 42)
; EZ80-CODE16-NEXT:    ld iy, (ix - 44)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 12)
; EZ80-CODE16-NEXT:    ld iy, (ix - 14)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld (ix - 12), hl
; EZ80-CODE16-NEXT:    ld (ix - 14), de
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 16)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 6)
; EZ80-CODE16-NEXT:    ld de, (ix - 8)
; EZ80-CODE16-NEXT:    ld bc, (ix - 4)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld (ix - 6), de
; EZ80-CODE16-NEXT:    ld (ix - 8), bc
; EZ80-CODE16-NEXT:    ld (ix - 16), iy
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 14)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 10)
; EZ80-CODE16-NEXT:    ld bc, (ix - 12)
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 18), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 16)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    ld de, (ix - 6)
; EZ80-CODE16-NEXT:    ld bc, (ix - 8)
; EZ80-CODE16-NEXT:    call __llor
; EZ80-CODE16-NEXT:    ld (ix - 16), hl
; EZ80-CODE16-NEXT:    ld (ix - 4), de
; EZ80-CODE16-NEXT:    ld (ix - 6), bc
; EZ80-CODE16-NEXT:    ld (ix - 8), iy
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 14)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 10)
; EZ80-CODE16-NEXT:    ld bc, (ix - 12)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 14), hl
; EZ80-CODE16-NEXT:    ld (ix - 2), de
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    ld (ix - 12), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld iy, (ix - 14)
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld de, (ix - 2)
; EZ80-CODE16-NEXT:    call __llcmpu
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 10), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 10)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    inc a
; EZ80-CODE16-NEXT:    ld (ix - 10), a
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld de, (ix - 2)
; EZ80-CODE16-NEXT:    call __llcmpu
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 2), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 2)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    jr z, BB43_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    jr BB43_3
; EZ80-CODE16-NEXT:  BB43_2:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:  BB43_3:
; EZ80-CODE16-NEXT:    ld (ix - 2), a
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 16)
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    ld bc, (ix - 6)
; EZ80-CODE16-NEXT:    call __llcmpu
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 12), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld iy, 10
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld sp, iy
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 12)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld e, a
; EZ80-CODE16-NEXT:    ld a, (ix - 10)
; EZ80-CODE16-NEXT:    rrc a
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    bit 0, (ix - 2) ; 1-byte Folded Reload
; EZ80-CODE16-NEXT:    jp z, BB43_10
; EZ80-CODE16-NEXT:  ; %bb.4:
; EZ80-CODE16-NEXT:    bit 0, e
; EZ80-CODE16-NEXT:    jp z, BB43_11
; EZ80-CODE16-NEXT:  BB43_5:
; EZ80-CODE16-NEXT:    bit 0, e
; EZ80-CODE16-NEXT:    jp z, BB43_12
; EZ80-CODE16-NEXT:  BB43_6:
; EZ80-CODE16-NEXT:    bit 0, e
; EZ80-CODE16-NEXT:    jp z, BB43_13
; EZ80-CODE16-NEXT:  BB43_7:
; EZ80-CODE16-NEXT:    bit 0, e
; EZ80-CODE16-NEXT:    jr nz, BB43_9
; EZ80-CODE16-NEXT:  BB43_8:
; EZ80-CODE16-NEXT:    ld de, -1
; EZ80-CODE16-NEXT:    ld (ix - 8), de
; EZ80-CODE16-NEXT:  BB43_9:
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    ld bc, (ix - 6)
; EZ80-CODE16-NEXT:    ld iy, (ix - 8)
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
; EZ80-CODE16-NEXT:  BB43_10:
; EZ80-CODE16-NEXT:    ld e, a
; EZ80-CODE16-NEXT:    bit 0, e
; EZ80-CODE16-NEXT:    jp nz, BB43_5
; EZ80-CODE16-NEXT:  BB43_11:
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:    bit 0, e
; EZ80-CODE16-NEXT:    jp nz, BB43_6
; EZ80-CODE16-NEXT:  BB43_12:
; EZ80-CODE16-NEXT:    ld bc, -1
; EZ80-CODE16-NEXT:    ld (ix - 4), bc
; EZ80-CODE16-NEXT:    bit 0, e
; EZ80-CODE16-NEXT:    jp nz, BB43_7
; EZ80-CODE16-NEXT:  BB43_13:
; EZ80-CODE16-NEXT:    ld bc, -1
; EZ80-CODE16-NEXT:    ld (ix - 6), bc
; EZ80-CODE16-NEXT:    bit 0, e
; EZ80-CODE16-NEXT:    jp z, BB43_8
; EZ80-CODE16-NEXT:    jp BB43_9
;
; EZ80-LABEL: umul.fix.sat.i64.32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, -203
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld de, (ix + 12)
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    ld iyl, e
; EZ80-NEXT:    ld iyh, d
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld de, (ix + 21)
; EZ80-NEXT:    ld c, e
; EZ80-NEXT:    ld b, d
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -144
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix + 9)
; EZ80-NEXT:    ld l, c
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ld bc, -135
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), de
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -129
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld.sis hl, (ix - 128)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -172
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 18)
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -138
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), a
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 126), hl
; EZ80-NEXT:    ld.sis hl, (ix - 125)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -160
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ; kill: def $e killed $e killed $ude
; EZ80-NEXT:    ld bc, (ix + 15)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -138
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -163
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ; kill: def $e killed $e def $ude
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -166
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ld (ix - 123), hl
; EZ80-NEXT:    ld.sis hl, (ix - 122)
; EZ80-NEXT:    ld a, iyl
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -150
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), a
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 120), hl
; EZ80-NEXT:    ld (ix - 118), a
; EZ80-NEXT:    ld hl, (ix - 120)
; EZ80-NEXT:    ld e, iyh
; EZ80-NEXT:    ld bc, -147
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), e
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (ix + 15)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -138
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld d, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -141
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -132
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 18)
; EZ80-NEXT:    ld (ix - 117), hl
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld.sis bc, (ix - 116)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld de, -144
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -156
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), a
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 114), bc
; EZ80-NEXT:    ld (ix - 112), a
; EZ80-NEXT:    ld bc, (ix - 114)
; EZ80-NEXT:    ld a, h
; EZ80-NEXT:    dec de
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -135
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld iy, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -169
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -144
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld l, d
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -153
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    lea de, iy
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld bc, -175
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld bc, -178
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -141
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld iy, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -169
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -132
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -144
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    adc a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    inc de
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -175
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -141
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), iy
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, -178
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    push af
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    pop af
; EZ80-NEXT:    adc a, (iy) ; 1-byte Folded Reload
; EZ80-NEXT:    ld h, a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -169
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld iyh, 0
; EZ80-NEXT:    ld e, iyh
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ld bc, -181
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -178
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld l, 0
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, 0
; EZ80-NEXT:    ld iyl, c
; EZ80-NEXT:    ld iyh, b
; EZ80-NEXT:    ld (ix - 111), hl
; EZ80-NEXT:    ld.sis (ix - 110), iy
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld de, -144
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld (hl), iy
; EZ80-NEXT:    ld hl, (ix - 111)
; EZ80-NEXT:    ld (ix - 108), bc
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld e, (ix - 106)
; EZ80-NEXT:    ld bc, (ix + 15)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -138
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -132
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -188
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ld (ix - 105), hl
; EZ80-NEXT:    ld.sis hl, (ix - 104)
; EZ80-NEXT:    ld (ix - 102), hl
; EZ80-NEXT:    ld bc, -150
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld a, (hl)
; EZ80-NEXT:    ld (ix - 100), a
; EZ80-NEXT:    ld hl, (ix - 102)
; EZ80-NEXT:    ld de, (ix + 18)
; EZ80-NEXT:    ld (ix - 99), de
; EZ80-NEXT:    ld.sis de, (ix - 98)
; EZ80-NEXT:    ld (ix - 96), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -156
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 94), a
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (ix - 96)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -147
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld e, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -157
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -194
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -191
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld l, 0
; EZ80-NEXT:    ld (ix - 93), hl
; EZ80-NEXT:    ld.sis (ix - 92), iy
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (ix - 93)
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    ld (ix - 90), iy
; EZ80-NEXT:    ld a, (ix - 88)
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -135
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ; kill: def $e killed $e killed $ude
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -198
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -195
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 12)
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -172
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 87), de
; EZ80-NEXT:    ld (ix - 85), a
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (ix - 87)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -175
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld a, h
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ld bc, -172
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), de
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld bc, -153
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld hl, (iy)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld bc, -201
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    dec bc
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    ld hl, (ix + 21)
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -160
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 84), de
; EZ80-NEXT:    ld (ix - 82), a
; EZ80-NEXT:    ld de, (ix - 84)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -184
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld a, h
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -187
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, 0
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -135
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld bc, -160
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld bc, -203
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -132
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld iy, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -194
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -188
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -191
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    adc a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    inc de
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -198
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -132
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), iy
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, -195
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    push af
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    pop af
; EZ80-NEXT:    adc a, (iy) ; 1-byte Folded Reload
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -188
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), a ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld iyh, 0
; EZ80-NEXT:    ld e, iyh
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -201
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -132
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -132
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, -188
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    push af
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld a, (hl) ; 1-byte Folded Reload
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -202
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    adc a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld d, a
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld iyh, 0
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -160
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -132
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -132
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    ld bc, -203
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    push af
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    adc a, (hl) ; 1-byte Folded Reload
; EZ80-NEXT:    ld d, a
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld iyh, 0
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -181
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -132
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -132
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    ld bc, -178
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    push af
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    adc a, (hl) ; 1-byte Folded Reload
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -160
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld iyh, 0
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -178
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -181
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld e, iyh
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (ix + 15)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ld bc, -138
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld a, (iy) ; 1-byte Folded Reload
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -138
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -188
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld l, 0
; EZ80-NEXT:    ld (ix - 81), hl
; EZ80-NEXT:    ld bc, -144
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld iy, (hl)
; EZ80-NEXT:    ld.sis (ix - 80), iy
; EZ80-NEXT:    ld hl, (ix - 81)
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    ld (ix - 78), de
; EZ80-NEXT:    ld e, (ix - 76)
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (ix + 18)
; EZ80-NEXT:    ld (ix - 75), bc
; EZ80-NEXT:    ld.sis bc, (ix - 74)
; EZ80-NEXT:    ld (ix - 72), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -156
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 70), a
; EZ80-NEXT:    ld bc, (ix - 72)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -157
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -156
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    dec bc
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ld (ix - 69), hl
; EZ80-NEXT:    ld.sis hl, (ix - 68)
; EZ80-NEXT:    ld (ix - 66), hl
; EZ80-NEXT:    ld bc, -150
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld a, (hl)
; EZ80-NEXT:    ld (ix - 64), a
; EZ80-NEXT:    ld hl, (ix - 66)
; EZ80-NEXT:    ld e, d
; EZ80-NEXT:    ld (ix - 63), de
; EZ80-NEXT:    ld.sis (ix - 62), iy
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (ix - 63)
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    ld (ix - 60), iy
; EZ80-NEXT:    ld a, (ix - 58)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -147
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld e, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -191
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -194
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -135
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ; kill: def $e killed $e killed $ude
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ld bc, -147
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -150
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    push de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -153
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld bc, -153
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld bc, -195
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -187
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -184
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -175
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -172
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld bc, -172
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld bc, -175
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -135
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld d, e
; EZ80-NEXT:    ld bc, -138
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -188
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld e, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -156
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    dec de
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -191
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -194
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -147
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -150
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -153
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -195
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -172
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -175
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld de, -178
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld bc, (iy)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -181
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld h, e
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -135
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, -141
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld bc, (hl)
; EZ80-NEXT:    ld l, c
; EZ80-NEXT:    ld h, b
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -166
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 57), de
; EZ80-NEXT:    ld.sis (ix - 56), hl
; EZ80-NEXT:    ld de, (ix - 57)
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld (ix - 54), bc
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld de, -169
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld bc, (hl)
; EZ80-NEXT:    ld c, (ix - 52)
; EZ80-NEXT:    ld hl, 32
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld de, -163
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -138
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -141
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -150
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld de, -147
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld (hl), iy
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld d, iyh
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -153
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -160
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 51), hl
; EZ80-NEXT:    ld.sis (ix - 50), de
; EZ80-NEXT:    ld de, (ix - 51)
; EZ80-NEXT:    ld (ix - 48), iy
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld de, -135
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld bc, (hl)
; EZ80-NEXT:    ld c, (ix - 46)
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld (iy), bc
; EZ80-NEXT:    ld hl, 32
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld de, -132
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -138
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld bc, -141
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld de, (iy)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -150
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __llor
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -150
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -138
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -141
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld bc, -160
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld (ix - 45), hl
; EZ80-NEXT:    ld bc, -153
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld.sis (ix - 44), hl
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld de, (ix - 45)
; EZ80-NEXT:    ld bc, -147
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld (ix - 42), hl
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld de, -135
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld bc, (hl)
; EZ80-NEXT:    ld c, (ix - 40)
; EZ80-NEXT:    ld hl, 32
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld de, -132
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -132
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -135
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -147
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 65535
; EZ80-NEXT:    ld (ix - 39), hl
; EZ80-NEXT:    ld l, (ix - 37)
; EZ80-NEXT:    ld (ix - 36), hl
; EZ80-NEXT:    ld de, -144
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld.sis (ix - 35), hl
; EZ80-NEXT:    ld bc, (ix - 36)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    ld (ix - 33), de
; EZ80-NEXT:    push af
; EZ80-NEXT:    ld a, (ix - 31)
; EZ80-NEXT:    ld iyl, a
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix - 30), iy
; EZ80-NEXT:    ld.sis (ix - 29), hl
; EZ80-NEXT:    ld hl, (ix - 30)
; EZ80-NEXT:    ld (ix - 27), de
; EZ80-NEXT:    ld iyh, d
; EZ80-NEXT:    push af
; EZ80-NEXT:    ld a, (ix - 25)
; EZ80-NEXT:    ld iyl, a
; EZ80-NEXT:    pop af
; EZ80-NEXT:    push iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    ld bc, -132
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -135
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -147
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __llcmpu
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -153
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), l
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld l, (hl)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ccf
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    inc a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), a
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, 65535
; EZ80-NEXT:    ld (ix - 24), hl
; EZ80-NEXT:    ld l, (ix - 22)
; EZ80-NEXT:    ld (ix - 21), hl
; EZ80-NEXT:    ld de, -144
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld bc, (hl)
; EZ80-NEXT:    ld.sis (ix - 20), bc
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld de, (ix - 21)
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld (ix - 18), hl
; EZ80-NEXT:    ld l, (ix - 16)
; EZ80-NEXT:    ld (ix - 15), hl
; EZ80-NEXT:    ld.sis (ix - 14), bc
; EZ80-NEXT:    ld hl, (ix - 15)
; EZ80-NEXT:    ld bc, 0
; EZ80-NEXT:    ld (ix - 12), bc
; EZ80-NEXT:    push af
; EZ80-NEXT:    ld a, (ix - 10)
; EZ80-NEXT:    ld iyl, a
; EZ80-NEXT:    pop af
; EZ80-NEXT:    push iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld bc, -132
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld bc, -135
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld de, (iy)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -147
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __llcmpu
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -135
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), l
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld l, (hl)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    jr z, BB43_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    jr BB43_3
; EZ80-NEXT:  BB43_2:
; EZ80-NEXT:    ld a, 1
; EZ80-NEXT:  BB43_3:
; EZ80-NEXT:    ld bc, -135
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    ld hl, 65535
; EZ80-NEXT:    push hl
; EZ80-NEXT:    scf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -150
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld bc, -138
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld de, (iy)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -141
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __llcmpu
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -144
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), l
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld l, (iy)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -153
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    rrc a
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -135
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    bit 0, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    jr nz, BB43_5
; EZ80-NEXT:  ; %bb.4:
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:  BB43_5:
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ld bc, -132
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld de, (iy)
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -141
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 9), de
; EZ80-NEXT:    ld (ix - 7), a
; EZ80-NEXT:    ld iy, (ix - 9)
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    bit 0, c
; EZ80-NEXT:    jp z, BB43_10
; EZ80-NEXT:  ; %bb.6:
; EZ80-NEXT:    bit 0, c
; EZ80-NEXT:    jp z, BB43_11
; EZ80-NEXT:  BB43_7:
; EZ80-NEXT:    bit 0, c
; EZ80-NEXT:    jr nz, BB43_9
; EZ80-NEXT:  BB43_8:
; EZ80-NEXT:    ld de, 65535
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop iy
; EZ80-NEXT:  BB43_9:
; EZ80-NEXT:    ld c, iyl
; EZ80-NEXT:    ld b, iyh
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ld bc, -138
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld de, (iy)
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB43_10:
; EZ80-NEXT:    scf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    bit 0, c
; EZ80-NEXT:    jp nz, BB43_7
; EZ80-NEXT:  BB43_11:
; EZ80-NEXT:    ld de, -1
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -138
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    bit 0, c
; EZ80-NEXT:    jp z, BB43_8
; EZ80-NEXT:    jp BB43_9
  call i64 @llvm.umul.fix.sat.i64(i64 %0, i64 %1, i32 32)
  ret i64 %3
}

declare i8 @llvm.sdiv.fix.sat.i8(i8, i8, i32 immarg)
define i8 @sdiv.fix.sat.i8.7(i8, i8) {
; Z80-LABEL: sdiv.fix.sat.i8.7:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld d, (iy + 2)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld c, 7
; Z80-NEXT:    ld a, d
; Z80-NEXT:    rlc a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld h, a
; Z80-NEXT:    ld l, d
; Z80-NEXT:    call __sshl
; Z80-NEXT:    ld a, e
; Z80-NEXT:    rlc a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld b, a
; Z80-NEXT:    ld c, e
; Z80-NEXT:    call __sdivs
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    ld bc, -32768
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld bc, 32641
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    jr nc, BB44_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld de, -128
; Z80-NEXT:  BB44_2:
; Z80-NEXT:    ld l, e
; Z80-NEXT:    ld h, d
; Z80-NEXT:    ld bc, -32768
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld bc, -32641
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    jr c, BB44_4
; Z80-NEXT:  ; %bb.3:
; Z80-NEXT:    ld de, 127
; Z80-NEXT:  BB44_4:
; Z80-NEXT:    ld a, e
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: sdiv.fix.sat.i8.7:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld d, (iy + 2)
; EZ80-CODE16-NEXT:    ld e, (iy + 4)
; EZ80-CODE16-NEXT:    ld c, 7
; EZ80-CODE16-NEXT:    ld a, d
; EZ80-CODE16-NEXT:    rlc a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld h, a
; EZ80-CODE16-NEXT:    ld l, d
; EZ80-CODE16-NEXT:    call __sshl
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    rlc a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld b, a
; EZ80-CODE16-NEXT:    ld c, e
; EZ80-CODE16-NEXT:    call __sdivs
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    ld bc, -32768
; EZ80-CODE16-NEXT:    add hl, bc
; EZ80-CODE16-NEXT:    ld bc, 32641
; EZ80-CODE16-NEXT:    or a, a
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    jr nc, BB44_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld de, -128
; EZ80-CODE16-NEXT:  BB44_2:
; EZ80-CODE16-NEXT:    ld l, e
; EZ80-CODE16-NEXT:    ld h, d
; EZ80-CODE16-NEXT:    ld bc, -32768
; EZ80-CODE16-NEXT:    add hl, bc
; EZ80-CODE16-NEXT:    ld bc, -32641
; EZ80-CODE16-NEXT:    or a, a
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    jr c, BB44_4
; EZ80-CODE16-NEXT:  ; %bb.3:
; EZ80-CODE16-NEXT:    ld de, 127
; EZ80-CODE16-NEXT:  BB44_4:
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: sdiv.fix.sat.i8.7:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld d, (iy + 3)
; EZ80-NEXT:    ld e, (iy + 6)
; EZ80-NEXT:    ld c, 7
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    rlc a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ld h, a
; EZ80-NEXT:    ld l, d
; EZ80-NEXT:    call __sshl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    rlc a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ld b, a
; EZ80-NEXT:    ld c, e
; EZ80-NEXT:    call __sdivs
; EZ80-NEXT:    ld e, l
; EZ80-NEXT:    ld d, h
; EZ80-NEXT:    ld.sis bc, -32768
; EZ80-NEXT:    add.sis hl, bc
; EZ80-NEXT:    ld.sis bc, 32641
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, bc
; EZ80-NEXT:    jr nc, BB44_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld.sis de, -128
; EZ80-NEXT:  BB44_2:
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:    ld.sis bc, -32768
; EZ80-NEXT:    add.sis hl, bc
; EZ80-NEXT:    ld.sis bc, -32641
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, bc
; EZ80-NEXT:    jr c, BB44_4
; EZ80-NEXT:  ; %bb.3:
; EZ80-NEXT:    ld.sis de, 127
; EZ80-NEXT:  BB44_4:
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ret
  call i8 @llvm.sdiv.fix.sat.i8(i8 %0, i8 %1, i32 7)
  ret i8 %3
}
declare i16 @llvm.sdiv.fix.sat.i16(i16, i16, i32 immarg)
define i16 @sdiv.fix.sat.i16.7(i16, i16) {
; Z80-LABEL: sdiv.fix.sat.i16.7:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld a, 7
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld iyl, c
; Z80-NEXT:    ld iyh, b
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    call __lshl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    ld c, (ix + 6)
; Z80-NEXT:    ld b, (ix + 7)
; Z80-NEXT:    call __ldivs
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ld hl, -32768
; Z80-NEXT:    ld de, -1
; Z80-NEXT:    ld (ix - 2), c
; Z80-NEXT:    ld (ix - 1), b
; Z80-NEXT:    call __lcmps
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    jp m, BB45_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr z, BB45_3
; Z80-NEXT:    jr BB45_4
; Z80-NEXT:  BB45_2:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB45_4
; Z80-NEXT:  BB45_3:
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:  BB45_4:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB45_6
; Z80-NEXT:  ; %bb.5:
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:  BB45_6:
; Z80-NEXT:    ld bc, 32767
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __lcmps
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    jp m, BB45_8
; Z80-NEXT:  ; %bb.7:
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:  BB45_8:
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: sdiv.fix.sat.i16.7:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld a, 7
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld iyl, c
; EZ80-CODE16-NEXT:    ld iyh, b
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    call __lshl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    ld iy, (ix + 6)
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    ld bc, (ix + 6)
; EZ80-CODE16-NEXT:    call __ldivs
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ld hl, -32768
; EZ80-CODE16-NEXT:    ld de, -1
; EZ80-CODE16-NEXT:    ld (ix - 2), bc
; EZ80-CODE16-NEXT:    call __lcmps
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    jp m, BB45_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr z, BB45_3
; EZ80-CODE16-NEXT:    jr BB45_4
; EZ80-CODE16-NEXT:  BB45_2:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB45_4
; EZ80-CODE16-NEXT:  BB45_3:
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:  BB45_4:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB45_6
; EZ80-CODE16-NEXT:  ; %bb.5:
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:  BB45_6:
; EZ80-CODE16-NEXT:    ld bc, 32767
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __lcmps
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    jp m, BB45_8
; EZ80-CODE16-NEXT:  ; %bb.7:
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:  BB45_8:
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: sdiv.fix.sat.i16.7:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld iy, (ix + 6)
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    ld e, 7
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld b, a
; EZ80-NEXT:    ld c, iyl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld d, 0
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    call __lshl
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld iy, (ix + 9)
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld b, a
; EZ80-NEXT:    ld c, iyl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    ld a, iyl
; EZ80-NEXT:    call __ldivs
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld hl, -32768
; EZ80-NEXT:    ld e, -1
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    call __lcmps
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    jp m, BB45_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld c, 0
; EZ80-NEXT:    bit 0, c
; EZ80-NEXT:    jr z, BB45_3
; EZ80-NEXT:    jr BB45_4
; EZ80-NEXT:  BB45_2:
; EZ80-NEXT:    ld c, 1
; EZ80-NEXT:    bit 0, c
; EZ80-NEXT:    jr nz, BB45_4
; EZ80-NEXT:  BB45_3:
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:  BB45_4:
; EZ80-NEXT:    bit 0, c
; EZ80-NEXT:    jr nz, BB45_6
; EZ80-NEXT:  ; %bb.5:
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:  BB45_6:
; EZ80-NEXT:    ld bc, 32767
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __lcmps
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    jp m, BB45_8
; EZ80-NEXT:  ; %bb.7:
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:  BB45_8:
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld d, iyh
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i16 @llvm.sdiv.fix.sat.i16(i16 %0, i16 %1, i32 7)
  ret i16 %3
}
define i16 @sdiv.fix.sat.i16.15(i16, i16) {
; Z80-LABEL: sdiv.fix.sat.i16.15:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld a, 15
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld iyl, c
; Z80-NEXT:    ld iyh, b
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    call __lshl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    ld c, (ix + 6)
; Z80-NEXT:    ld b, (ix + 7)
; Z80-NEXT:    call __ldivs
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ld hl, -32768
; Z80-NEXT:    ld de, -1
; Z80-NEXT:    ld (ix - 2), c
; Z80-NEXT:    ld (ix - 1), b
; Z80-NEXT:    call __lcmps
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    jp m, BB46_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr z, BB46_3
; Z80-NEXT:    jr BB46_4
; Z80-NEXT:  BB46_2:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB46_4
; Z80-NEXT:  BB46_3:
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:  BB46_4:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB46_6
; Z80-NEXT:  ; %bb.5:
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:  BB46_6:
; Z80-NEXT:    ld bc, 32767
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __lcmps
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    jp m, BB46_8
; Z80-NEXT:  ; %bb.7:
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:  BB46_8:
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: sdiv.fix.sat.i16.15:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld a, 15
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld iyl, c
; EZ80-CODE16-NEXT:    ld iyh, b
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    call __lshl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    ld iy, (ix + 6)
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    ld bc, (ix + 6)
; EZ80-CODE16-NEXT:    call __ldivs
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ld hl, -32768
; EZ80-CODE16-NEXT:    ld de, -1
; EZ80-CODE16-NEXT:    ld (ix - 2), bc
; EZ80-CODE16-NEXT:    call __lcmps
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    jp m, BB46_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr z, BB46_3
; EZ80-CODE16-NEXT:    jr BB46_4
; EZ80-CODE16-NEXT:  BB46_2:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB46_4
; EZ80-CODE16-NEXT:  BB46_3:
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:  BB46_4:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB46_6
; EZ80-CODE16-NEXT:  ; %bb.5:
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:  BB46_6:
; EZ80-CODE16-NEXT:    ld bc, 32767
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __lcmps
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    jp m, BB46_8
; EZ80-CODE16-NEXT:  ; %bb.7:
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:  BB46_8:
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: sdiv.fix.sat.i16.15:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld de, (ix + 6)
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld b, a
; EZ80-NEXT:    ld c, e
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld d, 0
; EZ80-NEXT:    ld e, 15
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    call __lshl
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ld iy, (ix + 9)
; EZ80-NEXT:    ld e, iyh
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld b, e
; EZ80-NEXT:    ld c, iyl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld a, iyl
; EZ80-NEXT:    call __ldivs
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld hl, -32768
; EZ80-NEXT:    ld e, -1
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    call __lcmps
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    jp m, BB46_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld c, 0
; EZ80-NEXT:    bit 0, c
; EZ80-NEXT:    jr z, BB46_3
; EZ80-NEXT:    jr BB46_4
; EZ80-NEXT:  BB46_2:
; EZ80-NEXT:    ld c, 1
; EZ80-NEXT:    bit 0, c
; EZ80-NEXT:    jr nz, BB46_4
; EZ80-NEXT:  BB46_3:
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:  BB46_4:
; EZ80-NEXT:    bit 0, c
; EZ80-NEXT:    jr nz, BB46_6
; EZ80-NEXT:  ; %bb.5:
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:  BB46_6:
; EZ80-NEXT:    ld bc, 32767
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __lcmps
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    jp m, BB46_8
; EZ80-NEXT:  ; %bb.7:
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:  BB46_8:
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld d, iyh
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i16 @llvm.sdiv.fix.sat.i16(i16 %0, i16 %1, i32 15)
  ret i16 %3
}
declare i32 @llvm.sdiv.fix.sat.i32(i32, i32, i32 immarg)
define i32 @sdiv.fix.sat.i32.15(i32, i32) {
; Z80-LABEL: sdiv.fix.sat.i32.15:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -9
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld hl, 15
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld (ix - 4), e
; Z80-NEXT:    ld (ix - 3), d
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    call __lldivs
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld (ix - 6), c
; Z80-NEXT:    ld (ix - 5), b
; Z80-NEXT:    push bc
; Z80-NEXT:    ld (ix - 2), e
; Z80-NEXT:    ld (ix - 1), d
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld bc, -1
; Z80-NEXT:    push bc
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    ld de, -32768
; Z80-NEXT:    call __llcmps
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 9), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 9)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    jp m, BB47_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    jr BB47_3
; Z80-NEXT:  BB47_2:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:  BB47_3:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    ld c, (ix - 6)
; Z80-NEXT:    ld b, (ix - 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    jp z, BB47_10
; Z80-NEXT:  ; %bb.4:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB47_11
; Z80-NEXT:  BB47_5:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB47_12
; Z80-NEXT:  BB47_6:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB47_8
; Z80-NEXT:  BB47_7:
; Z80-NEXT:    ld iy, -1
; Z80-NEXT:  BB47_8:
; Z80-NEXT:    ld de, 32767
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    ld e, (ix - 2)
; Z80-NEXT:    ld d, (ix - 1)
; Z80-NEXT:    call __llcmps
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 6), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld iy, 10
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld sp, iy
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    jp m, BB47_13
; Z80-NEXT:  ; %bb.9:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr z, BB47_14
; Z80-NEXT:    jr BB47_15
; Z80-NEXT:  BB47_10:
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp nz, BB47_5
; Z80-NEXT:  BB47_11:
; Z80-NEXT:    ld de, -32768
; Z80-NEXT:    ld (ix - 2), e
; Z80-NEXT:    ld (ix - 1), d
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp nz, BB47_6
; Z80-NEXT:  BB47_12:
; Z80-NEXT:    ld de, -1
; Z80-NEXT:    ld c, e
; Z80-NEXT:    ld b, d
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB47_7
; Z80-NEXT:    jp BB47_8
; Z80-NEXT:  BB47_13:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB47_15
; Z80-NEXT:  BB47_14:
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:  BB47_15:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB47_17
; Z80-NEXT:  ; %bb.16:
; Z80-NEXT:    ld de, 32767
; Z80-NEXT:    ld (ix - 2), e
; Z80-NEXT:    ld (ix - 1), d
; Z80-NEXT:  BB47_17:
; Z80-NEXT:    ld e, (ix - 2)
; Z80-NEXT:    ld d, (ix - 1)
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: sdiv.fix.sat.i32.15:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 9
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld hl, 15
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld (ix - 4), de
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    call __lldivs
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld (ix - 8), iy
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld (ix - 6), bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld (ix - 2), de
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld bc, -1
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    ld de, -32768
; EZ80-CODE16-NEXT:    call __llcmps
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 9), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 9)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    jp m, BB47_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    jr BB47_3
; EZ80-CODE16-NEXT:  BB47_2:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:  BB47_3:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    ld bc, (ix - 6)
; EZ80-CODE16-NEXT:    ld iy, (ix - 8)
; EZ80-CODE16-NEXT:    jp z, BB47_10
; EZ80-CODE16-NEXT:  ; %bb.4:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB47_11
; EZ80-CODE16-NEXT:  BB47_5:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB47_12
; EZ80-CODE16-NEXT:  BB47_6:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB47_8
; EZ80-CODE16-NEXT:  BB47_7:
; EZ80-CODE16-NEXT:    ld iy, -1
; EZ80-CODE16-NEXT:  BB47_8:
; EZ80-CODE16-NEXT:    ld de, 32767
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    ld de, (ix - 2)
; EZ80-CODE16-NEXT:    call __llcmps
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 6), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld iy, 10
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld sp, iy
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 6)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    jp m, BB47_13
; EZ80-CODE16-NEXT:  ; %bb.9:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr z, BB47_14
; EZ80-CODE16-NEXT:    jr BB47_15
; EZ80-CODE16-NEXT:  BB47_10:
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp nz, BB47_5
; EZ80-CODE16-NEXT:  BB47_11:
; EZ80-CODE16-NEXT:    ld de, -32768
; EZ80-CODE16-NEXT:    ld (ix - 2), de
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp nz, BB47_6
; EZ80-CODE16-NEXT:  BB47_12:
; EZ80-CODE16-NEXT:    ld de, -1
; EZ80-CODE16-NEXT:    ld c, e
; EZ80-CODE16-NEXT:    ld b, d
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB47_7
; EZ80-CODE16-NEXT:    jp BB47_8
; EZ80-CODE16-NEXT:  BB47_13:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB47_15
; EZ80-CODE16-NEXT:  BB47_14:
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:  BB47_15:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB47_17
; EZ80-CODE16-NEXT:  ; %bb.16:
; EZ80-CODE16-NEXT:    ld de, 32767
; EZ80-CODE16-NEXT:    ld (ix - 2), de
; EZ80-CODE16-NEXT:  BB47_17:
; EZ80-CODE16-NEXT:    ld de, (ix - 2)
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: sdiv.fix.sat.i32.15:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 10
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld c, (ix + 9)
; EZ80-NEXT:    ld a, (ix + 15)
; EZ80-NEXT:    ld l, c
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld e, c
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld hl, 15
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    ld (ix - 6), de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld hl, (ix + 12)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    ld de, (ix - 6)
; EZ80-NEXT:    call __lldivs
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld (ix - 6), bc
; EZ80-NEXT:    push bc
; EZ80-NEXT:    ld (ix - 9), de
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld (ix - 3), iy
; EZ80-NEXT:    push iy
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld de, -128
; EZ80-NEXT:    ld.sis bc, -1
; EZ80-NEXT:    call __llcmps
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 10), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 10)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    jp m, BB47_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    jr BB47_3
; EZ80-NEXT:  BB47_2:
; EZ80-NEXT:    ld a, 1
; EZ80-NEXT:  BB47_3:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    ld iy, (ix - 9)
; EZ80-NEXT:    jp z, BB47_9
; EZ80-NEXT:  ; %bb.4:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB47_10
; EZ80-NEXT:  BB47_5:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB47_7
; EZ80-NEXT:  BB47_6:
; EZ80-NEXT:    ld.sis hl, -1
; EZ80-NEXT:    ; kill: def $hl killed $hl def $uhl
; EZ80-NEXT:    ld (ix - 6), hl
; EZ80-NEXT:  BB47_7:
; EZ80-NEXT:    ld bc, -1
; EZ80-NEXT:    ld de, 127
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    push bc
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    lea de, iy
; EZ80-NEXT:    ld bc, (ix - 6)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llcmps
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 6), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 6)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    jp m, BB47_11
; EZ80-NEXT:  ; %bb.8:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr z, BB47_12
; EZ80-NEXT:    jr BB47_13
; EZ80-NEXT:  BB47_9:
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB47_5
; EZ80-NEXT:  BB47_10:
; EZ80-NEXT:    ld iy, -128
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB47_6
; EZ80-NEXT:    jp BB47_7
; EZ80-NEXT:  BB47_11:
; EZ80-NEXT:    ld a, 1
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB47_13
; EZ80-NEXT:  BB47_12:
; EZ80-NEXT:    scf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:  BB47_13:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB47_15
; EZ80-NEXT:  ; %bb.14:
; EZ80-NEXT:    ld iy, 127
; EZ80-NEXT:  BB47_15:
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i32 @llvm.sdiv.fix.sat.i32(i32 %0, i32 %1, i32 15)
  ret i32 %3
}
define i32 @sdiv.fix.sat.i32.31(i32, i32) {
; Z80-LABEL: sdiv.fix.sat.i32.31:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -9
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld hl, 31
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld (ix - 4), e
; Z80-NEXT:    ld (ix - 3), d
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    call __lldivs
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld (ix - 6), c
; Z80-NEXT:    ld (ix - 5), b
; Z80-NEXT:    push bc
; Z80-NEXT:    ld (ix - 2), e
; Z80-NEXT:    ld (ix - 1), d
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld bc, -1
; Z80-NEXT:    push bc
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    ld de, -32768
; Z80-NEXT:    call __llcmps
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 9), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 9)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    jp m, BB48_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    jr BB48_3
; Z80-NEXT:  BB48_2:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:  BB48_3:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    ld c, (ix - 6)
; Z80-NEXT:    ld b, (ix - 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    jp z, BB48_10
; Z80-NEXT:  ; %bb.4:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB48_11
; Z80-NEXT:  BB48_5:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB48_12
; Z80-NEXT:  BB48_6:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB48_8
; Z80-NEXT:  BB48_7:
; Z80-NEXT:    ld iy, -1
; Z80-NEXT:  BB48_8:
; Z80-NEXT:    ld de, 32767
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    ld e, (ix - 2)
; Z80-NEXT:    ld d, (ix - 1)
; Z80-NEXT:    call __llcmps
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 6), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld iy, 10
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld sp, iy
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    jp m, BB48_13
; Z80-NEXT:  ; %bb.9:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr z, BB48_14
; Z80-NEXT:    jr BB48_15
; Z80-NEXT:  BB48_10:
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp nz, BB48_5
; Z80-NEXT:  BB48_11:
; Z80-NEXT:    ld de, -32768
; Z80-NEXT:    ld (ix - 2), e
; Z80-NEXT:    ld (ix - 1), d
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp nz, BB48_6
; Z80-NEXT:  BB48_12:
; Z80-NEXT:    ld de, -1
; Z80-NEXT:    ld c, e
; Z80-NEXT:    ld b, d
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB48_7
; Z80-NEXT:    jp BB48_8
; Z80-NEXT:  BB48_13:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB48_15
; Z80-NEXT:  BB48_14:
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:  BB48_15:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB48_17
; Z80-NEXT:  ; %bb.16:
; Z80-NEXT:    ld de, 32767
; Z80-NEXT:    ld (ix - 2), e
; Z80-NEXT:    ld (ix - 1), d
; Z80-NEXT:  BB48_17:
; Z80-NEXT:    ld e, (ix - 2)
; Z80-NEXT:    ld d, (ix - 1)
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: sdiv.fix.sat.i32.31:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 9
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld hl, 31
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld (ix - 4), de
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    call __lldivs
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld (ix - 8), iy
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld (ix - 6), bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld (ix - 2), de
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld bc, -1
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    ld de, -32768
; EZ80-CODE16-NEXT:    call __llcmps
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 9), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 9)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    jp m, BB48_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    jr BB48_3
; EZ80-CODE16-NEXT:  BB48_2:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:  BB48_3:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    ld bc, (ix - 6)
; EZ80-CODE16-NEXT:    ld iy, (ix - 8)
; EZ80-CODE16-NEXT:    jp z, BB48_10
; EZ80-CODE16-NEXT:  ; %bb.4:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB48_11
; EZ80-CODE16-NEXT:  BB48_5:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB48_12
; EZ80-CODE16-NEXT:  BB48_6:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB48_8
; EZ80-CODE16-NEXT:  BB48_7:
; EZ80-CODE16-NEXT:    ld iy, -1
; EZ80-CODE16-NEXT:  BB48_8:
; EZ80-CODE16-NEXT:    ld de, 32767
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    ld de, (ix - 2)
; EZ80-CODE16-NEXT:    call __llcmps
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 6), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld iy, 10
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld sp, iy
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 6)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    jp m, BB48_13
; EZ80-CODE16-NEXT:  ; %bb.9:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr z, BB48_14
; EZ80-CODE16-NEXT:    jr BB48_15
; EZ80-CODE16-NEXT:  BB48_10:
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp nz, BB48_5
; EZ80-CODE16-NEXT:  BB48_11:
; EZ80-CODE16-NEXT:    ld de, -32768
; EZ80-CODE16-NEXT:    ld (ix - 2), de
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp nz, BB48_6
; EZ80-CODE16-NEXT:  BB48_12:
; EZ80-CODE16-NEXT:    ld de, -1
; EZ80-CODE16-NEXT:    ld c, e
; EZ80-CODE16-NEXT:    ld b, d
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB48_7
; EZ80-CODE16-NEXT:    jp BB48_8
; EZ80-CODE16-NEXT:  BB48_13:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB48_15
; EZ80-CODE16-NEXT:  BB48_14:
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:  BB48_15:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB48_17
; EZ80-CODE16-NEXT:  ; %bb.16:
; EZ80-CODE16-NEXT:    ld de, 32767
; EZ80-CODE16-NEXT:    ld (ix - 2), de
; EZ80-CODE16-NEXT:  BB48_17:
; EZ80-CODE16-NEXT:    ld de, (ix - 2)
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: sdiv.fix.sat.i32.31:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 10
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld c, (ix + 9)
; EZ80-NEXT:    ld a, (ix + 15)
; EZ80-NEXT:    ld l, c
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld e, c
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld hl, 31
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    ld (ix - 6), de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld hl, (ix + 12)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    ld de, (ix - 6)
; EZ80-NEXT:    call __lldivs
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld (ix - 6), bc
; EZ80-NEXT:    push bc
; EZ80-NEXT:    ld (ix - 9), de
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld (ix - 3), iy
; EZ80-NEXT:    push iy
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld de, -128
; EZ80-NEXT:    ld.sis bc, -1
; EZ80-NEXT:    call __llcmps
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 10), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 10)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    jp m, BB48_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    jr BB48_3
; EZ80-NEXT:  BB48_2:
; EZ80-NEXT:    ld a, 1
; EZ80-NEXT:  BB48_3:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    ld iy, (ix - 9)
; EZ80-NEXT:    jp z, BB48_9
; EZ80-NEXT:  ; %bb.4:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB48_10
; EZ80-NEXT:  BB48_5:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB48_7
; EZ80-NEXT:  BB48_6:
; EZ80-NEXT:    ld.sis hl, -1
; EZ80-NEXT:    ; kill: def $hl killed $hl def $uhl
; EZ80-NEXT:    ld (ix - 6), hl
; EZ80-NEXT:  BB48_7:
; EZ80-NEXT:    ld bc, -1
; EZ80-NEXT:    ld de, 127
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    push bc
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    lea de, iy
; EZ80-NEXT:    ld bc, (ix - 6)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llcmps
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 6), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 6)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    jp m, BB48_11
; EZ80-NEXT:  ; %bb.8:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr z, BB48_12
; EZ80-NEXT:    jr BB48_13
; EZ80-NEXT:  BB48_9:
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB48_5
; EZ80-NEXT:  BB48_10:
; EZ80-NEXT:    ld iy, -128
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB48_6
; EZ80-NEXT:    jp BB48_7
; EZ80-NEXT:  BB48_11:
; EZ80-NEXT:    ld a, 1
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB48_13
; EZ80-NEXT:  BB48_12:
; EZ80-NEXT:    scf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:  BB48_13:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB48_15
; EZ80-NEXT:  ; %bb.14:
; EZ80-NEXT:    ld iy, 127
; EZ80-NEXT:  BB48_15:
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i32 @llvm.sdiv.fix.sat.i32(i32 %0, i32 %1, i32 31)
  ret i32 %3
}
declare i64 @llvm.sdiv.fix.sat.i64(i64, i64, i32 immarg)
define i64 @sdiv.fix.sat.i64.31(i64, i64) {
; Z80-LABEL: sdiv.fix.sat.i64.31:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -23
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld c, (ix + 14)
; Z80-NEXT:    ld b, (ix + 15)
; Z80-NEXT:    ld e, (ix + 16)
; Z80-NEXT:    ld d, (ix + 17)
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    push bc
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    call __lldivs
; Z80-NEXT:    ld (ix - 14), l
; Z80-NEXT:    ld (ix - 13), h
; Z80-NEXT:    ld (ix - 16), e
; Z80-NEXT:    ld (ix - 15), d
; Z80-NEXT:    ld (ix - 18), c
; Z80-NEXT:    ld (ix - 17), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 20), l
; Z80-NEXT:    ld (ix - 19), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 16)
; Z80-NEXT:    ld h, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    call __llrems
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld (ix - 4), e
; Z80-NEXT:    ld (ix - 3), d
; Z80-NEXT:    ld (ix - 6), c
; Z80-NEXT:    ld (ix - 5), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 63
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    ld c, (ix - 6)
; Z80-NEXT:    ld b, (ix - 5)
; Z80-NEXT:    call __llshrs
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    ld c, (ix - 6)
; Z80-NEXT:    ld b, (ix - 5)
; Z80-NEXT:    call __llxor
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    ld (ix - 12), e
; Z80-NEXT:    ld (ix - 11), d
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 22), l
; Z80-NEXT:    ld (ix - 21), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    push de
; Z80-NEXT:    push de
; Z80-NEXT:    ld hl, 16384
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    ld e, (ix - 12)
; Z80-NEXT:    ld d, (ix - 11)
; Z80-NEXT:    call __llcmpu
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 23), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 23)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    ccf
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld iyl, a
; Z80-NEXT:    inc iyl
; Z80-NEXT:    ld l, (ix - 22)
; Z80-NEXT:    ld h, (ix - 21)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    ld e, (ix - 12)
; Z80-NEXT:    ld d, (ix - 11)
; Z80-NEXT:    call __llctlz
; Z80-NEXT:    ld l, a
; Z80-NEXT:    ld a, iyl
; Z80-NEXT:    pop de
; Z80-NEXT:    ld h, 0
; Z80-NEXT:    ld de, -1
; Z80-NEXT:    push de
; Z80-NEXT:    push de
; Z80-NEXT:    push de
; Z80-NEXT:    push de
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    ld e, c
; Z80-NEXT:    ld d, b
; Z80-NEXT:    call __lladd
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr z, BB49_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld hl, 30
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:  BB49_2:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    jr nz, BB49_4
; Z80-NEXT:  ; %bb.3:
; Z80-NEXT:    ex de, hl
; Z80-NEXT:  BB49_4:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    jr nz, BB49_6
; Z80-NEXT:  ; %bb.5:
; Z80-NEXT:    ld e, c
; Z80-NEXT:    ld d, b
; Z80-NEXT:  BB49_6:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    jr nz, BB49_8
; Z80-NEXT:  ; %bb.7:
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:  BB49_8:
; Z80-NEXT:    ld iy, 31
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    push bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, c
; Z80-NEXT:    ld d, b
; Z80-NEXT:    call __llsub
; Z80-NEXT:    ld (ix - 12), l
; Z80-NEXT:    ld (ix - 11), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 31
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 20)
; Z80-NEXT:    ld h, (ix - 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 14)
; Z80-NEXT:    ld h, (ix - 13)
; Z80-NEXT:    ld e, (ix - 16)
; Z80-NEXT:    ld d, (ix - 15)
; Z80-NEXT:    ld c, (ix - 18)
; Z80-NEXT:    ld b, (ix - 17)
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 14), l
; Z80-NEXT:    ld (ix - 13), h
; Z80-NEXT:    ld (ix - 16), e
; Z80-NEXT:    ld (ix - 15), d
; Z80-NEXT:    ld (ix - 18), c
; Z80-NEXT:    ld (ix - 17), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 20), l
; Z80-NEXT:    ld (ix - 19), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    ld c, (ix - 6)
; Z80-NEXT:    ld b, (ix - 5)
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld (ix - 4), e
; Z80-NEXT:    ld (ix - 3), d
; Z80-NEXT:    ld (ix - 6), c
; Z80-NEXT:    ld (ix - 5), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix - 12)
; Z80-NEXT:    ld h, (ix - 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    ld hl, 1
; Z80-NEXT:    ld e, c
; Z80-NEXT:    ld d, b
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 1
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    ld e, (ix + 14)
; Z80-NEXT:    ld d, (ix + 15)
; Z80-NEXT:    ld c, (ix + 16)
; Z80-NEXT:    ld b, (ix + 17)
; Z80-NEXT:    call __lladd
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    ld c, (ix - 6)
; Z80-NEXT:    ld b, (ix - 5)
; Z80-NEXT:    call __lldivs
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix - 12)
; Z80-NEXT:    ld h, (ix - 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    call __llshrs
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 20)
; Z80-NEXT:    ld h, (ix - 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 14)
; Z80-NEXT:    ld h, (ix - 13)
; Z80-NEXT:    ld e, (ix - 16)
; Z80-NEXT:    ld d, (ix - 15)
; Z80-NEXT:    ld c, (ix - 18)
; Z80-NEXT:    ld b, (ix - 17)
; Z80-NEXT:    call __lladd
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: sdiv.fix.sat.i64.31:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 23
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld iy, (ix + 12)
; EZ80-CODE16-NEXT:    ld bc, (ix + 14)
; EZ80-CODE16-NEXT:    ld de, (ix + 16)
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    call __lldivs
; EZ80-CODE16-NEXT:    ld (ix - 14), hl
; EZ80-CODE16-NEXT:    ld (ix - 16), de
; EZ80-CODE16-NEXT:    ld (ix - 18), bc
; EZ80-CODE16-NEXT:    ld (ix - 20), iy
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 16)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 14)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    call __llrems
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld (ix - 4), de
; EZ80-CODE16-NEXT:    ld (ix - 6), bc
; EZ80-CODE16-NEXT:    ld (ix - 10), iy
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 63
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    ld bc, (ix - 6)
; EZ80-CODE16-NEXT:    call __llshrs
; EZ80-CODE16-NEXT:    ld (ix - 8), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    ld bc, (ix - 6)
; EZ80-CODE16-NEXT:    call __llxor
; EZ80-CODE16-NEXT:    ld (ix - 8), hl
; EZ80-CODE16-NEXT:    ld (ix - 12), de
; EZ80-CODE16-NEXT:    ld (ix - 22), iy
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, 16384
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    ld de, (ix - 12)
; EZ80-CODE16-NEXT:    call __llcmpu
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 23), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 23)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld iyl, a
; EZ80-CODE16-NEXT:    inc iyl
; EZ80-CODE16-NEXT:    ld hl, (ix - 22)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    ld de, (ix - 12)
; EZ80-CODE16-NEXT:    call __llctlz
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    ld a, iyl
; EZ80-CODE16-NEXT:    pop de
; EZ80-CODE16-NEXT:    ld h, 0
; EZ80-CODE16-NEXT:    ld de, -1
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld e, c
; EZ80-CODE16-NEXT:    ld d, b
; EZ80-CODE16-NEXT:    call __lladd
; EZ80-CODE16-NEXT:    ld (ix - 8), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr z, BB49_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld hl, 30
; EZ80-CODE16-NEXT:    ld (ix - 8), hl
; EZ80-CODE16-NEXT:  BB49_2:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    jr nz, BB49_4
; EZ80-CODE16-NEXT:  ; %bb.3:
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:  BB49_4:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    jr nz, BB49_6
; EZ80-CODE16-NEXT:  ; %bb.5:
; EZ80-CODE16-NEXT:    ld e, c
; EZ80-CODE16-NEXT:    ld d, b
; EZ80-CODE16-NEXT:  BB49_6:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    jr nz, BB49_8
; EZ80-CODE16-NEXT:  ; %bb.7:
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:  BB49_8:
; EZ80-CODE16-NEXT:    ld iy, 31
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld e, c
; EZ80-CODE16-NEXT:    ld d, b
; EZ80-CODE16-NEXT:    call __llsub
; EZ80-CODE16-NEXT:    ld (ix - 12), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 31
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 20)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 14)
; EZ80-CODE16-NEXT:    ld de, (ix - 16)
; EZ80-CODE16-NEXT:    ld bc, (ix - 18)
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 14), hl
; EZ80-CODE16-NEXT:    ld (ix - 16), de
; EZ80-CODE16-NEXT:    ld (ix - 18), bc
; EZ80-CODE16-NEXT:    ld (ix - 20), iy
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    ld bc, (ix - 6)
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld (ix - 4), de
; EZ80-CODE16-NEXT:    ld (ix - 6), bc
; EZ80-CODE16-NEXT:    ld (ix - 8), iy
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, 1
; EZ80-CODE16-NEXT:    ld e, c
; EZ80-CODE16-NEXT:    ld d, b
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 10), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 1
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 10), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    ld de, (ix + 14)
; EZ80-CODE16-NEXT:    ld bc, (ix + 16)
; EZ80-CODE16-NEXT:    call __lladd
; EZ80-CODE16-NEXT:    ld (ix - 10), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    ld bc, (ix - 6)
; EZ80-CODE16-NEXT:    call __lldivs
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    call __llshrs
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 20)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 14)
; EZ80-CODE16-NEXT:    ld de, (ix - 16)
; EZ80-CODE16-NEXT:    ld bc, (ix - 18)
; EZ80-CODE16-NEXT:    call __lladd
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: sdiv.fix.sat.i64.31:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 24
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld bc, (ix + 12)
; EZ80-NEXT:    ld de, (ix + 15)
; EZ80-NEXT:    ld hl, (ix + 18)
; EZ80-NEXT:    ld iy, (ix + 21)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __lldivs
; EZ80-NEXT:    ld (ix - 15), hl
; EZ80-NEXT:    ld (ix - 18), de
; EZ80-NEXT:    ld (ix - 21), bc
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld hl, (ix + 18)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ld bc, (ix + 12)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llrems
; EZ80-NEXT:    ld (ix - 12), hl
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld (ix - 6), bc
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld de, 63
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld bc, (ix - 6)
; EZ80-NEXT:    call __llshrs
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 12)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld bc, (ix - 6)
; EZ80-NEXT:    call __llxor
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld iy, 64
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llcmpu
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 9), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 9)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ccf
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ld iyl, a
; EZ80-NEXT:    inc iyl
; EZ80-NEXT:    call __llctlz
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    ld a, iyl
; EZ80-NEXT:    ld de, -1
; EZ80-NEXT:    push de
; EZ80-NEXT:    push de
; EZ80-NEXT:    push de
; EZ80-NEXT:    inc de
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __lladd
; EZ80-NEXT:    ld (ix - 9), hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr z, BB49_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld hl, 30
; EZ80-NEXT:    ld (ix - 9), hl
; EZ80-NEXT:  BB49_2:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    jr nz, BB49_4
; EZ80-NEXT:  ; %bb.3:
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop iy
; EZ80-NEXT:  BB49_4:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    ld.sis de, 0
; EZ80-NEXT:    ; kill: def $de killed $de def $ude
; EZ80-NEXT:    jr nz, BB49_6
; EZ80-NEXT:  ; %bb.5:
; EZ80-NEXT:    ld e, c
; EZ80-NEXT:    ld d, b
; EZ80-NEXT:  BB49_6:
; EZ80-NEXT:    ld hl, 31
; EZ80-NEXT:    push de
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld de, (ix - 9)
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llsub
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld (ix - 24), iy
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld hl, 31
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 15)
; EZ80-NEXT:    ld de, (ix - 18)
; EZ80-NEXT:    ld bc, (ix - 21)
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    ld (ix - 15), hl
; EZ80-NEXT:    ld (ix - 18), de
; EZ80-NEXT:    ld (ix - 21), bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, (ix - 9)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 12)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld bc, (ix - 6)
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    ld (ix - 6), de
; EZ80-NEXT:    ld (ix - 9), bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld hl, 1
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld iy, 1
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    ld de, (ix + 18)
; EZ80-NEXT:    ld bc, (ix + 21)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __lladd
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    ld de, (ix - 6)
; EZ80-NEXT:    ld bc, (ix - 9)
; EZ80-NEXT:    call __lldivs
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, (ix - 24)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshrs
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 15)
; EZ80-NEXT:    ld de, (ix - 18)
; EZ80-NEXT:    ld bc, (ix - 21)
; EZ80-NEXT:    call __lladd
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i64 @llvm.sdiv.fix.sat.i64(i64 %0, i64 %1, i32 31)
  ret i64 %3
}

declare i8 @llvm.udiv.fix.sat.i8(i8, i8, i32 immarg)
define i8 @udiv.fix.sat.i8.8(i8, i8) {
; Z80-LABEL: udiv.fix.sat.i8.8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld b, 0
; Z80-NEXT:    ld c, (iy + 2)
; Z80-NEXT:    ld h, c
; Z80-NEXT:    ld l, b
; Z80-NEXT:    ld c, (iy + 4)
; Z80-NEXT:    call __sdivu
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    ld bc, 255
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    jr c, BB50_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld de, 255
; Z80-NEXT:  BB50_2:
; Z80-NEXT:    ld a, e
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: udiv.fix.sat.i8.8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld b, 0
; EZ80-CODE16-NEXT:    ld c, (iy + 2)
; EZ80-CODE16-NEXT:    ld h, c
; EZ80-CODE16-NEXT:    ld l, b
; EZ80-CODE16-NEXT:    ld c, (iy + 4)
; EZ80-CODE16-NEXT:    call __sdivu
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    ld bc, 255
; EZ80-CODE16-NEXT:    or a, a
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    jr c, BB50_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld de, 255
; EZ80-CODE16-NEXT:  BB50_2:
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: udiv.fix.sat.i8.8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld b, 0
; EZ80-NEXT:    ld c, (iy + 3)
; EZ80-NEXT:    ld h, c
; EZ80-NEXT:    ld l, b
; EZ80-NEXT:    ld c, (iy + 6)
; EZ80-NEXT:    call __sdivu
; EZ80-NEXT:    ld e, l
; EZ80-NEXT:    ld d, h
; EZ80-NEXT:    ld.sis bc, 255
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, bc
; EZ80-NEXT:    jr c, BB50_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld.sis de, 255
; EZ80-NEXT:  BB50_2:
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ret
  call i8 @llvm.udiv.fix.sat.i8(i8 %0, i8 %1, i32 8)
  ret i8 %3
}
declare i16 @llvm.udiv.fix.sat.i16(i16, i16, i32 immarg)
define i16 @udiv.fix.sat.i16.8(i16, i16) {
; Z80-LABEL: udiv.fix.sat.i16.8:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld c, (ix + 4)
; Z80-NEXT:    ld b, (ix + 5)
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    ld a, 8
; Z80-NEXT:    call __lshl
; Z80-NEXT:    ld c, (ix + 6)
; Z80-NEXT:    ld b, (ix + 7)
; Z80-NEXT:    call __ldivu
; Z80-NEXT:    ld bc, -1
; Z80-NEXT:    call __lcmpu
; Z80-NEXT:    jr c, BB51_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:  BB51_2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: udiv.fix.sat.i16.8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld bc, (ix + 4)
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    ld a, 8
; EZ80-CODE16-NEXT:    call __lshl
; EZ80-CODE16-NEXT:    ld bc, (ix + 6)
; EZ80-CODE16-NEXT:    call __ldivu
; EZ80-CODE16-NEXT:    ld bc, -1
; EZ80-CODE16-NEXT:    call __lcmpu
; EZ80-CODE16-NEXT:    jr c, BB51_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:  BB51_2:
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: udiv.fix.sat.i16.8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld bc, 0
; EZ80-NEXT:    ld c, l
; EZ80-NEXT:    ld b, h
; EZ80-NEXT:    ld d, 0
; EZ80-NEXT:    ld l, 8
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __lshl
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld iyl, e
; EZ80-NEXT:    ld iyh, d
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __ldivu
; EZ80-NEXT:    ld bc, 65535
; EZ80-NEXT:    call __lcmpu
; EZ80-NEXT:    jr c, BB51_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:  BB51_2:
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i16 @llvm.udiv.fix.sat.i16(i16 %0, i16 %1, i32 8)
  ret i16 %3
}
define i16 @udiv.fix.sat.i16.16(i16, i16) {
; Z80-LABEL: udiv.fix.sat.i16.16:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld c, (ix + 4)
; Z80-NEXT:    ld b, (ix + 5)
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    ld a, 16
; Z80-NEXT:    call __lshl
; Z80-NEXT:    ld c, (ix + 6)
; Z80-NEXT:    ld b, (ix + 7)
; Z80-NEXT:    call __ldivu
; Z80-NEXT:    ld bc, -1
; Z80-NEXT:    call __lcmpu
; Z80-NEXT:    jr c, BB52_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:  BB52_2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: udiv.fix.sat.i16.16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld bc, (ix + 4)
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    ld a, 16
; EZ80-CODE16-NEXT:    call __lshl
; EZ80-CODE16-NEXT:    ld bc, (ix + 6)
; EZ80-CODE16-NEXT:    call __ldivu
; EZ80-CODE16-NEXT:    ld bc, -1
; EZ80-CODE16-NEXT:    call __lcmpu
; EZ80-CODE16-NEXT:    jr c, BB52_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:  BB52_2:
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: udiv.fix.sat.i16.16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld bc, 0
; EZ80-NEXT:    ld c, l
; EZ80-NEXT:    ld b, h
; EZ80-NEXT:    ld d, 0
; EZ80-NEXT:    ld l, 16
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __lshl
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld iyl, e
; EZ80-NEXT:    ld iyh, d
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __ldivu
; EZ80-NEXT:    ld bc, 65535
; EZ80-NEXT:    call __lcmpu
; EZ80-NEXT:    jr c, BB52_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:  BB52_2:
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i16 @llvm.udiv.fix.sat.i16(i16 %0, i16 %1, i32 16)
  ret i16 %3
}
declare i32 @llvm.udiv.fix.sat.i32(i32, i32, i32 immarg)
define i32 @udiv.fix.sat.i32.16(i32, i32) {
; Z80-LABEL: udiv.fix.sat.i32.16:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld iy, 16
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    call __lldivu
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld (ix - 2), c
; Z80-NEXT:    ld (ix - 1), b
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    ld c, (ix - 2)
; Z80-NEXT:    ld b, (ix - 1)
; Z80-NEXT:    call __llcmpu
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld iy, 10
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld sp, iy
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    ccf
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    inc a
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB53_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:  BB53_2:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB53_4
; Z80-NEXT:  ; %bb.3:
; Z80-NEXT:    ld de, -1
; Z80-NEXT:  BB53_4:
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: udiv.fix.sat.i32.16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 4
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld iy, 16
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    call __lldivu
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld (ix - 2), bc
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    ld bc, (ix - 2)
; EZ80-CODE16-NEXT:    call __llcmpu
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 2), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld iy, 10
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld sp, iy
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 2)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    inc a
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB53_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:  BB53_2:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB53_4
; EZ80-CODE16-NEXT:  ; %bb.3:
; EZ80-CODE16-NEXT:    ld de, -1
; EZ80-CODE16-NEXT:  BB53_4:
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: udiv.fix.sat.i32.16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld iy, (ix + 6)
; EZ80-NEXT:    ld a, (ix + 15)
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    ld e, (ix + 9)
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    ld hl, 16
; EZ80-NEXT:    push hl
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    push iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld iy, (ix + 12)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    call __lldivu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld iy, 255
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld iy, -1
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llcmpu
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 3), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 3)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ccf
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    inc a
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB53_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    scf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:  BB53_2:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB53_4
; EZ80-NEXT:  ; %bb.3:
; EZ80-NEXT:    ld de, 255
; EZ80-NEXT:  BB53_4:
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i32 @llvm.udiv.fix.sat.i32(i32 %0, i32 %1, i32 16)
  ret i32 %3
}
define i32 @udiv.fix.sat.i32.32(i32, i32) {
; Z80-LABEL: udiv.fix.sat.i32.32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld iy, 32
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    call __lldivu
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld (ix - 2), c
; Z80-NEXT:    ld (ix - 1), b
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    ld c, (ix - 2)
; Z80-NEXT:    ld b, (ix - 1)
; Z80-NEXT:    call __llcmpu
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld iy, 10
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld sp, iy
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    ccf
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    inc a
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB54_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:  BB54_2:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB54_4
; Z80-NEXT:  ; %bb.3:
; Z80-NEXT:    ld de, -1
; Z80-NEXT:  BB54_4:
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: udiv.fix.sat.i32.32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 4
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld iy, 32
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    call __lldivu
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld (ix - 2), bc
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    ld bc, (ix - 2)
; EZ80-CODE16-NEXT:    call __llcmpu
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 2), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld iy, 10
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld sp, iy
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 2)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    inc a
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB54_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:  BB54_2:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB54_4
; EZ80-CODE16-NEXT:  ; %bb.3:
; EZ80-CODE16-NEXT:    ld de, -1
; EZ80-CODE16-NEXT:  BB54_4:
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: udiv.fix.sat.i32.32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld iy, (ix + 6)
; EZ80-NEXT:    ld a, (ix + 15)
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    ld e, (ix + 9)
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    ld hl, 32
; EZ80-NEXT:    push hl
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    push iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld iy, (ix + 12)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    call __lldivu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld iy, 255
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld iy, -1
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llcmpu
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 3), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 3)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ccf
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    inc a
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB54_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    scf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:  BB54_2:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB54_4
; EZ80-NEXT:  ; %bb.3:
; EZ80-NEXT:    ld de, 255
; EZ80-NEXT:  BB54_4:
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i32 @llvm.udiv.fix.sat.i32(i32 %0, i32 %1, i32 32)
  ret i32 %3
}
declare i64 @llvm.udiv.fix.sat.i64(i64, i64, i32 immarg)
define i64 @udiv.fix.sat.i64.32(i64, i64) {
; Z80-LABEL: udiv.fix.sat.i64.32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -20
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld c, (ix + 14)
; Z80-NEXT:    ld b, (ix + 15)
; Z80-NEXT:    ld e, (ix + 16)
; Z80-NEXT:    ld d, (ix + 17)
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    push bc
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    call __lldivu
; Z80-NEXT:    ld (ix - 12), l
; Z80-NEXT:    ld (ix - 11), h
; Z80-NEXT:    ld (ix - 14), e
; Z80-NEXT:    ld (ix - 13), d
; Z80-NEXT:    ld (ix - 16), c
; Z80-NEXT:    ld (ix - 15), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 20), l
; Z80-NEXT:    ld (ix - 19), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 16)
; Z80-NEXT:    ld h, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    call __llremu
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld (ix - 4), e
; Z80-NEXT:    ld (ix - 3), d
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 6), l
; Z80-NEXT:    ld (ix - 5), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    push de
; Z80-NEXT:    ld hl, 1
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    push de
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    call __llcmpu
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    ccf
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld iyl, a
; Z80-NEXT:    inc iyl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    ld (ix - 18), c
; Z80-NEXT:    ld (ix - 17), b
; Z80-NEXT:    call __llctlz
; Z80-NEXT:    ld l, a
; Z80-NEXT:    ld a, iyl
; Z80-NEXT:    pop de
; Z80-NEXT:    ld h, 0
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld e, c
; Z80-NEXT:    ld d, b
; Z80-NEXT:    call __lladd
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld iy, 10
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld sp, iy
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld iy, 32
; Z80-NEXT:    jr nz, BB55_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:  BB55_2:
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    jr nz, BB55_4
; Z80-NEXT:  ; %bb.3:
; Z80-NEXT:    ex de, hl
; Z80-NEXT:  BB55_4:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    jr nz, BB55_6
; Z80-NEXT:  ; %bb.5:
; Z80-NEXT:    ld e, c
; Z80-NEXT:    ld d, b
; Z80-NEXT:  BB55_6:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    jr nz, BB55_8
; Z80-NEXT:  ; %bb.7:
; Z80-NEXT:    ld c, (ix - 8)
; Z80-NEXT:    ld b, (ix - 7)
; Z80-NEXT:  BB55_8:
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    call __llsub
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 20)
; Z80-NEXT:    ld h, (ix - 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 12)
; Z80-NEXT:    ld h, (ix - 11)
; Z80-NEXT:    ld e, (ix - 14)
; Z80-NEXT:    ld d, (ix - 13)
; Z80-NEXT:    ld c, (ix - 16)
; Z80-NEXT:    ld b, (ix - 15)
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 12), l
; Z80-NEXT:    ld (ix - 11), h
; Z80-NEXT:    ld (ix - 14), e
; Z80-NEXT:    ld (ix - 13), d
; Z80-NEXT:    ld (ix - 16), c
; Z80-NEXT:    ld (ix - 15), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 20), l
; Z80-NEXT:    ld (ix - 19), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    ld c, (ix - 18)
; Z80-NEXT:    ld b, (ix - 17)
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld (ix - 4), e
; Z80-NEXT:    ld (ix - 3), d
; Z80-NEXT:    ld (ix - 6), c
; Z80-NEXT:    ld (ix - 5), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    ld hl, 1
; Z80-NEXT:    ld e, c
; Z80-NEXT:    ld d, b
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 18), l
; Z80-NEXT:    ld (ix - 17), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 1
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ld h, (ix - 17)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 18), l
; Z80-NEXT:    ld (ix - 17), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ld h, (ix - 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    ld e, (ix + 14)
; Z80-NEXT:    ld d, (ix + 15)
; Z80-NEXT:    ld c, (ix + 16)
; Z80-NEXT:    ld b, (ix + 17)
; Z80-NEXT:    call __lladd
; Z80-NEXT:    ld (ix - 18), l
; Z80-NEXT:    ld (ix - 17), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ld h, (ix - 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    ld c, (ix - 6)
; Z80-NEXT:    ld b, (ix - 5)
; Z80-NEXT:    call __lldivu
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 20)
; Z80-NEXT:    ld h, (ix - 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 12)
; Z80-NEXT:    ld h, (ix - 11)
; Z80-NEXT:    ld e, (ix - 14)
; Z80-NEXT:    ld d, (ix - 13)
; Z80-NEXT:    ld c, (ix - 16)
; Z80-NEXT:    ld b, (ix - 15)
; Z80-NEXT:    call __lladd
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: udiv.fix.sat.i64.32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 20
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld iy, (ix + 12)
; EZ80-CODE16-NEXT:    ld bc, (ix + 14)
; EZ80-CODE16-NEXT:    ld de, (ix + 16)
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    call __lldivu
; EZ80-CODE16-NEXT:    ld (ix - 12), hl
; EZ80-CODE16-NEXT:    ld (ix - 14), de
; EZ80-CODE16-NEXT:    ld (ix - 16), bc
; EZ80-CODE16-NEXT:    ld (ix - 20), iy
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 16)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 14)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    call __llremu
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld (ix - 4), de
; EZ80-CODE16-NEXT:    ld (ix - 6), iy
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, 1
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    call __llcmpu
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 8), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 8)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld iyl, a
; EZ80-CODE16-NEXT:    inc iyl
; EZ80-CODE16-NEXT:    ld hl, (ix - 6)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    ld (ix - 18), bc
; EZ80-CODE16-NEXT:    call __llctlz
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    ld a, iyl
; EZ80-CODE16-NEXT:    pop de
; EZ80-CODE16-NEXT:    ld h, 0
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld e, c
; EZ80-CODE16-NEXT:    ld d, b
; EZ80-CODE16-NEXT:    call __lladd
; EZ80-CODE16-NEXT:    ld (ix - 8), iy
; EZ80-CODE16-NEXT:    ld iy, 10
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld sp, iy
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld iy, 32
; EZ80-CODE16-NEXT:    jr nz, BB55_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:  BB55_2:
; EZ80-CODE16-NEXT:    ld (ix - 10), iy
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    jr nz, BB55_4
; EZ80-CODE16-NEXT:  ; %bb.3:
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:  BB55_4:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    jr nz, BB55_6
; EZ80-CODE16-NEXT:  ; %bb.5:
; EZ80-CODE16-NEXT:    ld e, c
; EZ80-CODE16-NEXT:    ld d, b
; EZ80-CODE16-NEXT:  BB55_6:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    jr nz, BB55_8
; EZ80-CODE16-NEXT:  ; %bb.7:
; EZ80-CODE16-NEXT:    ld bc, (ix - 8)
; EZ80-CODE16-NEXT:  BB55_8:
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    call __llsub
; EZ80-CODE16-NEXT:    ld (ix - 8), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 20)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 12)
; EZ80-CODE16-NEXT:    ld de, (ix - 14)
; EZ80-CODE16-NEXT:    ld bc, (ix - 16)
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 12), hl
; EZ80-CODE16-NEXT:    ld (ix - 14), de
; EZ80-CODE16-NEXT:    ld (ix - 16), bc
; EZ80-CODE16-NEXT:    ld (ix - 20), iy
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 6)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    ld bc, (ix - 18)
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld (ix - 4), de
; EZ80-CODE16-NEXT:    ld (ix - 6), bc
; EZ80-CODE16-NEXT:    ld (ix - 10), iy
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, 1
; EZ80-CODE16-NEXT:    ld e, c
; EZ80-CODE16-NEXT:    ld d, b
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 18), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 1
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 18)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 18), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    ld de, (ix + 14)
; EZ80-CODE16-NEXT:    ld bc, (ix + 16)
; EZ80-CODE16-NEXT:    call __lladd
; EZ80-CODE16-NEXT:    ld (ix - 18), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    ld bc, (ix - 6)
; EZ80-CODE16-NEXT:    call __lldivu
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 20)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 12)
; EZ80-CODE16-NEXT:    ld de, (ix - 14)
; EZ80-CODE16-NEXT:    ld bc, (ix - 16)
; EZ80-CODE16-NEXT:    call __lladd
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: udiv.fix.sat.i64.32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 21
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld bc, (ix + 12)
; EZ80-NEXT:    ld de, (ix + 15)
; EZ80-NEXT:    ld hl, (ix + 18)
; EZ80-NEXT:    ld iy, (ix + 21)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __lldivu
; EZ80-NEXT:    ld (ix - 9), hl
; EZ80-NEXT:    ld (ix - 12), de
; EZ80-NEXT:    ld (ix - 15), bc
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld hl, (ix + 18)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ld bc, (ix + 12)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llremu
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld (ix - 3), iy
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, 256
; EZ80-NEXT:    push hl
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    call __llcmpu
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 6), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 6)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ccf
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ld iyl, a
; EZ80-NEXT:    inc iyl
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    ld (ix - 18), de
; EZ80-NEXT:    ld (ix - 21), bc
; EZ80-NEXT:    call __llctlz
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    ld a, iyl
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    push de
; EZ80-NEXT:    push de
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __lladd
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    jr nz, BB55_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:  BB55_2:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    ld hl, 0
; EZ80-NEXT:    jr nz, BB55_4
; EZ80-NEXT:  ; %bb.3:
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:  BB55_4:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    ld.sis de, 0
; EZ80-NEXT:    ; kill: def $de killed $de def $ude
; EZ80-NEXT:    jr nz, BB55_6
; EZ80-NEXT:  ; %bb.5:
; EZ80-NEXT:    ld e, c
; EZ80-NEXT:    ld d, b
; EZ80-NEXT:  BB55_6:
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld hl, 32
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llsub
; EZ80-NEXT:    ld (ix - 6), hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld hl, 32
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 9)
; EZ80-NEXT:    ld de, (ix - 12)
; EZ80-NEXT:    ld bc, (ix - 15)
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    ld (ix - 9), hl
; EZ80-NEXT:    ld (ix - 12), de
; EZ80-NEXT:    ld (ix - 15), bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    ld de, (ix - 18)
; EZ80-NEXT:    ld bc, (ix - 21)
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    ld (ix - 18), de
; EZ80-NEXT:    ld (ix - 21), bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, (ix - 6)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, 1
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld iy, 1
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    ld de, (ix + 18)
; EZ80-NEXT:    ld bc, (ix + 21)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __lladd
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    ld de, (ix - 18)
; EZ80-NEXT:    ld bc, (ix - 21)
; EZ80-NEXT:    call __lldivu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, (ix - 6)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 9)
; EZ80-NEXT:    ld de, (ix - 12)
; EZ80-NEXT:    ld bc, (ix - 15)
; EZ80-NEXT:    call __lladd
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i64 @llvm.udiv.fix.sat.i64(i64 %0, i64 %1, i32 32)
  ret i64 %3
}
