; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=z80 < %s | FileCheck %s --check-prefixes=Z80
; RUN: llc -mtriple=ez80-code16 < %s | FileCheck %s --check-prefixes=EZ80-CODE16
; RUN: llc -mtriple=ez80 < %s | FileCheck %s --check-prefixes=EZ80

declare i8 @llvm.abs.i8(i8, i1)
define i8 @abs.i8(i8) {
; Z80-LABEL: abs.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld a, l
; Z80-NEXT:    rlc a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld e, a
; Z80-NEXT:    ld a, l
; Z80-NEXT:    add a, e
; Z80-NEXT:    xor a, e
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: abs.i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld l, (iy + 2)
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    rlc a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld e, a
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    add a, e
; EZ80-CODE16-NEXT:    xor a, e
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: abs.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld l, (iy + 3)
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    rlc a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    add a, e
; EZ80-NEXT:    xor a, e
; EZ80-NEXT:    ret
  call i8 @llvm.abs.i8(i8 %0, i1 false)
  ret i8 %2
}
declare i16 @llvm.abs.i16(i16, i1)
define i16 @abs.i16(i16) {
; Z80-LABEL: abs.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld c, (iy + 2)
; Z80-NEXT:    ld b, (iy + 3)
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    ld iyl, c
; Z80-NEXT:    ld iyh, b
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    add hl, de
; Z80-NEXT:    ld a, l
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    xor a, e
; Z80-NEXT:    ld l, a
; Z80-NEXT:    ld a, b
; Z80-NEXT:    xor a, d
; Z80-NEXT:    ld h, a
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: abs.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld bc, (iy + 2)
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    ld iyl, c
; EZ80-CODE16-NEXT:    ld iyh, b
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    add hl, de
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    xor a, e
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    ld a, b
; EZ80-CODE16-NEXT:    xor a, d
; EZ80-CODE16-NEXT:    ld h, a
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: abs.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld bc, (iy + 3)
; EZ80-NEXT:    ld l, c
; EZ80-NEXT:    ld h, b
; EZ80-NEXT:    ld iyl, c
; EZ80-NEXT:    ld iyh, b
; EZ80-NEXT:    add.sis iy, iy
; EZ80-NEXT:    sbc.sis hl, hl
; EZ80-NEXT:    ld e, l
; EZ80-NEXT:    ld d, h
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    add.sis hl, de
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    xor a, e
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    ld a, b
; EZ80-NEXT:    xor a, d
; EZ80-NEXT:    ld h, a
; EZ80-NEXT:    ret
  call i16 @llvm.abs.i16(i16 %0, i1 false)
  ret i16 %2
}
declare i32 @llvm.abs.i32(i32, i1)
define i32 @abs.i32(i32) {
; Z80-LABEL: abs.i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld c, (ix + 4)
; Z80-NEXT:    ld b, (ix + 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld a, 31
; Z80-NEXT:    call __lshrs
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    call __ladd
; Z80-NEXT:    call __lxor
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: abs.i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld bc, (ix + 4)
; EZ80-CODE16-NEXT:    ld iy, (ix + 6)
; EZ80-CODE16-NEXT:    ld a, 31
; EZ80-CODE16-NEXT:    call __lshrs
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    call __lxor
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: abs.i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld iy, (ix + 6)
; EZ80-NEXT:    ld a, (ix + 9)
; EZ80-NEXT:    ld l, 31
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    call __lshrs
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    call __lxor
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i32 @llvm.abs.i32(i32 %0, i1 false)
  ret i32 %2
}
declare i64 @llvm.abs.i64(i64, i1)
define i64 @abs.i64(i64) {
; Z80-LABEL: abs.i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ld iy, 63
; Z80-NEXT:    push iy
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    call __llshrs
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld (ix - 4), e
; Z80-NEXT:    ld (ix - 3), d
; Z80-NEXT:    ld (ix - 6), c
; Z80-NEXT:    ld (ix - 5), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    call __lladd
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    call __llxor
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: abs.i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 10
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    ld iy, 63
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    call __llshrs
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld (ix - 4), de
; EZ80-CODE16-NEXT:    ld (ix - 6), bc
; EZ80-CODE16-NEXT:    ld (ix - 8), iy
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    call __lladd
; EZ80-CODE16-NEXT:    ld (ix - 10), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 6)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    call __llxor
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: abs.i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 9
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ld bc, (ix + 12)
; EZ80-NEXT:    ld iy, 63
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llshrs
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld (ix - 3), iy
; EZ80-NEXT:    ld (ix - 6), de
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    ld (ix - 9), bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push de
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ld bc, (ix + 12)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __lladd
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, (ix - 9)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld iy, (ix - 6)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld iy, (ix - 3)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llxor
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i64 @llvm.abs.i64(i64 %0, i1 false)
  ret i64 %2
}

declare i8 @llvm.smax.i8(i8, i8)
define i8 @smax.i8(i8, i8) {
; Z80-LABEL: smax.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld a, l
; Z80-NEXT:    add a, -128
; Z80-NEXT:    ld c, a
; Z80-NEXT:    ld a, e
; Z80-NEXT:    add a, -128
; Z80-NEXT:    cp a, c
; Z80-NEXT:    jr c, BB4_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld l, e
; Z80-NEXT:  BB4_2:
; Z80-NEXT:    ld a, l
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: smax.i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld l, (iy + 2)
; EZ80-CODE16-NEXT:    ld e, (iy + 4)
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    add a, -128
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    add a, -128
; EZ80-CODE16-NEXT:    cp a, c
; EZ80-CODE16-NEXT:    jr c, BB4_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld l, e
; EZ80-CODE16-NEXT:  BB4_2:
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: smax.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld l, (iy + 3)
; EZ80-NEXT:    ld e, (iy + 6)
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    add a, -128
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    add a, -128
; EZ80-NEXT:    cp a, c
; EZ80-NEXT:    jr c, BB4_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:  BB4_2:
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    ret
  call i8 @llvm.smax.i8(i8 %0, i8 %1)
  ret i8 %3
}
declare i16 @llvm.smax.i16(i16, i16)
define i16 @smax.i16(i16, i16) {
; Z80-LABEL: smax.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld e, (ix + 4)
; Z80-NEXT:    ld d, (ix + 5)
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ld bc, -32768
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    add iy, bc
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    jr c, BB5_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:  BB5_2:
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: smax.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld de, (ix + 4)
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, -32768
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    add iy, bc
; EZ80-CODE16-NEXT:    add hl, bc
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    or a, a
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    jr c, BB5_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:  BB5_2:
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: smax.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld de, (ix + 6)
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ld.sis bc, -32768
; EZ80-NEXT:    ld iyl, e
; EZ80-NEXT:    ld iyh, d
; EZ80-NEXT:    add.sis iy, bc
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    add.sis hl, bc
; EZ80-NEXT:    ld c, iyl
; EZ80-NEXT:    ld b, iyh
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, bc
; EZ80-NEXT:    jp c, BB5_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ; kill: def $de killed $de killed $ude def $ude
; EZ80-NEXT:  BB5_2:
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i16 @llvm.smax.i16(i16 %0, i16 %1)
  ret i16 %3
}
declare i32 @llvm.smax.i32(i32, i32)
define i32 @smax.i32(i32, i32) {
; Z80-LABEL: smax.i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld c, (ix + 4)
; Z80-NEXT:    ld b, (ix + 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    call __lcmps
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    jp m, BB6_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr z, BB6_3
; Z80-NEXT:    jr BB6_4
; Z80-NEXT:  BB6_2:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB6_4
; Z80-NEXT:  BB6_3:
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:  BB6_4:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB6_6
; Z80-NEXT:  ; %bb.5:
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:  BB6_6:
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: smax.i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld bc, (ix + 4)
; EZ80-CODE16-NEXT:    ld iy, (ix + 6)
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    call __lcmps
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    jp m, BB6_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr z, BB6_3
; EZ80-CODE16-NEXT:    jr BB6_4
; EZ80-CODE16-NEXT:  BB6_2:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB6_4
; EZ80-CODE16-NEXT:  BB6_3:
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:  BB6_4:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB6_6
; EZ80-CODE16-NEXT:  ; %bb.5:
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:  BB6_6:
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: smax.i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld bc, (iy + 3)
; EZ80-NEXT:    ld a, (iy + 6)
; EZ80-NEXT:    ld hl, (iy + 9)
; EZ80-NEXT:    ld e, (iy + 12)
; EZ80-NEXT:    call __lcmps
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    jp m, BB6_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld d, 0
; EZ80-NEXT:    bit 0, d
; EZ80-NEXT:    jr z, BB6_3
; EZ80-NEXT:    jr BB6_4
; EZ80-NEXT:  BB6_2:
; EZ80-NEXT:    ld d, 1
; EZ80-NEXT:    bit 0, d
; EZ80-NEXT:    jr nz, BB6_4
; EZ80-NEXT:  BB6_3:
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:  BB6_4:
; EZ80-NEXT:    bit 0, d
; EZ80-NEXT:    jr nz, BB6_6
; EZ80-NEXT:  ; %bb.5:
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:  BB6_6:
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ret
  call i32 @llvm.smax.i32(i32 %0, i32 %1)
  ret i32 %3
}
declare i64 @llvm.smax.i64(i64, i64)
define i64 @smax.i64(i64, i64) {
; Z80-LABEL: smax.i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -5
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ld e, (ix + 18)
; Z80-NEXT:    ld d, (ix + 19)
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    ld e, (ix + 14)
; Z80-NEXT:    ld d, (ix + 15)
; Z80-NEXT:    ld c, (ix + 16)
; Z80-NEXT:    ld b, (ix + 17)
; Z80-NEXT:    call __llcmps
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 5), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld iy, 10
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld sp, iy
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 5)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    jp m, BB7_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    jr BB7_3
; Z80-NEXT:  BB7_2:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:  BB7_3:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    jp z, BB7_9
; Z80-NEXT:  ; %bb.4:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB7_10
; Z80-NEXT:  BB7_5:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB7_11
; Z80-NEXT:  BB7_6:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB7_8
; Z80-NEXT:  BB7_7:
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:  BB7_8:
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, (ix - 2)
; Z80-NEXT:    ld d, (ix - 1)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:  BB7_9:
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp nz, BB7_5
; Z80-NEXT:  BB7_10:
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp nz, BB7_6
; Z80-NEXT:  BB7_11:
; Z80-NEXT:    ld c, (ix + 16)
; Z80-NEXT:    ld b, (ix + 17)
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB7_7
; Z80-NEXT:    jp BB7_8
;
; EZ80-CODE16-LABEL: smax.i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 5
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld iy, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    ld de, (ix + 18)
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld (ix - 2), iy
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    ld de, (ix + 14)
; EZ80-CODE16-NEXT:    ld bc, (ix + 16)
; EZ80-CODE16-NEXT:    call __llcmps
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 5), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld iy, 10
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld sp, iy
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 5)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    jp m, BB7_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    jr BB7_3
; EZ80-CODE16-NEXT:  BB7_2:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:  BB7_3:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld iy, (ix + 4)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    jp z, BB7_9
; EZ80-CODE16-NEXT:  ; %bb.4:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB7_10
; EZ80-CODE16-NEXT:  BB7_5:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB7_11
; EZ80-CODE16-NEXT:  BB7_6:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB7_8
; EZ80-CODE16-NEXT:  BB7_7:
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:  BB7_8:
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld de, (ix - 2)
; EZ80-CODE16-NEXT:    ld iy, (ix - 4)
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
; EZ80-CODE16-NEXT:  BB7_9:
; EZ80-CODE16-NEXT:    ld iy, (ix + 12)
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp nz, BB7_5
; EZ80-CODE16-NEXT:  BB7_10:
; EZ80-CODE16-NEXT:    ld hl, (ix + 14)
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp nz, BB7_6
; EZ80-CODE16-NEXT:  BB7_11:
; EZ80-CODE16-NEXT:    ld bc, (ix + 16)
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB7_7
; EZ80-CODE16-NEXT:    jp BB7_8
;
; EZ80-LABEL: smax.i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 4
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ld iy, (ix + 12)
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    ld bc, (ix + 21)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld de, (ix + 6)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld de, (ix + 6)
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld de, (ix + 18)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llcmps
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 4), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 4)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    jp m, BB7_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    jr BB7_3
; EZ80-NEXT:  BB7_2:
; EZ80-NEXT:    ld a, 1
; EZ80-NEXT:  BB7_3:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    ld iy, (ix + 12)
; EZ80-NEXT:    ld bc, (ix + 9)
; EZ80-NEXT:    jp z, BB7_8
; EZ80-NEXT:  ; %bb.4:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB7_9
; EZ80-NEXT:  BB7_5:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB7_7
; EZ80-NEXT:  BB7_6:
; EZ80-NEXT:    ld iy, (ix + 21)
; EZ80-NEXT:    ; kill: def $iy killed $iy killed $uiy def $uiy
; EZ80-NEXT:  BB7_7:
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld c, iyl
; EZ80-NEXT:    ld b, iyh
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB7_8:
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB7_5
; EZ80-NEXT:  BB7_9:
; EZ80-NEXT:    ld bc, (ix + 18)
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB7_6
; EZ80-NEXT:    jp BB7_7
  call i64 @llvm.smax.i64(i64 %0, i64 %1)
  ret i64 %3
}

declare i8 @llvm.smin.i8(i8, i8)
define i8 @smin.i8(i8, i8) {
; Z80-LABEL: smin.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld a, e
; Z80-NEXT:    add a, -128
; Z80-NEXT:    ld c, a
; Z80-NEXT:    ld a, l
; Z80-NEXT:    add a, -128
; Z80-NEXT:    cp a, c
; Z80-NEXT:    jr c, BB8_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld l, e
; Z80-NEXT:  BB8_2:
; Z80-NEXT:    ld a, l
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: smin.i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld l, (iy + 2)
; EZ80-CODE16-NEXT:    ld e, (iy + 4)
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    add a, -128
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    add a, -128
; EZ80-CODE16-NEXT:    cp a, c
; EZ80-CODE16-NEXT:    jr c, BB8_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld l, e
; EZ80-CODE16-NEXT:  BB8_2:
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: smin.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld l, (iy + 3)
; EZ80-NEXT:    ld e, (iy + 6)
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    add a, -128
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    add a, -128
; EZ80-NEXT:    cp a, c
; EZ80-NEXT:    jr c, BB8_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:  BB8_2:
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    ret
  call i8 @llvm.smin.i8(i8 %0, i8 %1)
  ret i8 %3
}
declare i16 @llvm.smin.i16(i16, i16)
define i16 @smin.i16(i16, i16) {
; Z80-LABEL: smin.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld e, (ix + 4)
; Z80-NEXT:    ld d, (ix + 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld bc, -32768
; Z80-NEXT:    add iy, bc
; Z80-NEXT:    ld l, e
; Z80-NEXT:    ld h, d
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    jr c, BB9_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:  BB9_2:
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: smin.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld de, (ix + 4)
; EZ80-CODE16-NEXT:    ld iy, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, -32768
; EZ80-CODE16-NEXT:    add iy, bc
; EZ80-CODE16-NEXT:    ld l, e
; EZ80-CODE16-NEXT:    ld h, d
; EZ80-CODE16-NEXT:    add hl, bc
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    or a, a
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    jr c, BB9_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:  BB9_2:
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: smin.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld de, (ix + 6)
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ld.sis bc, -32768
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld iyl, e
; EZ80-NEXT:    ld iyh, d
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    add.sis iy, bc
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:    add.sis hl, bc
; EZ80-NEXT:    ld c, iyl
; EZ80-NEXT:    ld b, iyh
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, bc
; EZ80-NEXT:    jp c, BB9_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ; kill: def $de killed $de killed $ude def $ude
; EZ80-NEXT:  BB9_2:
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i16 @llvm.smin.i16(i16 %0, i16 %1)
  ret i16 %3
}
declare i32 @llvm.smin.i32(i32, i32)
define i32 @smin.i32(i32, i32) {
; Z80-LABEL: smin.i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld d, (iy + 5)
; Z80-NEXT:    ld c, (iy + 6)
; Z80-NEXT:    ld b, (iy + 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (iy + 8)
; Z80-NEXT:    ld h, (iy + 9)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lcmps
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    jp m, BB10_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr z, BB10_3
; Z80-NEXT:    jr BB10_4
; Z80-NEXT:  BB10_2:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB10_4
; Z80-NEXT:  BB10_3:
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:  BB10_4:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr z, BB10_6
; Z80-NEXT:  ; %bb.5:
; Z80-NEXT:    ret
; Z80-NEXT:  BB10_6:
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: smin.i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld de, (iy + 4)
; EZ80-CODE16-NEXT:    ld bc, (iy + 6)
; EZ80-CODE16-NEXT:    ld iy, (iy + 8)
; EZ80-CODE16-NEXT:    call __lcmps
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    jp m, BB10_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr z, BB10_3
; EZ80-CODE16-NEXT:    jr BB10_4
; EZ80-CODE16-NEXT:  BB10_2:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB10_4
; EZ80-CODE16-NEXT:  BB10_3:
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:  BB10_4:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr z, BB10_6
; EZ80-CODE16-NEXT:  ; %bb.5:
; EZ80-CODE16-NEXT:    ret
; EZ80-CODE16-NEXT:  BB10_6:
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: smin.i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld e, (iy + 6)
; EZ80-NEXT:    ld bc, (iy + 9)
; EZ80-NEXT:    ld a, (iy + 12)
; EZ80-NEXT:    call __lcmps
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    jp m, BB10_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld d, 0
; EZ80-NEXT:    bit 0, d
; EZ80-NEXT:    jr z, BB10_3
; EZ80-NEXT:    jr BB10_4
; EZ80-NEXT:  BB10_2:
; EZ80-NEXT:    ld d, 1
; EZ80-NEXT:    bit 0, d
; EZ80-NEXT:    jr nz, BB10_4
; EZ80-NEXT:  BB10_3:
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:  BB10_4:
; EZ80-NEXT:    bit 0, d
; EZ80-NEXT:    jr z, BB10_6
; EZ80-NEXT:  ; %bb.5:
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB10_6:
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ret
  call i32 @llvm.smin.i32(i32 %0, i32 %1)
  ret i32 %3
}
declare i64 @llvm.smin.i64(i64, i64)
define i64 @smin.i64(i64, i64) {
; Z80-LABEL: smin.i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    dec sp
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld c, (ix + 14)
; Z80-NEXT:    ld b, (ix + 15)
; Z80-NEXT:    ld e, (ix + 16)
; Z80-NEXT:    ld d, (ix + 17)
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    call __llcmps
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 1), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 1)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    jp m, BB11_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    jr BB11_3
; Z80-NEXT:  BB11_2:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:  BB11_3:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    jp z, BB11_9
; Z80-NEXT:  ; %bb.4:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB11_10
; Z80-NEXT:  BB11_5:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB11_11
; Z80-NEXT:  BB11_6:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB11_8
; Z80-NEXT:  BB11_7:
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:  BB11_8:
; Z80-NEXT:    inc sp
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:  BB11_9:
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp nz, BB11_5
; Z80-NEXT:  BB11_10:
; Z80-NEXT:    ld e, (ix + 14)
; Z80-NEXT:    ld d, (ix + 15)
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp nz, BB11_6
; Z80-NEXT:  BB11_11:
; Z80-NEXT:    ld c, (ix + 16)
; Z80-NEXT:    ld b, (ix + 17)
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB11_7
; Z80-NEXT:    jp BB11_8
;
; EZ80-CODE16-LABEL: smin.i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    dec sp
; EZ80-CODE16-NEXT:    ld iy, (ix + 10)
; EZ80-CODE16-NEXT:    ld bc, (ix + 14)
; EZ80-CODE16-NEXT:    ld de, (ix + 16)
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    call __llcmps
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 1), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 1)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    jp m, BB11_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    jr BB11_3
; EZ80-CODE16-NEXT:  BB11_2:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:  BB11_3:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    jp z, BB11_9
; EZ80-CODE16-NEXT:  ; %bb.4:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB11_10
; EZ80-CODE16-NEXT:  BB11_5:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB11_11
; EZ80-CODE16-NEXT:  BB11_6:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB11_8
; EZ80-CODE16-NEXT:  BB11_7:
; EZ80-CODE16-NEXT:    ld iy, (ix + 18)
; EZ80-CODE16-NEXT:  BB11_8:
; EZ80-CODE16-NEXT:    inc sp
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
; EZ80-CODE16-NEXT:  BB11_9:
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp nz, BB11_5
; EZ80-CODE16-NEXT:  BB11_10:
; EZ80-CODE16-NEXT:    ld de, (ix + 14)
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp nz, BB11_6
; EZ80-CODE16-NEXT:  BB11_11:
; EZ80-CODE16-NEXT:    ld bc, (ix + 16)
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB11_7
; EZ80-CODE16-NEXT:    jp BB11_8
;
; EZ80-LABEL: smin.i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    dec sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ld bc, (ix + 12)
; EZ80-NEXT:    ld iy, (ix + 21)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld iy, (ix + 18)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld iy, (ix + 15)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llcmps
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 1), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 1)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    jp m, BB11_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr z, BB11_3
; EZ80-NEXT:    jr BB11_4
; EZ80-NEXT:  BB11_2:
; EZ80-NEXT:    ld a, 1
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB11_4
; EZ80-NEXT:  BB11_3:
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:  BB11_4:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB11_8
; EZ80-NEXT:  ; %bb.5:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB11_7
; EZ80-NEXT:  BB11_6:
; EZ80-NEXT:    ld bc, (ix + 21)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc def $ubc
; EZ80-NEXT:  BB11_7:
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    inc sp
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB11_8:
; EZ80-NEXT:    ld de, (ix + 18)
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB11_6
; EZ80-NEXT:    jp BB11_7
  call i64 @llvm.smin.i64(i64 %0, i64 %1)
  ret i64 %3
}

declare i8 @llvm.umax.i8(i8, i8)
define i8 @umax.i8(i8, i8) {
; Z80-LABEL: umax.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld a, (iy + 4)
; Z80-NEXT:    cp a, l
; Z80-NEXT:    jr c, BB12_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld l, a
; Z80-NEXT:  BB12_2:
; Z80-NEXT:    ld a, l
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: umax.i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld l, (iy + 2)
; EZ80-CODE16-NEXT:    ld a, (iy + 4)
; EZ80-CODE16-NEXT:    cp a, l
; EZ80-CODE16-NEXT:    jr c, BB12_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:  BB12_2:
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: umax.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld l, (iy + 3)
; EZ80-NEXT:    ld a, (iy + 6)
; EZ80-NEXT:    cp a, l
; EZ80-NEXT:    jr c, BB12_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:  BB12_2:
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    ret
  call i8 @llvm.umax.i8(i8 %0, i8 %1)
  ret i8 %3
}
declare i16 @llvm.umax.i16(i16, i16)
define i16 @umax.i16(i16, i16) {
; Z80-LABEL: umax.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld c, (iy + 2)
; Z80-NEXT:    ld b, (iy + 3)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld d, (iy + 5)
; Z80-NEXT:    ld l, e
; Z80-NEXT:    ld h, d
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    jr c, BB13_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld c, e
; Z80-NEXT:    ld b, d
; Z80-NEXT:  BB13_2:
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: umax.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld bc, (iy + 2)
; EZ80-CODE16-NEXT:    ld de, (iy + 4)
; EZ80-CODE16-NEXT:    ld l, e
; EZ80-CODE16-NEXT:    ld h, d
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    jr c, BB13_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld c, e
; EZ80-CODE16-NEXT:    ld b, d
; EZ80-CODE16-NEXT:  BB13_2:
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: umax.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld bc, (iy + 3)
; EZ80-NEXT:    ld de, (iy + 6)
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:    sbc.sis hl, bc
; EZ80-NEXT:    jr c, BB13_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld c, e
; EZ80-NEXT:    ld b, d
; EZ80-NEXT:  BB13_2:
; EZ80-NEXT:    ld l, c
; EZ80-NEXT:    ld h, b
; EZ80-NEXT:    ret
  call i16 @llvm.umax.i16(i16 %0, i16 %1)
  ret i16 %3
}
declare i32 @llvm.umax.i32(i32, i32)
define i32 @umax.i32(i32, i32) {
; Z80-LABEL: umax.i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld c, (ix + 4)
; Z80-NEXT:    ld b, (ix + 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    call __lcmpu
; Z80-NEXT:    ccf
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    inc a
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB14_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:  BB14_2:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB14_4
; Z80-NEXT:  ; %bb.3:
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:  BB14_4:
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: umax.i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld bc, (ix + 4)
; EZ80-CODE16-NEXT:    ld iy, (ix + 6)
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    call __lcmpu
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    inc a
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB14_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:  BB14_2:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB14_4
; EZ80-CODE16-NEXT:  ; %bb.3:
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:  BB14_4:
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: umax.i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld bc, (iy + 3)
; EZ80-NEXT:    ld d, (iy + 6)
; EZ80-NEXT:    ld hl, (iy + 9)
; EZ80-NEXT:    ld e, (iy + 12)
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __lcmpu
; EZ80-NEXT:    ccf
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    inc a
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB14_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:  BB14_2:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB14_4
; EZ80-NEXT:  ; %bb.3:
; EZ80-NEXT:    ld d, e
; EZ80-NEXT:  BB14_4:
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld e, d
; EZ80-NEXT:    ret
  call i32 @llvm.umax.i32(i32 %0, i32 %1)
  ret i32 %3
}
declare i64 @llvm.umax.i64(i64, i64)
define i64 @umax.i64(i64, i64) {
; Z80-LABEL: umax.i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -5
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ld e, (ix + 18)
; Z80-NEXT:    ld d, (ix + 19)
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    ld e, (ix + 14)
; Z80-NEXT:    ld d, (ix + 15)
; Z80-NEXT:    ld c, (ix + 16)
; Z80-NEXT:    ld b, (ix + 17)
; Z80-NEXT:    call __llcmpu
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 5), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld iy, 10
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld sp, iy
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 5)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    ccf
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    inc a
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB15_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:  BB15_2:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    jr nz, BB15_4
; Z80-NEXT:  ; %bb.3:
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:  BB15_4:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    jr nz, BB15_6
; Z80-NEXT:  ; %bb.5:
; Z80-NEXT:    ld c, (ix + 16)
; Z80-NEXT:    ld b, (ix + 17)
; Z80-NEXT:  BB15_6:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB15_8
; Z80-NEXT:  ; %bb.7:
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:  BB15_8:
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: umax.i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 5
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld iy, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    ld de, (ix + 18)
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    ld de, (ix + 14)
; EZ80-CODE16-NEXT:    ld bc, (ix + 16)
; EZ80-CODE16-NEXT:    call __llcmpu
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 5), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld iy, 10
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld sp, iy
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 5)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    inc a
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB15_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:  BB15_2:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld iy, (ix + 6)
; EZ80-CODE16-NEXT:    jr nz, BB15_4
; EZ80-CODE16-NEXT:  ; %bb.3:
; EZ80-CODE16-NEXT:    ld iy, (ix + 14)
; EZ80-CODE16-NEXT:  BB15_4:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    jr nz, BB15_6
; EZ80-CODE16-NEXT:  ; %bb.5:
; EZ80-CODE16-NEXT:    ld bc, (ix + 16)
; EZ80-CODE16-NEXT:  BB15_6:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB15_8
; EZ80-CODE16-NEXT:  ; %bb.7:
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:  BB15_8:
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    ld iy, (ix - 4)
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: umax.i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 4
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ld iy, (ix + 12)
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    ld bc, (ix + 21)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld de, (ix + 6)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld de, (ix + 6)
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld de, (ix + 18)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llcmpu
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 4), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 4)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ccf
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    inc a
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB15_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:  BB15_2:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    ld bc, (ix + 9)
; EZ80-NEXT:    jr nz, BB15_4
; EZ80-NEXT:  ; %bb.3:
; EZ80-NEXT:    ld bc, (ix + 18)
; EZ80-NEXT:  BB15_4:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    ld iy, (ix + 12)
; EZ80-NEXT:    jp nz, BB15_6
; EZ80-NEXT:  ; %bb.5:
; EZ80-NEXT:    ld iy, (ix + 21)
; EZ80-NEXT:    ; kill: def $iy killed $iy killed $uiy def $uiy
; EZ80-NEXT:  BB15_6:
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld c, iyl
; EZ80-NEXT:    ld b, iyh
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i64 @llvm.umax.i64(i64 %0, i64 %1)
  ret i64 %3
}

declare i8 @llvm.umin.i8(i8, i8)
define i8 @umin.i8(i8, i8) {
; Z80-LABEL: umin.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld a, (iy + 2)
; Z80-NEXT:    ld l, (iy + 4)
; Z80-NEXT:    cp a, l
; Z80-NEXT:    jr c, BB16_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, l
; Z80-NEXT:  BB16_2:
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: umin.i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld a, (iy + 2)
; EZ80-CODE16-NEXT:    ld l, (iy + 4)
; EZ80-CODE16-NEXT:    cp a, l
; EZ80-CODE16-NEXT:    jr c, BB16_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:  BB16_2:
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: umin.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld a, (iy + 3)
; EZ80-NEXT:    ld l, (iy + 6)
; EZ80-NEXT:    cp a, l
; EZ80-NEXT:    jr c, BB16_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:  BB16_2:
; EZ80-NEXT:    ret
  call i8 @llvm.umin.i8(i8 %0, i8 %1)
  ret i8 %3
}
declare i16 @llvm.umin.i16(i16, i16)
define i16 @umin.i16(i16, i16) {
; Z80-LABEL: umin.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld e, (iy + 2)
; Z80-NEXT:    ld d, (iy + 3)
; Z80-NEXT:    ld c, (iy + 4)
; Z80-NEXT:    ld b, (iy + 5)
; Z80-NEXT:    ld l, e
; Z80-NEXT:    ld h, d
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    jr c, BB17_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld e, c
; Z80-NEXT:    ld d, b
; Z80-NEXT:  BB17_2:
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: umin.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld de, (iy + 2)
; EZ80-CODE16-NEXT:    ld bc, (iy + 4)
; EZ80-CODE16-NEXT:    ld l, e
; EZ80-CODE16-NEXT:    ld h, d
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    jr c, BB17_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld e, c
; EZ80-CODE16-NEXT:    ld d, b
; EZ80-CODE16-NEXT:  BB17_2:
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: umin.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld de, (iy + 3)
; EZ80-NEXT:    ld bc, (iy + 6)
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:    sbc.sis hl, bc
; EZ80-NEXT:    jr c, BB17_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld e, c
; EZ80-NEXT:    ld d, b
; EZ80-NEXT:  BB17_2:
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:    ret
  call i16 @llvm.umin.i16(i16 %0, i16 %1)
  ret i16 %3
}
declare i32 @llvm.umin.i32(i32, i32)
define i32 @umin.i32(i32, i32) {
; Z80-LABEL: umin.i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld d, (iy + 5)
; Z80-NEXT:    ld c, (iy + 6)
; Z80-NEXT:    ld b, (iy + 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (iy + 8)
; Z80-NEXT:    ld h, (iy + 9)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lcmpu
; Z80-NEXT:    ccf
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    inc a
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr z, BB18_3
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr z, BB18_4
; Z80-NEXT:  BB18_2:
; Z80-NEXT:    ret
; Z80-NEXT:  BB18_3:
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB18_2
; Z80-NEXT:  BB18_4:
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: umin.i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld de, (iy + 4)
; EZ80-CODE16-NEXT:    ld bc, (iy + 6)
; EZ80-CODE16-NEXT:    ld iy, (iy + 8)
; EZ80-CODE16-NEXT:    call __lcmpu
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    inc a
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr z, BB18_3
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr z, BB18_4
; EZ80-CODE16-NEXT:  BB18_2:
; EZ80-CODE16-NEXT:    ret
; EZ80-CODE16-NEXT:  BB18_3:
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB18_2
; EZ80-CODE16-NEXT:  BB18_4:
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: umin.i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld e, (iy + 6)
; EZ80-NEXT:    ld bc, (iy + 9)
; EZ80-NEXT:    ld d, (iy + 12)
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __lcmpu
; EZ80-NEXT:    ccf
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    inc a
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr z, BB18_3
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr z, BB18_4
; EZ80-NEXT:  BB18_2:
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB18_3:
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB18_2
; EZ80-NEXT:  BB18_4:
; EZ80-NEXT:    ld e, d
; EZ80-NEXT:    ret
  call i32 @llvm.umin.i32(i32 %0, i32 %1)
  ret i32 %3
}
declare i64 @llvm.umin.i64(i64, i64)
define i64 @umin.i64(i64, i64) {
; Z80-LABEL: umin.i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    dec sp
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld e, (ix + 16)
; Z80-NEXT:    ld d, (ix + 17)
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    call __llcmpu
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 3), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 3)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    ccf
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    inc a
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB19_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:  BB19_2:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    jp z, BB19_7
; Z80-NEXT:  ; %bb.3:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB19_8
; Z80-NEXT:  BB19_4:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB19_6
; Z80-NEXT:  BB19_5:
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:  BB19_6:
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:  BB19_7:
; Z80-NEXT:    ld e, (ix + 14)
; Z80-NEXT:    ld d, (ix + 15)
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp nz, BB19_4
; Z80-NEXT:  BB19_8:
; Z80-NEXT:    ld c, (ix + 16)
; Z80-NEXT:    ld b, (ix + 17)
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB19_5
; Z80-NEXT:    jp BB19_6
;
; EZ80-CODE16-LABEL: umin.i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 3
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    ld iy, (ix + 10)
; EZ80-CODE16-NEXT:    ld de, (ix + 16)
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix + 14)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    call __llcmpu
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 3), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 3)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    inc a
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB19_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:  BB19_2:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    jp z, BB19_7
; EZ80-CODE16-NEXT:  ; %bb.3:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB19_8
; EZ80-CODE16-NEXT:  BB19_4:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB19_6
; EZ80-CODE16-NEXT:  BB19_5:
; EZ80-CODE16-NEXT:    ld iy, (ix + 18)
; EZ80-CODE16-NEXT:  BB19_6:
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
; EZ80-CODE16-NEXT:  BB19_7:
; EZ80-CODE16-NEXT:    ld de, (ix + 14)
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp nz, BB19_4
; EZ80-CODE16-NEXT:  BB19_8:
; EZ80-CODE16-NEXT:    ld bc, (ix + 16)
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB19_5
; EZ80-CODE16-NEXT:    jp BB19_6
;
; EZ80-LABEL: umin.i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    dec sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ld bc, (ix + 12)
; EZ80-NEXT:    ld iy, (ix + 21)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld iy, (ix + 18)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld iy, (ix + 15)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llcmpu
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 1), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 1)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ccf
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    inc a
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB19_5
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB19_6
; EZ80-NEXT:  BB19_2:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB19_4
; EZ80-NEXT:  BB19_3:
; EZ80-NEXT:    ld bc, (ix + 21)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc def $ubc
; EZ80-NEXT:  BB19_4:
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    inc sp
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB19_5:
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB19_2
; EZ80-NEXT:  BB19_6:
; EZ80-NEXT:    ld de, (ix + 18)
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB19_3
; EZ80-NEXT:    jp BB19_4
  call i64 @llvm.umin.i64(i64 %0, i64 %1)
  ret i64 %3
}

declare i8 @llvm.bitreverse.i8(i8)
define i8 @bitreverse.i8(i8) {
; Z80-LABEL: bitreverse.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld a, (iy + 2)
; Z80-NEXT:    call __bbitrev
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: bitreverse.i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld a, (iy + 2)
; EZ80-CODE16-NEXT:    call __bbitrev
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: bitreverse.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld a, (iy + 3)
; EZ80-NEXT:    call __bbitrev
; EZ80-NEXT:    ret
  call i8 @llvm.bitreverse.i8(i8 %0)
  ret i8 %2
}
declare i16 @llvm.bitreverse.i16(i16)
define i16 @bitreverse.i16(i16) {
; Z80-LABEL: bitreverse.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    call __sbitrev
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: bitreverse.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    call __sbitrev
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: bitreverse.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    call __sbitrev
; EZ80-NEXT:    ret
  call i16 @llvm.bitreverse.i16(i16 %0)
  ret i16 %2
}
declare i32 @llvm.bitreverse.i32(i32)
define i32 @bitreverse.i32(i32) {
; Z80-LABEL: bitreverse.i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld d, (iy + 5)
; Z80-NEXT:    call __lbitrev
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: bitreverse.i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld de, (iy + 4)
; EZ80-CODE16-NEXT:    call __lbitrev
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: bitreverse.i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld e, (iy + 6)
; EZ80-NEXT:    call __lbitrev
; EZ80-NEXT:    ret
  call i32 @llvm.bitreverse.i32(i32 %0)
  ret i32 %2
}
declare i64 @llvm.bitreverse.i64(i64)
define i64 @bitreverse.i64(i64) {
; Z80-LABEL: bitreverse.i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    push iy
; Z80-NEXT:    call __llbitrev
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: bitreverse.i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    ld iy, (ix + 10)
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    call __llbitrev
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: bitreverse.i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld de, (iy + 6)
; EZ80-NEXT:    ld bc, (iy + 9)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llbitrev
; EZ80-NEXT:    ret
  call i64 @llvm.bitreverse.i64(i64 %0)
  ret i64 %2
}

declare i16 @llvm.bswap.i16(i16)
define i16 @bswap.i16(i16) {
; Z80-LABEL: bswap.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld e, (iy + 2)
; Z80-NEXT:    ld d, (iy + 3)
; Z80-NEXT:    ld h, e
; Z80-NEXT:    ld l, d
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: bswap.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld de, (iy + 2)
; EZ80-CODE16-NEXT:    ld h, e
; EZ80-CODE16-NEXT:    ld l, d
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: bswap.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld de, (iy + 3)
; EZ80-NEXT:    ld h, e
; EZ80-NEXT:    ld l, d
; EZ80-NEXT:    ret
  call i16 @llvm.bswap.i16(i16 %0)
  ret i16 %2
}
declare i32 @llvm.bswap.i32(i32)
define i32 @bswap.i32(i32) {
; Z80-LABEL: bswap.i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld d, (iy + 5)
; Z80-NEXT:    call __lbswap
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: bswap.i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld de, (iy + 4)
; EZ80-CODE16-NEXT:    call __lbswap
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: bswap.i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld e, (iy + 6)
; EZ80-NEXT:    call __lbswap
; EZ80-NEXT:    ret
  call i32 @llvm.bswap.i32(i32 %0)
  ret i32 %2
}
declare i64 @llvm.bswap.i64(i64)
define i64 @bswap.i64(i64) {
; Z80-LABEL: bswap.i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    push iy
; Z80-NEXT:    call __llbswap
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: bswap.i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    ld iy, (ix + 10)
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    call __llbswap
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: bswap.i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld de, (iy + 6)
; EZ80-NEXT:    ld bc, (iy + 9)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llbswap
; EZ80-NEXT:    ret
  call i64 @llvm.bswap.i64(i64 %0)
  ret i64 %2
}

declare i8 @llvm.ctpop.i8(i8)
define i8 @ctpop.i8(i8) {
; Z80-LABEL: ctpop.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld a, (iy + 2)
; Z80-NEXT:    call __bpopcnt
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: ctpop.i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld a, (iy + 2)
; EZ80-CODE16-NEXT:    call __bpopcnt
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: ctpop.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld a, (iy + 3)
; EZ80-NEXT:    call __bpopcnt
; EZ80-NEXT:    ret
  call i8 @llvm.ctpop.i8(i8 %0)
  ret i8 %2
}
declare i16 @llvm.ctpop.i16(i16)
define i16 @ctpop.i16(i16) {
; Z80-LABEL: ctpop.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    call __spopcnt
; Z80-NEXT:    ld l, a
; Z80-NEXT:    ld h, 0
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: ctpop.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    call __spopcnt
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    ld h, 0
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: ctpop.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    call __spopcnt
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    ld h, 0
; EZ80-NEXT:    ret
  call i16 @llvm.ctpop.i16(i16 %0)
  ret i16 %2
}
declare i32 @llvm.ctpop.i32(i32)
define i32 @ctpop.i32(i32) {
; Z80-LABEL: ctpop.i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld d, (iy + 5)
; Z80-NEXT:    call __lpopcnt
; Z80-NEXT:    ld l, a
; Z80-NEXT:    ld h, 0
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: ctpop.i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld de, (iy + 4)
; EZ80-CODE16-NEXT:    call __lpopcnt
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    ld h, 0
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: ctpop.i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld e, (iy + 6)
; EZ80-NEXT:    call __lpopcnt
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    ld e, 0
; EZ80-NEXT:    ret
  call i32 @llvm.ctpop.i32(i32 %0)
  ret i32 %2
}
declare i64 @llvm.ctpop.i64(i64)
define i64 @ctpop.i64(i64) {
; Z80-LABEL: ctpop.i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld d, (iy + 5)
; Z80-NEXT:    ld c, (iy + 6)
; Z80-NEXT:    ld b, (iy + 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (iy + 8)
; Z80-NEXT:    ld h, (iy + 9)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    push iy
; Z80-NEXT:    call __llpopcnt
; Z80-NEXT:    ld l, a
; Z80-NEXT:    pop de
; Z80-NEXT:    ld h, 0
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    ld e, c
; Z80-NEXT:    ld d, b
; Z80-NEXT:    ld iyl, c
; Z80-NEXT:    ld iyh, b
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: ctpop.i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld de, (iy + 4)
; EZ80-CODE16-NEXT:    ld bc, (iy + 6)
; EZ80-CODE16-NEXT:    ld iy, (iy + 8)
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    call __llpopcnt
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    pop de
; EZ80-CODE16-NEXT:    ld h, 0
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    ld e, c
; EZ80-CODE16-NEXT:    ld d, b
; EZ80-CODE16-NEXT:    ld iyl, c
; EZ80-CODE16-NEXT:    ld iyh, b
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: ctpop.i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld de, (iy + 6)
; EZ80-NEXT:    ld bc, (iy + 9)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llpopcnt
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    ret
  call i64 @llvm.ctpop.i64(i64 %0)
  ret i64 %2
}

declare i8 @llvm.ctlz.i8(i8)
define i8 @ctlz.i8(i8) {
; Z80-LABEL: ctlz.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld a, l
; Z80-NEXT:    or a, a
; Z80-NEXT:    jr nz, BB31_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 8
; Z80-NEXT:    ret
; Z80-NEXT:  BB31_2: ; %cond.false
; Z80-NEXT:    ld a, l
; Z80-NEXT:    call __bctlz
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: ctlz.i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld l, (iy + 2)
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    or a, a
; EZ80-CODE16-NEXT:    jr nz, BB31_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 8
; EZ80-CODE16-NEXT:    ret
; EZ80-CODE16-NEXT:  BB31_2: ; %cond.false
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    call __bctlz
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: ctlz.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld l, (iy + 3)
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    jr nz, BB31_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, 8
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB31_2: ; %cond.false
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    call __bctlz
; EZ80-NEXT:    ret
  call i8 @llvm.ctlz.i8(i8 %0)
  ret i8 %2
}
declare i16 @llvm.ctlz.i16(i16)
define i16 @ctlz.i16(i16) {
; Z80-LABEL: ctlz.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    jr nz, BB32_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld hl, 16
; Z80-NEXT:    ret
; Z80-NEXT:  BB32_2: ; %cond.false
; Z80-NEXT:    call __sctlz
; Z80-NEXT:    ld l, a
; Z80-NEXT:    ld h, 0
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: ctlz.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    add hl, bc
; EZ80-CODE16-NEXT:    or a, a
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    jr nz, BB32_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld hl, 16
; EZ80-CODE16-NEXT:    ret
; EZ80-CODE16-NEXT:  BB32_2: ; %cond.false
; EZ80-CODE16-NEXT:    call __sctlz
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    ld h, 0
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: ctlz.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    add.sis hl, bc
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, bc
; EZ80-NEXT:    jr nz, BB32_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld.sis hl, 16
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB32_2: ; %cond.false
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    call __sctlz
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    ld h, 0
; EZ80-NEXT:    ret
  call i16 @llvm.ctlz.i16(i16 %0)
  ret i16 %2
}
declare i32 @llvm.ctlz.i32(i32)
define i32 @ctlz.i32(i32) {
; Z80-LABEL: ctlz.i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld d, (iy + 5)
; Z80-NEXT:    call __lctlz
; Z80-NEXT:    ld l, a
; Z80-NEXT:    ld h, 0
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: ctlz.i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld de, (iy + 4)
; EZ80-CODE16-NEXT:    call __lctlz
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    ld h, 0
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: ctlz.i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld e, (iy + 6)
; EZ80-NEXT:    call __lctlz
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    ld e, 0
; EZ80-NEXT:    ret
  call i32 @llvm.ctlz.i32(i32 %0)
  ret i32 %2
}
declare i64 @llvm.ctlz.i64(i64)
define i64 @ctlz.i64(i64) {
; Z80-LABEL: ctlz.i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld d, (iy + 5)
; Z80-NEXT:    ld c, (iy + 6)
; Z80-NEXT:    ld b, (iy + 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (iy + 8)
; Z80-NEXT:    ld h, (iy + 9)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    push iy
; Z80-NEXT:    call __llctlz
; Z80-NEXT:    ld l, a
; Z80-NEXT:    pop de
; Z80-NEXT:    ld h, 0
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    ld e, c
; Z80-NEXT:    ld d, b
; Z80-NEXT:    ld iyl, c
; Z80-NEXT:    ld iyh, b
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: ctlz.i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld de, (iy + 4)
; EZ80-CODE16-NEXT:    ld bc, (iy + 6)
; EZ80-CODE16-NEXT:    ld iy, (iy + 8)
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    call __llctlz
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    pop de
; EZ80-CODE16-NEXT:    ld h, 0
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    ld e, c
; EZ80-CODE16-NEXT:    ld d, b
; EZ80-CODE16-NEXT:    ld iyl, c
; EZ80-CODE16-NEXT:    ld iyh, b
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: ctlz.i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld de, (iy + 6)
; EZ80-NEXT:    ld bc, (iy + 9)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llctlz
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    ret
  call i64 @llvm.ctlz.i64(i64 %0)
  ret i64 %2
}

declare i8 @llvm.cttz.i8(i8)
define i8 @cttz.i8(i8) {
; Z80-LABEL: cttz.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld a, l
; Z80-NEXT:    or a, a
; Z80-NEXT:    jr nz, BB35_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 8
; Z80-NEXT:    ret
; Z80-NEXT:  BB35_2: ; %cond.false
; Z80-NEXT:    ld a, l
; Z80-NEXT:    cpl
; Z80-NEXT:    dec l
; Z80-NEXT:    and a, l
; Z80-NEXT:    call __bpopcnt
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: cttz.i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld l, (iy + 2)
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    or a, a
; EZ80-CODE16-NEXT:    jr nz, BB35_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 8
; EZ80-CODE16-NEXT:    ret
; EZ80-CODE16-NEXT:  BB35_2: ; %cond.false
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    cpl
; EZ80-CODE16-NEXT:    dec l
; EZ80-CODE16-NEXT:    and a, l
; EZ80-CODE16-NEXT:    call __bpopcnt
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: cttz.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld l, (iy + 3)
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    jr nz, BB35_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, 8
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB35_2: ; %cond.false
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    cpl
; EZ80-NEXT:    dec l
; EZ80-NEXT:    and a, l
; EZ80-NEXT:    call __bpopcnt
; EZ80-NEXT:    ret
  call i8 @llvm.cttz.i8(i8 %0)
  ret i8 %2
}
declare i16 @llvm.cttz.i16(i16)
define i16 @cttz.i16(i16) {
; Z80-LABEL: cttz.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    jr nz, BB36_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld hl, 16
; Z80-NEXT:    ret
; Z80-NEXT:  BB36_2: ; %cond.false
; Z80-NEXT:    ld a, l
; Z80-NEXT:    cpl
; Z80-NEXT:    ld e, a
; Z80-NEXT:    ld a, h
; Z80-NEXT:    cpl
; Z80-NEXT:    ld c, a
; Z80-NEXT:    dec hl
; Z80-NEXT:    ld a, e
; Z80-NEXT:    and a, l
; Z80-NEXT:    ld e, a
; Z80-NEXT:    ld a, c
; Z80-NEXT:    and a, h
; Z80-NEXT:    ld d, a
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    call __spopcnt
; Z80-NEXT:    ld l, a
; Z80-NEXT:    ld h, 0
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: cttz.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    add hl, bc
; EZ80-CODE16-NEXT:    or a, a
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    jr nz, BB36_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld hl, 16
; EZ80-CODE16-NEXT:    ret
; EZ80-CODE16-NEXT:  BB36_2: ; %cond.false
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    cpl
; EZ80-CODE16-NEXT:    ld e, a
; EZ80-CODE16-NEXT:    ld a, h
; EZ80-CODE16-NEXT:    cpl
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    dec hl
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    and a, l
; EZ80-CODE16-NEXT:    ld e, a
; EZ80-CODE16-NEXT:    ld a, c
; EZ80-CODE16-NEXT:    and a, h
; EZ80-CODE16-NEXT:    ld d, a
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    call __spopcnt
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    ld h, 0
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: cttz.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    add.sis hl, bc
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, bc
; EZ80-NEXT:    jr nz, BB36_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld.sis hl, 16
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB36_2: ; %cond.false
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    cpl
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld a, h
; EZ80-NEXT:    cpl
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    dec.sis hl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    and a, l
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld a, c
; EZ80-NEXT:    and a, h
; EZ80-NEXT:    ld d, a
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:    call __spopcnt
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    ld h, 0
; EZ80-NEXT:    ret
  call i16 @llvm.cttz.i16(i16 %0)
  ret i16 %2
}
declare i32 @llvm.cttz.i32(i32)
define i32 @cttz.i32(i32) {
; Z80-LABEL: cttz.i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld c, (ix + 6)
; Z80-NEXT:    ld b, (ix + 7)
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, c
; Z80-NEXT:    ld d, b
; Z80-NEXT:    call __lnot
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld (ix - 4), e
; Z80-NEXT:    ld (ix - 3), d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, c
; Z80-NEXT:    ld d, b
; Z80-NEXT:    ld bc, -1
; Z80-NEXT:    ld iy, -1
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    call __land
; Z80-NEXT:    call __lpopcnt
; Z80-NEXT:    ld l, a
; Z80-NEXT:    ld h, 0
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: cttz.i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 4
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld iy, (ix + 4)
; EZ80-CODE16-NEXT:    ld bc, (ix + 6)
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld e, c
; EZ80-CODE16-NEXT:    ld d, b
; EZ80-CODE16-NEXT:    call __lnot
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld (ix - 4), de
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld e, c
; EZ80-CODE16-NEXT:    ld d, b
; EZ80-CODE16-NEXT:    ld bc, -1
; EZ80-CODE16-NEXT:    ld iy, -1
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    call __land
; EZ80-CODE16-NEXT:    call __lpopcnt
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    ld h, 0
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: cttz.i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld bc, (iy + 3)
; EZ80-NEXT:    ld a, (iy + 6)
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    call __lnot
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld d, e
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld bc, -1
; EZ80-NEXT:    ld a, -1
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld e, d
; EZ80-NEXT:    call __land
; EZ80-NEXT:    call __lpopcnt
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    ld e, 0
; EZ80-NEXT:    ret
  call i32 @llvm.cttz.i32(i32 %0)
  ret i32 %2
}
declare i64 @llvm.cttz.i64(i64)
define i64 @cttz.i64(i64) {
; Z80-LABEL: cttz.i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    push iy
; Z80-NEXT:    call __llnot
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld (ix - 4), e
; Z80-NEXT:    ld (ix - 3), d
; Z80-NEXT:    ld (ix - 6), c
; Z80-NEXT:    ld (ix - 5), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    call __lladd
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    ld c, (ix - 6)
; Z80-NEXT:    ld b, (ix - 5)
; Z80-NEXT:    call __lland
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    call __llpopcnt
; Z80-NEXT:    ld l, a
; Z80-NEXT:    pop de
; Z80-NEXT:    ld h, 0
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    ld e, c
; Z80-NEXT:    ld d, b
; Z80-NEXT:    ld iyl, c
; Z80-NEXT:    ld iyh, b
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: cttz.i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 10
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    ld iy, (ix + 10)
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    call __llnot
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld (ix - 4), de
; EZ80-CODE16-NEXT:    ld (ix - 6), bc
; EZ80-CODE16-NEXT:    ld (ix - 8), iy
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    call __lladd
; EZ80-CODE16-NEXT:    ld (ix - 10), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    ld bc, (ix - 6)
; EZ80-CODE16-NEXT:    call __lland
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    call __llpopcnt
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    pop de
; EZ80-CODE16-NEXT:    ld h, 0
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    ld e, c
; EZ80-CODE16-NEXT:    ld d, b
; EZ80-CODE16-NEXT:    ld iyl, c
; EZ80-CODE16-NEXT:    ld iyh, b
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: cttz.i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 9
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld iy, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ld bc, (ix + 12)
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llnot
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    ld (ix - 6), de
; EZ80-NEXT:    ld (ix - 9), bc
; EZ80-NEXT:    scf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ld bc, (ix + 12)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __lladd
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    ld de, (ix - 6)
; EZ80-NEXT:    ld bc, (ix - 9)
; EZ80-NEXT:    call __lland
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    call __llpopcnt
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i64 @llvm.cttz.i64(i64 %0)
  ret i64 %2
}

declare i8 @llvm.fshl.i8(i8, i8, i8)
define i8 @fshl.i8(i8, i8, i8) {
; Z80-LABEL: fshl.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld e, (iy + 2)
; Z80-NEXT:    ld l, (iy + 4)
; Z80-NEXT:    ld c, (iy + 6)
; Z80-NEXT:    ld a, c
; Z80-NEXT:    and a, 7
; Z80-NEXT:    ld b, a
; Z80-NEXT:    ld a, e
; Z80-NEXT:    call __bshl
; Z80-NEXT:    ld e, a
; Z80-NEXT:    ld a, c
; Z80-NEXT:    neg
; Z80-NEXT:    and a, 7
; Z80-NEXT:    ld b, a
; Z80-NEXT:    ld a, l
; Z80-NEXT:    call __bshru
; Z80-NEXT:    ld l, a
; Z80-NEXT:    ld a, e
; Z80-NEXT:    or a, l
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: fshl.i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld e, (iy + 2)
; EZ80-CODE16-NEXT:    ld l, (iy + 4)
; EZ80-CODE16-NEXT:    ld c, (iy + 6)
; EZ80-CODE16-NEXT:    ld a, c
; EZ80-CODE16-NEXT:    and a, 7
; EZ80-CODE16-NEXT:    ld b, a
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    call __bshl
; EZ80-CODE16-NEXT:    ld e, a
; EZ80-CODE16-NEXT:    ld a, c
; EZ80-CODE16-NEXT:    neg
; EZ80-CODE16-NEXT:    and a, 7
; EZ80-CODE16-NEXT:    ld b, a
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    call __bshru
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    or a, l
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: fshl.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld e, (iy + 3)
; EZ80-NEXT:    ld l, (iy + 6)
; EZ80-NEXT:    ld c, (iy + 9)
; EZ80-NEXT:    ld a, c
; EZ80-NEXT:    and a, 7
; EZ80-NEXT:    ld b, a
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    call __bshl
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld a, c
; EZ80-NEXT:    neg
; EZ80-NEXT:    and a, 7
; EZ80-NEXT:    ld b, a
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    call __bshru
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    or a, l
; EZ80-NEXT:    ret
  call i8 @llvm.fshl.i8(i8 %0, i8 %1, i8 %2)
  ret i8 %4
}
declare i16 @llvm.fshl.i16(i16, i16, i16)
define i16 @fshl.i16(i16, i16, i16) {
; Z80-LABEL: fshl.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld a, iyl
; Z80-NEXT:    and a, 15
; Z80-NEXT:    ld c, a
; Z80-NEXT:    call __sshl
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    ld a, l
; Z80-NEXT:    and a, 15
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ld c, a
; Z80-NEXT:    call __sshru
; Z80-NEXT:    ld a, e
; Z80-NEXT:    or a, l
; Z80-NEXT:    ld c, a
; Z80-NEXT:    ld a, d
; Z80-NEXT:    or a, h
; Z80-NEXT:    ld b, a
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: fshl.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld iy, (ix + 8)
; EZ80-CODE16-NEXT:    ld a, iyl
; EZ80-CODE16-NEXT:    and a, 15
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    call __sshl
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    or a, a
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    and a, 15
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    call __sshru
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    or a, l
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    ld a, d
; EZ80-CODE16-NEXT:    or a, h
; EZ80-CODE16-NEXT:    ld b, a
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: fshl.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld iy, (ix + 12)
; EZ80-NEXT:    ld a, iyl
; EZ80-NEXT:    and a, 15
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    call __sshl
; EZ80-NEXT:    ld e, l
; EZ80-NEXT:    ld d, h
; EZ80-NEXT:    ld.sis hl, 0
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, bc
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    and a, 15
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    call __sshru
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    or a, l
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    or a, h
; EZ80-NEXT:    ld b, a
; EZ80-NEXT:    ld l, c
; EZ80-NEXT:    ld h, b
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i16 @llvm.fshl.i16(i16 %0, i16 %1, i16 %2)
  ret i16 %4
}
declare i32 @llvm.fshl.i32(i32, i32, i32)
define i32 @fshl.i32(i32, i32, i32) {
; Z80-LABEL: fshl.i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    ld e, (ix + 14)
; Z80-NEXT:    ld d, (ix + 15)
; Z80-NEXT:    ld bc, 31
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __land
; Z80-NEXT:    ld c, (ix + 4)
; Z80-NEXT:    ld b, (ix + 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld a, l
; Z80-NEXT:    call __lshl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld (ix - 4), e
; Z80-NEXT:    ld (ix - 3), d
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    ld e, (ix + 14)
; Z80-NEXT:    ld d, (ix + 15)
; Z80-NEXT:    call __lneg
; Z80-NEXT:    ld bc, 31
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __land
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld a, l
; Z80-NEXT:    call __lshru
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    call __lor
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: fshl.i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 4
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    ld de, (ix + 14)
; EZ80-CODE16-NEXT:    ld bc, 31
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __land
; EZ80-CODE16-NEXT:    ld bc, (ix + 4)
; EZ80-CODE16-NEXT:    ld iy, (ix + 6)
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    call __lshl
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld (ix - 4), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    ld de, (ix + 14)
; EZ80-CODE16-NEXT:    call __lneg
; EZ80-CODE16-NEXT:    ld bc, 31
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __land
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    ld iy, (ix + 10)
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    call __lshru
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    call __lor
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: fshl.i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld iy, (ix + 6)
; EZ80-NEXT:    ld d, (ix + 9)
; EZ80-NEXT:    ld hl, (ix + 18)
; EZ80-NEXT:    ld bc, 31
; EZ80-NEXT:    xor a, a
; EZ80-NEXT:    ld e, (ix + 21)
; EZ80-NEXT:    call __land
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    ; kill: def $l killed $l killed $uhl
; EZ80-NEXT:    call __lshl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld d, a
; EZ80-NEXT:    ld hl, (ix + 18)
; EZ80-NEXT:    ld e, (ix + 21)
; EZ80-NEXT:    call __lneg
; EZ80-NEXT:    ld bc, 31
; EZ80-NEXT:    xor a, a
; EZ80-NEXT:    call __land
; EZ80-NEXT:    ld bc, (ix + 12)
; EZ80-NEXT:    ld a, (ix + 15)
; EZ80-NEXT:    ; kill: def $l killed $l killed $uhl
; EZ80-NEXT:    call __lshru
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld e, d
; EZ80-NEXT:    call __lor
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i32 @llvm.fshl.i32(i32 %0, i32 %1, i32 %2)
  ret i32 %4
}
declare i64 @llvm.fshl.i64(i64, i64, i64)
define i64 @fshl.i64(i64, i64, i64) {
; Z80-LABEL: fshl.i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld e, (ix + 22)
; Z80-NEXT:    ld d, (ix + 23)
; Z80-NEXT:    ld l, (ix + 26)
; Z80-NEXT:    ld h, (ix + 27)
; Z80-NEXT:    ld iy, 63
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    push iy
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 20)
; Z80-NEXT:    ld h, (ix + 21)
; Z80-NEXT:    ld c, (ix + 24)
; Z80-NEXT:    ld b, (ix + 25)
; Z80-NEXT:    call __lland
; Z80-NEXT:    ld iy, 10
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld sp, iy
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld (ix - 4), e
; Z80-NEXT:    ld (ix - 3), d
; Z80-NEXT:    ld (ix - 6), c
; Z80-NEXT:    ld (ix - 5), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix + 26)
; Z80-NEXT:    ld h, (ix + 27)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 20)
; Z80-NEXT:    ld h, (ix + 21)
; Z80-NEXT:    ld e, (ix + 22)
; Z80-NEXT:    ld d, (ix + 23)
; Z80-NEXT:    ld c, (ix + 24)
; Z80-NEXT:    ld b, (ix + 25)
; Z80-NEXT:    call __llneg
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld hl, 63
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    call __lland
; Z80-NEXT:    ld iy, 10
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld sp, iy
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    ld e, (ix + 14)
; Z80-NEXT:    ld d, (ix + 15)
; Z80-NEXT:    ld c, (ix + 16)
; Z80-NEXT:    ld b, (ix + 17)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    ld c, (ix - 6)
; Z80-NEXT:    ld b, (ix - 5)
; Z80-NEXT:    call __llor
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: fshl.i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 10
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld de, (ix + 22)
; EZ80-CODE16-NEXT:    ld hl, (ix + 26)
; EZ80-CODE16-NEXT:    ld iy, 63
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 20)
; EZ80-CODE16-NEXT:    ld bc, (ix + 24)
; EZ80-CODE16-NEXT:    call __lland
; EZ80-CODE16-NEXT:    ld iy, 10
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld sp, iy
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld (ix - 4), de
; EZ80-CODE16-NEXT:    ld (ix - 6), bc
; EZ80-CODE16-NEXT:    ld (ix - 8), iy
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 26)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 20)
; EZ80-CODE16-NEXT:    ld de, (ix + 22)
; EZ80-CODE16-NEXT:    ld bc, (ix + 24)
; EZ80-CODE16-NEXT:    call __llneg
; EZ80-CODE16-NEXT:    ld (ix - 10), hl
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, 63
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    call __lland
; EZ80-CODE16-NEXT:    ld iy, 10
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld sp, iy
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    ld de, (ix + 14)
; EZ80-CODE16-NEXT:    ld bc, (ix + 16)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 10), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    ld bc, (ix - 6)
; EZ80-CODE16-NEXT:    call __llor
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: fshl.i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 9
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld hl, (ix + 24)
; EZ80-NEXT:    ld de, (ix + 27)
; EZ80-NEXT:    ld iy, 63
; EZ80-NEXT:    ld bc, 0
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld bc, (ix + 30)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __lland
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ld bc, (ix + 12)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    ld (ix - 6), de
; EZ80-NEXT:    ld (ix - 9), bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, (ix + 24)
; EZ80-NEXT:    ld de, (ix + 27)
; EZ80-NEXT:    ld bc, (ix + 30)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llneg
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    push iy
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld iy, 63
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __lland
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    ld de, (ix + 18)
; EZ80-NEXT:    ld bc, (ix + 21)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    ld de, (ix - 6)
; EZ80-NEXT:    ld bc, (ix - 9)
; EZ80-NEXT:    call __llor
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i64 @llvm.fshl.i64(i64 %0, i64 %1, i64 %2)
  ret i64 %4
}

declare i8 @llvm.fshr.i8(i8, i8, i8)
define i8 @fshr.i8(i8, i8, i8) {
; Z80-LABEL: fshr.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld c, (iy + 6)
; Z80-NEXT:    ld a, c
; Z80-NEXT:    and a, 7
; Z80-NEXT:    ld b, a
; Z80-NEXT:    ld a, e
; Z80-NEXT:    call __bshru
; Z80-NEXT:    ld e, a
; Z80-NEXT:    ld a, c
; Z80-NEXT:    neg
; Z80-NEXT:    and a, 7
; Z80-NEXT:    ld b, a
; Z80-NEXT:    ld a, l
; Z80-NEXT:    call __bshl
; Z80-NEXT:    ld l, a
; Z80-NEXT:    ld a, e
; Z80-NEXT:    or a, l
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: fshr.i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld l, (iy + 2)
; EZ80-CODE16-NEXT:    ld e, (iy + 4)
; EZ80-CODE16-NEXT:    ld c, (iy + 6)
; EZ80-CODE16-NEXT:    ld a, c
; EZ80-CODE16-NEXT:    and a, 7
; EZ80-CODE16-NEXT:    ld b, a
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    call __bshru
; EZ80-CODE16-NEXT:    ld e, a
; EZ80-CODE16-NEXT:    ld a, c
; EZ80-CODE16-NEXT:    neg
; EZ80-CODE16-NEXT:    and a, 7
; EZ80-CODE16-NEXT:    ld b, a
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    call __bshl
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    or a, l
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: fshr.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld l, (iy + 3)
; EZ80-NEXT:    ld e, (iy + 6)
; EZ80-NEXT:    ld c, (iy + 9)
; EZ80-NEXT:    ld a, c
; EZ80-NEXT:    and a, 7
; EZ80-NEXT:    ld b, a
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    call __bshru
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld a, c
; EZ80-NEXT:    neg
; EZ80-NEXT:    and a, 7
; EZ80-NEXT:    ld b, a
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    call __bshl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    or a, l
; EZ80-NEXT:    ret
  call i8 @llvm.fshr.i8(i8 %0, i8 %1, i8 %2)
  ret i8 %4
}
declare i16 @llvm.fshr.i16(i16, i16, i16)
define i16 @fshr.i16(i16, i16, i16) {
; Z80-LABEL: fshr.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld a, iyl
; Z80-NEXT:    and a, 15
; Z80-NEXT:    ld c, a
; Z80-NEXT:    call __sshru
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    ld a, l
; Z80-NEXT:    and a, 15
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld c, a
; Z80-NEXT:    call __sshl
; Z80-NEXT:    ld a, e
; Z80-NEXT:    or a, l
; Z80-NEXT:    ld c, a
; Z80-NEXT:    ld a, d
; Z80-NEXT:    or a, h
; Z80-NEXT:    ld b, a
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: fshr.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    ld iy, (ix + 8)
; EZ80-CODE16-NEXT:    ld a, iyl
; EZ80-CODE16-NEXT:    and a, 15
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    call __sshru
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    or a, a
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    and a, 15
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    call __sshl
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    or a, l
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    ld a, d
; EZ80-CODE16-NEXT:    or a, h
; EZ80-CODE16-NEXT:    ld b, a
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: fshr.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ld iy, (ix + 12)
; EZ80-NEXT:    ld a, iyl
; EZ80-NEXT:    and a, 15
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    call __sshru
; EZ80-NEXT:    ld e, l
; EZ80-NEXT:    ld d, h
; EZ80-NEXT:    ld.sis hl, 0
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, bc
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    and a, 15
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    call __sshl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    or a, l
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    or a, h
; EZ80-NEXT:    ld b, a
; EZ80-NEXT:    ld l, c
; EZ80-NEXT:    ld h, b
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i16 @llvm.fshr.i16(i16 %0, i16 %1, i16 %2)
  ret i16 %4
}
declare i32 @llvm.fshr.i32(i32, i32, i32)
define i32 @fshr.i32(i32, i32, i32) {
; Z80-LABEL: fshr.i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    ld e, (ix + 14)
; Z80-NEXT:    ld d, (ix + 15)
; Z80-NEXT:    ld bc, 31
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __land
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld a, l
; Z80-NEXT:    call __lshru
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld (ix - 4), e
; Z80-NEXT:    ld (ix - 3), d
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    ld e, (ix + 14)
; Z80-NEXT:    ld d, (ix + 15)
; Z80-NEXT:    call __lneg
; Z80-NEXT:    ld bc, 31
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __land
; Z80-NEXT:    ld c, (ix + 4)
; Z80-NEXT:    ld b, (ix + 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld a, l
; Z80-NEXT:    call __lshl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    call __lor
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: fshr.i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 4
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    ld de, (ix + 14)
; EZ80-CODE16-NEXT:    ld bc, 31
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __land
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    ld iy, (ix + 10)
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    call __lshru
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld (ix - 4), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    ld de, (ix + 14)
; EZ80-CODE16-NEXT:    call __lneg
; EZ80-CODE16-NEXT:    ld bc, 31
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __land
; EZ80-CODE16-NEXT:    ld bc, (ix + 4)
; EZ80-CODE16-NEXT:    ld iy, (ix + 6)
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    call __lshl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    call __lor
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: fshr.i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld iy, (ix + 12)
; EZ80-NEXT:    ld d, (ix + 15)
; EZ80-NEXT:    ld hl, (ix + 18)
; EZ80-NEXT:    ld bc, 31
; EZ80-NEXT:    xor a, a
; EZ80-NEXT:    ld e, (ix + 21)
; EZ80-NEXT:    call __land
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    ; kill: def $l killed $l killed $uhl
; EZ80-NEXT:    call __lshru
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld d, a
; EZ80-NEXT:    ld hl, (ix + 18)
; EZ80-NEXT:    ld e, (ix + 21)
; EZ80-NEXT:    call __lneg
; EZ80-NEXT:    ld bc, 31
; EZ80-NEXT:    xor a, a
; EZ80-NEXT:    call __land
; EZ80-NEXT:    ld bc, (ix + 6)
; EZ80-NEXT:    ld a, (ix + 9)
; EZ80-NEXT:    ; kill: def $l killed $l killed $uhl
; EZ80-NEXT:    call __lshl
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld e, d
; EZ80-NEXT:    call __lor
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i32 @llvm.fshr.i32(i32 %0, i32 %1, i32 %2)
  ret i32 %4
}
declare i64 @llvm.fshr.i64(i64, i64, i64)
define i64 @fshr.i64(i64, i64, i64) {
; Z80-LABEL: fshr.i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld e, (ix + 22)
; Z80-NEXT:    ld d, (ix + 23)
; Z80-NEXT:    ld l, (ix + 26)
; Z80-NEXT:    ld h, (ix + 27)
; Z80-NEXT:    ld iy, 63
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    push iy
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 20)
; Z80-NEXT:    ld h, (ix + 21)
; Z80-NEXT:    ld c, (ix + 24)
; Z80-NEXT:    ld b, (ix + 25)
; Z80-NEXT:    call __lland
; Z80-NEXT:    ld iy, 10
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld sp, iy
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    ld e, (ix + 14)
; Z80-NEXT:    ld d, (ix + 15)
; Z80-NEXT:    ld c, (ix + 16)
; Z80-NEXT:    ld b, (ix + 17)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld (ix - 4), e
; Z80-NEXT:    ld (ix - 3), d
; Z80-NEXT:    ld (ix - 6), c
; Z80-NEXT:    ld (ix - 5), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix + 26)
; Z80-NEXT:    ld h, (ix + 27)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 20)
; Z80-NEXT:    ld h, (ix + 21)
; Z80-NEXT:    ld e, (ix + 22)
; Z80-NEXT:    ld d, (ix + 23)
; Z80-NEXT:    ld c, (ix + 24)
; Z80-NEXT:    ld b, (ix + 25)
; Z80-NEXT:    call __llneg
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld hl, 63
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    call __lland
; Z80-NEXT:    ld iy, 10
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld sp, iy
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    ld c, (ix - 6)
; Z80-NEXT:    ld b, (ix - 5)
; Z80-NEXT:    call __llor
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: fshr.i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 10
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld de, (ix + 22)
; EZ80-CODE16-NEXT:    ld hl, (ix + 26)
; EZ80-CODE16-NEXT:    ld iy, 63
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 20)
; EZ80-CODE16-NEXT:    ld bc, (ix + 24)
; EZ80-CODE16-NEXT:    call __lland
; EZ80-CODE16-NEXT:    ld iy, 10
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld sp, iy
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    ld de, (ix + 14)
; EZ80-CODE16-NEXT:    ld bc, (ix + 16)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld (ix - 4), de
; EZ80-CODE16-NEXT:    ld (ix - 6), bc
; EZ80-CODE16-NEXT:    ld (ix - 8), iy
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 26)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 20)
; EZ80-CODE16-NEXT:    ld de, (ix + 22)
; EZ80-CODE16-NEXT:    ld bc, (ix + 24)
; EZ80-CODE16-NEXT:    call __llneg
; EZ80-CODE16-NEXT:    ld (ix - 10), hl
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, 63
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    call __lland
; EZ80-CODE16-NEXT:    ld iy, 10
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld sp, iy
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 10), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    ld bc, (ix - 6)
; EZ80-CODE16-NEXT:    call __llor
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: fshr.i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 9
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld hl, (ix + 24)
; EZ80-NEXT:    ld de, (ix + 27)
; EZ80-NEXT:    ld iy, 63
; EZ80-NEXT:    ld bc, 0
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld bc, (ix + 30)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __lland
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    ld de, (ix + 18)
; EZ80-NEXT:    ld bc, (ix + 21)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    ld (ix - 6), de
; EZ80-NEXT:    ld (ix - 9), bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, (ix + 24)
; EZ80-NEXT:    ld de, (ix + 27)
; EZ80-NEXT:    ld bc, (ix + 30)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llneg
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    push iy
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld iy, 63
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __lland
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ld bc, (ix + 12)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    ld de, (ix - 6)
; EZ80-NEXT:    ld bc, (ix - 9)
; EZ80-NEXT:    call __llor
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i64 @llvm.fshr.i64(i64 %0, i64 %1, i64 %2)
  ret i64 %4
}

declare {i8, i1} @llvm.sadd.with.overflow.i8(i8, i8)
define i1 @sadd.with.overflow.i8(i8, i8) {
; Z80-LABEL: sadd.with.overflow.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 4)
; Z80-NEXT:    ld a, (iy + 2)
; Z80-NEXT:    add a, l
; Z80-NEXT:    jp pe, BB47_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    ret
; Z80-NEXT:  BB47_2:
; Z80-NEXT:    ld a, -1
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: sadd.with.overflow.i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld l, (iy + 4)
; EZ80-CODE16-NEXT:    ld a, (iy + 2)
; EZ80-CODE16-NEXT:    add a, l
; EZ80-CODE16-NEXT:    jp pe, BB47_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    ret
; EZ80-CODE16-NEXT:  BB47_2:
; EZ80-CODE16-NEXT:    ld a, -1
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: sadd.with.overflow.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld l, (iy + 6)
; EZ80-NEXT:    ld a, (iy + 3)
; EZ80-NEXT:    add a, l
; EZ80-NEXT:    jp pe, BB47_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB47_2:
; EZ80-NEXT:    ld a, -1
; EZ80-NEXT:    ret
  call {i8, i1} @llvm.sadd.with.overflow.i8(i8 %0, i8 %1)
  extractvalue {i8, i1} %3, 1
  ret i1 %4
}
declare {i16, i1} @llvm.sadd.with.overflow.i16(i16, i16)
define i1 @sadd.with.overflow.i16(i16, i16) {
; Z80-LABEL: sadd.with.overflow.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld d, (iy + 5)
; Z80-NEXT:    add hl, de
; Z80-NEXT:    jp pe, BB48_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    ret
; Z80-NEXT:  BB48_2:
; Z80-NEXT:    ld a, -1
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: sadd.with.overflow.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld de, (iy + 4)
; EZ80-CODE16-NEXT:    add hl, de
; EZ80-CODE16-NEXT:    jp pe, BB48_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    ret
; EZ80-CODE16-NEXT:  BB48_2:
; EZ80-CODE16-NEXT:    ld a, -1
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: sadd.with.overflow.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld de, (iy + 6)
; EZ80-NEXT:    add.sis hl, de
; EZ80-NEXT:    jp pe, BB48_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB48_2:
; EZ80-NEXT:    ld a, -1
; EZ80-NEXT:    ret
  call {i16, i1} @llvm.sadd.with.overflow.i16(i16 %0, i16 %1)
  extractvalue {i16, i1} %3, 1
  ret i1 %4
}
declare {i32, i1} @llvm.sadd.with.overflow.i32(i32, i32)
define i1 @sadd.with.overflow.i32(i32, i32) {
; Z80-LABEL: sadd.with.overflow.i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ld e, (ix + 8)
; Z80-NEXT:    ld d, (ix + 9)
; Z80-NEXT:    ld c, (ix + 10)
; Z80-NEXT:    ld b, (ix + 11)
; Z80-NEXT:    add iy, de
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    jp pe, BB49_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:  BB49_2:
; Z80-NEXT:    ld a, -1
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: sadd.with.overflow.i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld iy, (ix + 4)
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    ld de, (ix + 8)
; EZ80-CODE16-NEXT:    ld bc, (ix + 10)
; EZ80-CODE16-NEXT:    add iy, de
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    jp pe, BB49_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
; EZ80-CODE16-NEXT:  BB49_2:
; EZ80-CODE16-NEXT:    ld a, -1
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: sadd.with.overflow.i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld de, (iy + 9)
; EZ80-NEXT:    ld c, (iy + 12)
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld a, (iy + 6)
; EZ80-NEXT:    adc a, c
; EZ80-NEXT:    jp pe, BB49_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB49_2:
; EZ80-NEXT:    ld a, -1
; EZ80-NEXT:    ret
  call {i32, i1} @llvm.sadd.with.overflow.i32(i32 %0, i32 %1)
  extractvalue {i32, i1} %3, 1
  ret i1 %4
}
declare {i64, i1} @llvm.sadd.with.overflow.i64(i64, i64)
define i1 @sadd.with.overflow.i64(i64, i64) {
; Z80-LABEL: sadd.with.overflow.i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ld e, (ix + 12)
; Z80-NEXT:    ld d, (ix + 13)
; Z80-NEXT:    ld c, (ix + 14)
; Z80-NEXT:    ld b, (ix + 15)
; Z80-NEXT:    add iy, de
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 16)
; Z80-NEXT:    ld d, (ix + 17)
; Z80-NEXT:    adc hl, de
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ld e, (ix + 18)
; Z80-NEXT:    ld d, (ix + 19)
; Z80-NEXT:    adc hl, de
; Z80-NEXT:    jp pe, BB50_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:  BB50_2:
; Z80-NEXT:    ld a, -1
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: sadd.with.overflow.i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld iy, (ix + 4)
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    ld de, (ix + 12)
; EZ80-CODE16-NEXT:    ld bc, (ix + 14)
; EZ80-CODE16-NEXT:    add iy, de
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 16)
; EZ80-CODE16-NEXT:    adc hl, de
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    ld de, (ix + 18)
; EZ80-CODE16-NEXT:    adc hl, de
; EZ80-CODE16-NEXT:    jp pe, BB50_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
; EZ80-CODE16-NEXT:  BB50_2:
; EZ80-CODE16-NEXT:    ld a, -1
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: sadd.with.overflow.i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld iy, (ix + 6)
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ld de, (ix + 15)
; EZ80-NEXT:    ld bc, (ix + 18)
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    adc hl, bc
; EZ80-NEXT:    ld hl, (ix + 12)
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    ld de, (ix + 21)
; EZ80-NEXT:    adc.sis hl, de
; EZ80-NEXT:    jp pe, BB50_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB50_2:
; EZ80-NEXT:    ld a, -1
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call {i64, i1} @llvm.sadd.with.overflow.i64(i64 %0, i64 %1)
  extractvalue {i64, i1} %3, 1
  ret i1 %4
}

declare {i8, i1} @llvm.uadd.with.overflow.i8(i8, i8)
define i1 @uadd.with.overflow.i8(i8, i8) {
; Z80-LABEL: uadd.with.overflow.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 4)
; Z80-NEXT:    ld a, (iy + 2)
; Z80-NEXT:    add a, l
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: uadd.with.overflow.i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld l, (iy + 4)
; EZ80-CODE16-NEXT:    ld a, (iy + 2)
; EZ80-CODE16-NEXT:    add a, l
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: uadd.with.overflow.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld l, (iy + 6)
; EZ80-NEXT:    ld a, (iy + 3)
; EZ80-NEXT:    add a, l
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ret
  call {i8, i1} @llvm.uadd.with.overflow.i8(i8 %0, i8 %1)
  extractvalue {i8, i1} %3, 1
  ret i1 %4
}
declare {i16, i1} @llvm.uadd.with.overflow.i16(i16, i16)
define i1 @uadd.with.overflow.i16(i16, i16) {
; Z80-LABEL: uadd.with.overflow.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld d, (iy + 5)
; Z80-NEXT:    add hl, de
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: uadd.with.overflow.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld de, (iy + 4)
; EZ80-CODE16-NEXT:    add hl, de
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: uadd.with.overflow.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld de, (iy + 6)
; EZ80-NEXT:    add.sis hl, de
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ret
  call {i16, i1} @llvm.uadd.with.overflow.i16(i16 %0, i16 %1)
  extractvalue {i16, i1} %3, 1
  ret i1 %4
}
declare {i32, i1} @llvm.uadd.with.overflow.i32(i32, i32)
define i1 @uadd.with.overflow.i32(i32, i32) {
; Z80-LABEL: uadd.with.overflow.i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ld e, (ix + 8)
; Z80-NEXT:    ld d, (ix + 9)
; Z80-NEXT:    ld c, (ix + 10)
; Z80-NEXT:    ld b, (ix + 11)
; Z80-NEXT:    add iy, de
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: uadd.with.overflow.i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld iy, (ix + 4)
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    ld de, (ix + 8)
; EZ80-CODE16-NEXT:    ld bc, (ix + 10)
; EZ80-CODE16-NEXT:    add iy, de
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: uadd.with.overflow.i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld de, (iy + 9)
; EZ80-NEXT:    ld c, (iy + 12)
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld a, (iy + 6)
; EZ80-NEXT:    adc a, c
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ret
  call {i32, i1} @llvm.uadd.with.overflow.i32(i32 %0, i32 %1)
  extractvalue {i32, i1} %3, 1
  ret i1 %4
}
declare {i64, i1} @llvm.uadd.with.overflow.i64(i64, i64)
define i1 @uadd.with.overflow.i64(i64, i64) {
; Z80-LABEL: uadd.with.overflow.i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ld e, (ix + 12)
; Z80-NEXT:    ld d, (ix + 13)
; Z80-NEXT:    ld c, (ix + 14)
; Z80-NEXT:    ld b, (ix + 15)
; Z80-NEXT:    add iy, de
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 16)
; Z80-NEXT:    ld d, (ix + 17)
; Z80-NEXT:    adc hl, de
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ld e, (ix + 18)
; Z80-NEXT:    ld d, (ix + 19)
; Z80-NEXT:    adc hl, de
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: uadd.with.overflow.i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld iy, (ix + 4)
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    ld de, (ix + 12)
; EZ80-CODE16-NEXT:    ld bc, (ix + 14)
; EZ80-CODE16-NEXT:    add iy, de
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 16)
; EZ80-CODE16-NEXT:    adc hl, de
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    ld de, (ix + 18)
; EZ80-CODE16-NEXT:    adc hl, de
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: uadd.with.overflow.i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld iy, (ix + 6)
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ld de, (ix + 15)
; EZ80-NEXT:    ld bc, (ix + 18)
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    adc hl, bc
; EZ80-NEXT:    ld hl, (ix + 12)
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    ld de, (ix + 21)
; EZ80-NEXT:    adc.sis hl, de
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call {i64, i1} @llvm.uadd.with.overflow.i64(i64 %0, i64 %1)
  extractvalue {i64, i1} %3, 1
  ret i1 %4
}

declare {i8, i1} @llvm.ssub.with.overflow.i8(i8, i8)
define i1 @ssub.with.overflow.i8(i8, i8) {
; Z80-LABEL: ssub.with.overflow.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 4)
; Z80-NEXT:    ld a, (iy + 2)
; Z80-NEXT:    sub a, l
; Z80-NEXT:    jp pe, BB55_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    ret
; Z80-NEXT:  BB55_2:
; Z80-NEXT:    ld a, -1
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: ssub.with.overflow.i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld l, (iy + 4)
; EZ80-CODE16-NEXT:    ld a, (iy + 2)
; EZ80-CODE16-NEXT:    sub a, l
; EZ80-CODE16-NEXT:    jp pe, BB55_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    ret
; EZ80-CODE16-NEXT:  BB55_2:
; EZ80-CODE16-NEXT:    ld a, -1
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: ssub.with.overflow.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld l, (iy + 6)
; EZ80-NEXT:    ld a, (iy + 3)
; EZ80-NEXT:    sub a, l
; EZ80-NEXT:    jp pe, BB55_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB55_2:
; EZ80-NEXT:    ld a, -1
; EZ80-NEXT:    ret
  call {i8, i1} @llvm.ssub.with.overflow.i8(i8 %0, i8 %1)
  extractvalue {i8, i1} %3, 1
  ret i1 %4
}
declare {i16, i1} @llvm.ssub.with.overflow.i16(i16, i16)
define i1 @ssub.with.overflow.i16(i16, i16) {
; Z80-LABEL: ssub.with.overflow.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld d, (iy + 5)
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:    jp pe, BB56_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    ret
; Z80-NEXT:  BB56_2:
; Z80-NEXT:    ld a, -1
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: ssub.with.overflow.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld de, (iy + 4)
; EZ80-CODE16-NEXT:    sbc hl, de
; EZ80-CODE16-NEXT:    jp pe, BB56_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    ret
; EZ80-CODE16-NEXT:  BB56_2:
; EZ80-CODE16-NEXT:    ld a, -1
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: ssub.with.overflow.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld de, (iy + 6)
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:    jp pe, BB56_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB56_2:
; EZ80-NEXT:    ld a, -1
; EZ80-NEXT:    ret
  call {i16, i1} @llvm.ssub.with.overflow.i16(i16 %0, i16 %1)
  extractvalue {i16, i1} %3, 1
  ret i1 %4
}
declare {i32, i1} @llvm.ssub.with.overflow.i32(i32, i32)
define i1 @ssub.with.overflow.i32(i32, i32) {
; Z80-LABEL: ssub.with.overflow.i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld e, (ix + 8)
; Z80-NEXT:    ld d, (ix + 9)
; Z80-NEXT:    ld c, (ix + 10)
; Z80-NEXT:    ld b, (ix + 11)
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    jp pe, BB57_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:  BB57_2:
; Z80-NEXT:    ld a, -1
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: ssub.with.overflow.i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld iy, (ix + 6)
; EZ80-CODE16-NEXT:    ld de, (ix + 8)
; EZ80-CODE16-NEXT:    ld bc, (ix + 10)
; EZ80-CODE16-NEXT:    sbc hl, de
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    jp pe, BB57_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
; EZ80-CODE16-NEXT:  BB57_2:
; EZ80-CODE16-NEXT:    ld a, -1
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: ssub.with.overflow.i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld a, (iy + 6)
; EZ80-NEXT:    ld de, (iy + 9)
; EZ80-NEXT:    ld c, (iy + 12)
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:    sbc a, c
; EZ80-NEXT:    jp pe, BB57_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB57_2:
; EZ80-NEXT:    ld a, -1
; EZ80-NEXT:    ret
  call {i32, i1} @llvm.ssub.with.overflow.i32(i32 %0, i32 %1)
  extractvalue {i32, i1} %3, 1
  ret i1 %4
}
declare {i64, i1} @llvm.ssub.with.overflow.i64(i64, i64)
define i1 @ssub.with.overflow.i64(i64, i64) {
; Z80-LABEL: ssub.with.overflow.i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 12)
; Z80-NEXT:    ld d, (ix + 13)
; Z80-NEXT:    ld c, (ix + 14)
; Z80-NEXT:    ld b, (ix + 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 16)
; Z80-NEXT:    ld h, (ix + 17)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ld e, (ix + 18)
; Z80-NEXT:    ld d, (ix + 19)
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:    jp pe, BB58_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:  BB58_2:
; Z80-NEXT:    ld a, -1
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: ssub.with.overflow.i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 12)
; EZ80-CODE16-NEXT:    ld bc, (ix + 14)
; EZ80-CODE16-NEXT:    ld iy, (ix + 16)
; EZ80-CODE16-NEXT:    sbc hl, de
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    sbc hl, de
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    ld de, (ix + 18)
; EZ80-CODE16-NEXT:    sbc hl, de
; EZ80-CODE16-NEXT:    jp pe, BB58_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
; EZ80-CODE16-NEXT:  BB58_2:
; EZ80-CODE16-NEXT:    ld a, -1
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: ssub.with.overflow.i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 15)
; EZ80-NEXT:    ld bc, (ix + 18)
; EZ80-NEXT:    ld iy, (ix + 21)
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    sbc hl, bc
; EZ80-NEXT:    ld hl, (ix + 12)
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    lea de, iy
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:    jp pe, BB58_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB58_2:
; EZ80-NEXT:    ld a, -1
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call {i64, i1} @llvm.ssub.with.overflow.i64(i64 %0, i64 %1)
  extractvalue {i64, i1} %3, 1
  ret i1 %4
}

declare {i8, i1} @llvm.usub.with.overflow.i8(i8, i8)
define i1 @usub.with.overflow.i8(i8, i8) {
; Z80-LABEL: usub.with.overflow.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 4)
; Z80-NEXT:    ld a, (iy + 2)
; Z80-NEXT:    sub a, l
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: usub.with.overflow.i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld l, (iy + 4)
; EZ80-CODE16-NEXT:    ld a, (iy + 2)
; EZ80-CODE16-NEXT:    sub a, l
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: usub.with.overflow.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld l, (iy + 6)
; EZ80-NEXT:    ld a, (iy + 3)
; EZ80-NEXT:    sub a, l
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ret
  call {i8, i1} @llvm.usub.with.overflow.i8(i8 %0, i8 %1)
  extractvalue {i8, i1} %3, 1
  ret i1 %4
}
declare {i16, i1} @llvm.usub.with.overflow.i16(i16, i16)
define i1 @usub.with.overflow.i16(i16, i16) {
; Z80-LABEL: usub.with.overflow.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld d, (iy + 5)
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: usub.with.overflow.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld de, (iy + 4)
; EZ80-CODE16-NEXT:    sbc hl, de
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: usub.with.overflow.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld de, (iy + 6)
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ret
  call {i16, i1} @llvm.usub.with.overflow.i16(i16 %0, i16 %1)
  extractvalue {i16, i1} %3, 1
  ret i1 %4
}
declare {i32, i1} @llvm.usub.with.overflow.i32(i32, i32)
define i1 @usub.with.overflow.i32(i32, i32) {
; Z80-LABEL: usub.with.overflow.i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld e, (ix + 8)
; Z80-NEXT:    ld d, (ix + 9)
; Z80-NEXT:    ld c, (ix + 10)
; Z80-NEXT:    ld b, (ix + 11)
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: usub.with.overflow.i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld iy, (ix + 6)
; EZ80-CODE16-NEXT:    ld de, (ix + 8)
; EZ80-CODE16-NEXT:    ld bc, (ix + 10)
; EZ80-CODE16-NEXT:    sbc hl, de
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: usub.with.overflow.i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld a, (iy + 6)
; EZ80-NEXT:    ld de, (iy + 9)
; EZ80-NEXT:    ld c, (iy + 12)
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:    sbc a, c
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ret
  call {i32, i1} @llvm.usub.with.overflow.i32(i32 %0, i32 %1)
  extractvalue {i32, i1} %3, 1
  ret i1 %4
}
declare {i64, i1} @llvm.usub.with.overflow.i64(i64, i64)
define i1 @usub.with.overflow.i64(i64, i64) {
; Z80-LABEL: usub.with.overflow.i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 12)
; Z80-NEXT:    ld d, (ix + 13)
; Z80-NEXT:    ld c, (ix + 14)
; Z80-NEXT:    ld b, (ix + 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 16)
; Z80-NEXT:    ld h, (ix + 17)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ld e, (ix + 18)
; Z80-NEXT:    ld d, (ix + 19)
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: usub.with.overflow.i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 12)
; EZ80-CODE16-NEXT:    ld bc, (ix + 14)
; EZ80-CODE16-NEXT:    ld iy, (ix + 16)
; EZ80-CODE16-NEXT:    sbc hl, de
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    sbc hl, de
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    ld de, (ix + 18)
; EZ80-CODE16-NEXT:    sbc hl, de
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: usub.with.overflow.i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 15)
; EZ80-NEXT:    ld bc, (ix + 18)
; EZ80-NEXT:    ld iy, (ix + 21)
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    sbc hl, bc
; EZ80-NEXT:    ld hl, (ix + 12)
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    lea de, iy
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call {i64, i1} @llvm.usub.with.overflow.i64(i64 %0, i64 %1)
  extractvalue {i64, i1} %3, 1
  ret i1 %4
}

declare {i8, i1} @llvm.smul.with.overflow.i8(i8, i8)
define i1 @smul.with.overflow.i8(i8, i8) {
; Z80-LABEL: smul.with.overflow.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld e, (iy + 2)
; Z80-NEXT:    ld d, (iy + 4)
; Z80-NEXT:    ld a, e
; Z80-NEXT:    rlc a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld h, a
; Z80-NEXT:    ld l, e
; Z80-NEXT:    ld a, d
; Z80-NEXT:    rlc a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld b, a
; Z80-NEXT:    ld c, d
; Z80-NEXT:    call __smulu
; Z80-NEXT:    ld c, 8
; Z80-NEXT:    call __sshrs
; Z80-NEXT:    ld b, e
; Z80-NEXT:    ld c, d
; Z80-NEXT:    call __bmulu
; Z80-NEXT:    rlc a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld e, a
; Z80-NEXT:    ld a, l
; Z80-NEXT:    cp a, e
; Z80-NEXT:    jr nz, BB63_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    ret
; Z80-NEXT:  BB63_2:
; Z80-NEXT:    ld a, -1
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: smul.with.overflow.i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld d, (iy + 2)
; EZ80-CODE16-NEXT:    ld e, (iy + 4)
; EZ80-CODE16-NEXT:    ld a, d
; EZ80-CODE16-NEXT:    rlc a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld h, a
; EZ80-CODE16-NEXT:    ld l, d
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    rlc a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld b, a
; EZ80-CODE16-NEXT:    ld c, e
; EZ80-CODE16-NEXT:    call __smulu
; EZ80-CODE16-NEXT:    ld c, 8
; EZ80-CODE16-NEXT:    call __sshrs
; EZ80-CODE16-NEXT:    mlt de
; EZ80-CODE16-NEXT:    rlc e
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld e, a
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    cp a, e
; EZ80-CODE16-NEXT:    jr nz, BB63_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    ret
; EZ80-CODE16-NEXT:  BB63_2:
; EZ80-CODE16-NEXT:    ld a, -1
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: smul.with.overflow.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld d, (iy + 3)
; EZ80-NEXT:    ld e, (iy + 6)
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    rlc a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ld h, a
; EZ80-NEXT:    ld l, d
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    rlc a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ld b, a
; EZ80-NEXT:    ld c, e
; EZ80-NEXT:    call __smulu
; EZ80-NEXT:    ld c, 8
; EZ80-NEXT:    call __sshrs
; EZ80-NEXT:    mlt de
; EZ80-NEXT:    rlc e
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    cp a, e
; EZ80-NEXT:    jr nz, BB63_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB63_2:
; EZ80-NEXT:    ld a, -1
; EZ80-NEXT:    ret
  call {i8, i1} @llvm.smul.with.overflow.i8(i8 %0, i8 %1)
  extractvalue {i8, i1} %3, 1
  ret i1 %4
}
declare {i16, i1} @llvm.smul.with.overflow.i16(i16, i16)
define i1 @smul.with.overflow.i16(i16, i16) {
; Z80-LABEL: smul.with.overflow.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld c, (ix + 4)
; Z80-NEXT:    ld b, (ix + 5)
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    ld iyl, c
; Z80-NEXT:    ld iyh, b
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    ld c, (ix + 6)
; Z80-NEXT:    ld b, (ix + 7)
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld a, 16
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    call __lshrs
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld c, (ix + 6)
; Z80-NEXT:    ld b, (ix + 7)
; Z80-NEXT:    call __smulu
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    jp nz, BB64_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:  BB64_2:
; Z80-NEXT:    ld a, -1
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: smul.with.overflow.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld bc, (ix + 4)
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    ld iyl, c
; EZ80-CODE16-NEXT:    ld iyh, b
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    ld iy, (ix + 6)
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    ld bc, (ix + 6)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld a, 16
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    call __lshrs
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld bc, (ix + 6)
; EZ80-CODE16-NEXT:    call __smulu
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    or a, a
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    jp nz, BB64_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
; EZ80-CODE16-NEXT:  BB64_2:
; EZ80-CODE16-NEXT:    ld a, -1
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: smul.with.overflow.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld iy, (ix + 6)
; EZ80-NEXT:    ld bc, (ix + 9)
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld d, a
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld b, a
; EZ80-NEXT:    ld c, iyl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ; kill: def $e killed $e killed $ude
; EZ80-NEXT:    ld a, iyl
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld l, 16
; EZ80-NEXT:    call __lshrs
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    ld bc, (ix + 9)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __smulu
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld iyl, e
; EZ80-NEXT:    ld iyh, d
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    add.sis iy, iy
; EZ80-NEXT:    sbc.sis hl, hl
; EZ80-NEXT:    ld c, l
; EZ80-NEXT:    ld b, h
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, bc
; EZ80-NEXT:    jr nz, BB64_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    jr BB64_3
; EZ80-NEXT:  BB64_2:
; EZ80-NEXT:    ld a, -1
; EZ80-NEXT:  BB64_3:
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call {i16, i1} @llvm.smul.with.overflow.i16(i16 %0, i16 %1)
  extractvalue {i16, i1} %3, 1
  ret i1 %4
}
declare {i32, i1} @llvm.smul.with.overflow.i32(i32, i32)
define i1 @smul.with.overflow.i32(i32, i32) {
; Z80-LABEL: smul.with.overflow.i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld l, e
; Z80-NEXT:    ld h, d
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    call __llshrs
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld (ix - 4), e
; Z80-NEXT:    ld (ix - 3), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld a, 31
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    call __lshrs
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    call __lcmpu
; Z80-NEXT:    jr nz, BB65_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    jr BB65_3
; Z80-NEXT:  BB65_2:
; Z80-NEXT:    ld a, -1
; Z80-NEXT:  BB65_3:
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: smul.with.overflow.i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 4
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld l, e
; EZ80-CODE16-NEXT:    ld h, d
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    call __llshrs
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld (ix - 4), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    ld iy, (ix + 10)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld a, 31
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    call __lshrs
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    call __lcmpu
; EZ80-CODE16-NEXT:    jr nz, BB65_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    jr BB65_3
; EZ80-CODE16-NEXT:  BB65_2:
; EZ80-CODE16-NEXT:    ld a, -1
; EZ80-CODE16-NEXT:  BB65_3:
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: smul.with.overflow.i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld a, (ix + 9)
; EZ80-NEXT:    ld e, (ix + 15)
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    ld iyl, e
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld hl, (ix + 12)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshrs
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld d, e
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld bc, (ix + 12)
; EZ80-NEXT:    ld a, (ix + 15)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld l, 31
; EZ80-NEXT:    call __lshrs
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld e, d
; EZ80-NEXT:    call __lcmpu
; EZ80-NEXT:    jr nz, BB65_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    jr BB65_3
; EZ80-NEXT:  BB65_2:
; EZ80-NEXT:    ld a, -1
; EZ80-NEXT:  BB65_3:
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call {i32, i1} @llvm.smul.with.overflow.i32(i32 %0, i32 %1)
  extractvalue {i32, i1} %3, 1
  ret i1 %4
}
declare {i64, i1} @llvm.smul.with.overflow.i64(i64, i64)
define i1 @smul.with.overflow.i64(i64, i64) {
; Z80-LABEL: smul.with.overflow.i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -36
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld a, 31
; Z80-NEXT:    call __lshrs
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    ld (ix - 10), e
; Z80-NEXT:    ld (ix - 9), d
; Z80-NEXT:    ld c, (ix + 16)
; Z80-NEXT:    ld b, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lshrs
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld (ix - 6), e
; Z80-NEXT:    ld (ix - 5), d
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 12)
; Z80-NEXT:    ld b, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    ld c, (ix + 12)
; Z80-NEXT:    ld b, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld (ix - 12), e
; Z80-NEXT:    ld (ix - 11), d
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 16)
; Z80-NEXT:    ld b, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 16), l
; Z80-NEXT:    ld (ix - 15), h
; Z80-NEXT:    ld (ix - 14), e
; Z80-NEXT:    ld (ix - 13), d
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 18), l
; Z80-NEXT:    ld (ix - 17), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ld h, (ix - 17)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 20), l
; Z80-NEXT:    ld (ix - 19), h
; Z80-NEXT:    ld (ix - 18), e
; Z80-NEXT:    ld (ix - 17), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 16)
; Z80-NEXT:    ld d, (ix - 15)
; Z80-NEXT:    add hl, de
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, (ix - 12)
; Z80-NEXT:    ld h, (ix - 11)
; Z80-NEXT:    ld c, (ix - 14)
; Z80-NEXT:    ld b, (ix - 13)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    inc iy
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, (ix - 20)
; Z80-NEXT:    ld d, (ix - 19)
; Z80-NEXT:    add hl, de
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    ld e, (ix - 18)
; Z80-NEXT:    ld d, (ix - 17)
; Z80-NEXT:    adc hl, de
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    inc bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld (ix - 14), l
; Z80-NEXT:    ld (ix - 13), h
; Z80-NEXT:    ld (ix - 12), e
; Z80-NEXT:    ld (ix - 11), d
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    ld e, (ix - 10)
; Z80-NEXT:    ld d, (ix - 9)
; Z80-NEXT:    ld c, (ix + 12)
; Z80-NEXT:    ld b, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld (ix - 16), e
; Z80-NEXT:    ld (ix - 15), d
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    ld c, (ix + 16)
; Z80-NEXT:    ld b, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 22), l
; Z80-NEXT:    ld (ix - 21), h
; Z80-NEXT:    ld (ix - 18), e
; Z80-NEXT:    ld (ix - 17), d
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix - 4)
; Z80-NEXT:    ld b, (ix - 3)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 24), l
; Z80-NEXT:    ld (ix - 23), h
; Z80-NEXT:    ld (ix - 20), e
; Z80-NEXT:    ld (ix - 19), d
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 26), l
; Z80-NEXT:    ld (ix - 25), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 26)
; Z80-NEXT:    ld h, (ix - 25)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 28), l
; Z80-NEXT:    ld (ix - 27), h
; Z80-NEXT:    ld (ix - 26), e
; Z80-NEXT:    ld (ix - 25), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 16)
; Z80-NEXT:    ld h, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 30), l
; Z80-NEXT:    ld (ix - 29), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 30)
; Z80-NEXT:    ld h, (ix - 29)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 32), l
; Z80-NEXT:    ld (ix - 31), h
; Z80-NEXT:    ld (ix - 30), e
; Z80-NEXT:    ld (ix - 29), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld e, (ix - 22)
; Z80-NEXT:    ld d, (ix - 21)
; Z80-NEXT:    add iy, de
; Z80-NEXT:    ld l, (ix - 16)
; Z80-NEXT:    ld h, (ix - 15)
; Z80-NEXT:    ld e, (ix - 18)
; Z80-NEXT:    ld d, (ix - 17)
; Z80-NEXT:    adc hl, de
; Z80-NEXT:    ld (ix - 16), l
; Z80-NEXT:    ld (ix - 15), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    inc de
; Z80-NEXT:    ld c, (ix - 24)
; Z80-NEXT:    ld b, (ix - 23)
; Z80-NEXT:    add iy, bc
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix - 16)
; Z80-NEXT:    ld h, (ix - 15)
; Z80-NEXT:    ld c, (ix - 20)
; Z80-NEXT:    ld b, (ix - 19)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld (ix - 16), l
; Z80-NEXT:    ld (ix - 15), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    inc bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld c, (ix - 28)
; Z80-NEXT:    ld b, (ix - 27)
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld l, (ix - 16)
; Z80-NEXT:    ld h, (ix - 15)
; Z80-NEXT:    ld c, (ix - 26)
; Z80-NEXT:    ld b, (ix - 25)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld (ix - 16), l
; Z80-NEXT:    ld (ix - 15), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    inc bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld c, (ix - 32)
; Z80-NEXT:    ld b, (ix - 31)
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld l, (ix - 16)
; Z80-NEXT:    ld h, (ix - 15)
; Z80-NEXT:    ld c, (ix - 30)
; Z80-NEXT:    ld b, (ix - 29)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld (ix - 16), l
; Z80-NEXT:    ld (ix - 15), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    inc bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld c, (ix - 14)
; Z80-NEXT:    ld b, (ix - 13)
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld l, (ix - 16)
; Z80-NEXT:    ld h, (ix - 15)
; Z80-NEXT:    ld c, (ix - 12)
; Z80-NEXT:    ld b, (ix - 11)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld (ix - 12), l
; Z80-NEXT:    ld (ix - 11), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    inc bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld (ix - 14), l
; Z80-NEXT:    ld (ix - 13), h
; Z80-NEXT:    ld (ix - 16), e
; Z80-NEXT:    ld (ix - 15), d
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    ld e, (ix - 10)
; Z80-NEXT:    ld d, (ix - 9)
; Z80-NEXT:    ld c, (ix + 12)
; Z80-NEXT:    ld b, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 18), l
; Z80-NEXT:    ld (ix - 17), h
; Z80-NEXT:    ld (ix - 20), e
; Z80-NEXT:    ld (ix - 19), d
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    ld e, (ix - 10)
; Z80-NEXT:    ld d, (ix - 9)
; Z80-NEXT:    ld c, (ix + 16)
; Z80-NEXT:    ld b, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 30), l
; Z80-NEXT:    ld (ix - 29), h
; Z80-NEXT:    ld (ix - 32), e
; Z80-NEXT:    ld (ix - 31), d
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    ld c, (ix - 4)
; Z80-NEXT:    ld b, (ix - 3)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 26), l
; Z80-NEXT:    ld (ix - 25), h
; Z80-NEXT:    ld (ix - 28), e
; Z80-NEXT:    ld (ix - 27), d
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix - 4)
; Z80-NEXT:    ld b, (ix - 3)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 22), l
; Z80-NEXT:    ld (ix - 21), h
; Z80-NEXT:    ld (ix - 24), e
; Z80-NEXT:    ld (ix - 23), d
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    ld e, (ix - 10)
; Z80-NEXT:    ld d, (ix - 9)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    ld (ix - 10), e
; Z80-NEXT:    ld (ix - 9), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 16)
; Z80-NEXT:    ld h, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 34), l
; Z80-NEXT:    ld (ix - 33), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 34)
; Z80-NEXT:    ld h, (ix - 33)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 34), l
; Z80-NEXT:    ld (ix - 33), h
; Z80-NEXT:    ld (ix - 36), e
; Z80-NEXT:    ld (ix - 35), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld (ix - 6), e
; Z80-NEXT:    ld (ix - 5), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ld h, (ix - 17)
; Z80-NEXT:    ld e, (ix - 20)
; Z80-NEXT:    ld d, (ix - 19)
; Z80-NEXT:    ld c, (ix - 30)
; Z80-NEXT:    ld b, (ix - 29)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 32)
; Z80-NEXT:    ld h, (ix - 31)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 26)
; Z80-NEXT:    ld b, (ix - 25)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 28)
; Z80-NEXT:    ld h, (ix - 27)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 22)
; Z80-NEXT:    ld b, (ix - 21)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 24)
; Z80-NEXT:    ld h, (ix - 23)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 8)
; Z80-NEXT:    ld b, (ix - 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 34)
; Z80-NEXT:    ld b, (ix - 33)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 36)
; Z80-NEXT:    ld h, (ix - 35)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 4)
; Z80-NEXT:    ld b, (ix - 3)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 14)
; Z80-NEXT:    ld b, (ix - 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 16)
; Z80-NEXT:    ld h, (ix - 15)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld (ix - 4), c
; Z80-NEXT:    ld (ix - 3), b
; Z80-NEXT:    ld (ix - 6), e
; Z80-NEXT:    ld (ix - 5), d
; Z80-NEXT:    ld hl, 63
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 12)
; Z80-NEXT:    ld d, (ix - 11)
; Z80-NEXT:    call __llshrs
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 16)
; Z80-NEXT:    ld h, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 63
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    call __llshrs
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 12)
; Z80-NEXT:    ld d, (ix - 11)
; Z80-NEXT:    ld c, (ix - 4)
; Z80-NEXT:    ld b, (ix - 3)
; Z80-NEXT:    call __llcmpu
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    jr nz, BB66_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    jr BB66_3
; Z80-NEXT:  BB66_2:
; Z80-NEXT:    ld a, -1
; Z80-NEXT:  BB66_3:
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: smul.with.overflow.i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 36
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    ld iy, (ix + 10)
; EZ80-CODE16-NEXT:    ld a, 31
; EZ80-CODE16-NEXT:    call __lshrs
; EZ80-CODE16-NEXT:    ld (ix - 8), hl
; EZ80-CODE16-NEXT:    ld (ix - 10), de
; EZ80-CODE16-NEXT:    ld bc, (ix + 16)
; EZ80-CODE16-NEXT:    ld iy, (ix + 18)
; EZ80-CODE16-NEXT:    call __lshrs
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld (ix - 6), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 12)
; EZ80-CODE16-NEXT:    ld iy, (ix + 14)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    ld bc, (ix + 12)
; EZ80-CODE16-NEXT:    ld iy, (ix + 14)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld (ix - 12), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 16)
; EZ80-CODE16-NEXT:    ld iy, (ix + 18)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 16), hl
; EZ80-CODE16-NEXT:    ld (ix - 14), de
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 14)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 18), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 18)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 20), hl
; EZ80-CODE16-NEXT:    ld (ix - 18), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 16)
; EZ80-CODE16-NEXT:    add hl, de
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 12)
; EZ80-CODE16-NEXT:    ld bc, (ix - 14)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    inc iy
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld de, (ix - 20)
; EZ80-CODE16-NEXT:    add hl, de
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    ld de, (ix - 18)
; EZ80-CODE16-NEXT:    adc hl, de
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld (ix - 14), hl
; EZ80-CODE16-NEXT:    ld (ix - 12), de
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    ld de, (ix - 10)
; EZ80-CODE16-NEXT:    ld bc, (ix + 12)
; EZ80-CODE16-NEXT:    ld iy, (ix + 14)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld (ix - 16), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    ld bc, (ix + 16)
; EZ80-CODE16-NEXT:    ld iy, (ix + 18)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 22), hl
; EZ80-CODE16-NEXT:    ld (ix - 18), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix - 4)
; EZ80-CODE16-NEXT:    ld iy, (ix - 6)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 24), hl
; EZ80-CODE16-NEXT:    ld (ix - 20), de
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 14)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 26), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 26)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 28), hl
; EZ80-CODE16-NEXT:    ld (ix - 26), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 16)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 30), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 30)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 32), hl
; EZ80-CODE16-NEXT:    ld (ix - 30), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld iy, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 22)
; EZ80-CODE16-NEXT:    add iy, de
; EZ80-CODE16-NEXT:    ld hl, (ix - 16)
; EZ80-CODE16-NEXT:    ld de, (ix - 18)
; EZ80-CODE16-NEXT:    adc hl, de
; EZ80-CODE16-NEXT:    ld (ix - 16), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    inc de
; EZ80-CODE16-NEXT:    ld bc, (ix - 24)
; EZ80-CODE16-NEXT:    add iy, bc
; EZ80-CODE16-NEXT:    ld (ix - 2), iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 16)
; EZ80-CODE16-NEXT:    ld bc, (ix - 20)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 16), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld bc, (ix - 28)
; EZ80-CODE16-NEXT:    add hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 16)
; EZ80-CODE16-NEXT:    ld bc, (ix - 26)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 16), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld bc, (ix - 32)
; EZ80-CODE16-NEXT:    add hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 16)
; EZ80-CODE16-NEXT:    ld bc, (ix - 30)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 16), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld bc, (ix - 14)
; EZ80-CODE16-NEXT:    add hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 16)
; EZ80-CODE16-NEXT:    ld bc, (ix - 12)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 12), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld (ix - 14), hl
; EZ80-CODE16-NEXT:    ld (ix - 16), de
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    ld de, (ix - 10)
; EZ80-CODE16-NEXT:    ld bc, (ix + 12)
; EZ80-CODE16-NEXT:    ld iy, (ix + 14)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 18), hl
; EZ80-CODE16-NEXT:    ld (ix - 20), de
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    ld de, (ix - 10)
; EZ80-CODE16-NEXT:    ld bc, (ix + 16)
; EZ80-CODE16-NEXT:    ld iy, (ix + 18)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 30), hl
; EZ80-CODE16-NEXT:    ld (ix - 32), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    ld bc, (ix - 4)
; EZ80-CODE16-NEXT:    ld iy, (ix - 6)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 26), hl
; EZ80-CODE16-NEXT:    ld (ix - 28), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix - 4)
; EZ80-CODE16-NEXT:    ld iy, (ix - 6)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 22), hl
; EZ80-CODE16-NEXT:    ld (ix - 24), de
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 14)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    ld de, (ix - 10)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 8), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 8), hl
; EZ80-CODE16-NEXT:    ld (ix - 10), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 16)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 34), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 34)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 34), hl
; EZ80-CODE16-NEXT:    ld (ix - 36), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix - 6)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld (ix - 6), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 18)
; EZ80-CODE16-NEXT:    ld de, (ix - 20)
; EZ80-CODE16-NEXT:    ld bc, (ix - 30)
; EZ80-CODE16-NEXT:    ld iy, (ix - 32)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 26)
; EZ80-CODE16-NEXT:    ld iy, (ix - 28)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 22)
; EZ80-CODE16-NEXT:    ld iy, (ix - 24)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 8)
; EZ80-CODE16-NEXT:    ld iy, (ix - 10)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 34)
; EZ80-CODE16-NEXT:    ld iy, (ix - 36)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 4)
; EZ80-CODE16-NEXT:    ld iy, (ix - 6)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 14)
; EZ80-CODE16-NEXT:    ld iy, (ix - 16)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld (ix - 4), bc
; EZ80-CODE16-NEXT:    ld (ix - 6), de
; EZ80-CODE16-NEXT:    ld hl, 63
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 12)
; EZ80-CODE16-NEXT:    call __llshrs
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 16)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 14)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 8), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 63
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    call __llshrs
; EZ80-CODE16-NEXT:    ld (ix - 8), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 6)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 12)
; EZ80-CODE16-NEXT:    ld bc, (ix - 4)
; EZ80-CODE16-NEXT:    call __llcmpu
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 2), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 2)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    jr nz, BB66_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    jr BB66_3
; EZ80-CODE16-NEXT:  BB66_2:
; EZ80-CODE16-NEXT:    ld a, -1
; EZ80-CODE16-NEXT:  BB66_3:
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: smul.with.overflow.i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, -201
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld bc, (ix + 12)
; EZ80-NEXT:    ld de, (ix + 21)
; EZ80-NEXT:    ld a, b
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld h, a
; EZ80-NEXT:    ld l, c
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ld bc, -129
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld bc, -150
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld h, a
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    ld (ix - 126), hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld bc, -147
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld (ix - 123), a
; EZ80-NEXT:    ld (ix - 114), de
; EZ80-NEXT:    ld.sis hl, (ix - 113)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -161
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 111), de
; EZ80-NEXT:    ld.sis iy, (ix - 110)
; EZ80-NEXT:    ld l, 31
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -164
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), a
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 108), iy
; EZ80-NEXT:    ld (ix - 106), a
; EZ80-NEXT:    ld bc, (ix - 108)
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    ld de, -176
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld (iy), a
; EZ80-NEXT:    call __lshrs
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -157
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    dec de
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), a ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix + 18)
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld (ix - 117), a
; EZ80-NEXT:    ld (ix - 105), de
; EZ80-NEXT:    ld.sis bc, (ix - 104)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -144
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld (ix - 102), de
; EZ80-NEXT:    ld.sis de, (ix - 101)
; EZ80-NEXT:    ld iy, (ix + 21)
; EZ80-NEXT:    ld a, iyl
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -170
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), a
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 99), de
; EZ80-NEXT:    ld (ix - 97), a
; EZ80-NEXT:    ld bc, (ix - 99)
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    ld de, -173
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld (iy), a
; EZ80-NEXT:    call __lshrs
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -153
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    dec de
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), a ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    push af
; EZ80-NEXT:    ld a, (ix - 123)
; EZ80-NEXT:    ld iyl, a
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld bc, (ix + 15)
; EZ80-NEXT:    ld a, (ix - 117)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ld (ix - 96), hl
; EZ80-NEXT:    ld.sis hl, (ix - 95)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -129
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld iyh, e
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -136
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    push af
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    ld (ix), a
; EZ80-NEXT:    pop af
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 93), hl
; EZ80-NEXT:    push af
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    ld (ix - 91), a
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld hl, (ix - 93)
; EZ80-NEXT:    ld iyh, d
; EZ80-NEXT:    push ix
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    push af
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    ld (ix), a
; EZ80-NEXT:    pop af
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld e, iyh
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -167
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 120), e ; 1-byte Folded Spill
; EZ80-NEXT:    ld hl, (ix + 18)
; EZ80-NEXT:    ld (ix - 90), hl
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld.sis bc, (ix - 89)
; EZ80-NEXT:    ld hl, (ix - 126)
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -140
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), a
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 87), bc
; EZ80-NEXT:    ld (ix - 85), a
; EZ80-NEXT:    ld bc, (ix - 87)
; EZ80-NEXT:    ld a, h
; EZ80-NEXT:    dec de
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -182
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -179
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld bc, -132
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), de
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld a, (ix - 117)
; EZ80-NEXT:    ld iyl, a
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -139
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), iy
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld bc, -185
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld bc, -188
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -167
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld iy, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -182
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld a, (ix - 120) ; 1-byte Folded Reload
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -179
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld l, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    adc a, l
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    inc de
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -185
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld de, -188
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    push af
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld l, (iy)
; EZ80-NEXT:    adc a, l
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    xor a, a
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -188
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -185
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -129
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 84), hl
; EZ80-NEXT:    ld l, (ix - 82)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -150
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld c, e
; EZ80-NEXT:    ld b, d
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -167
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 81), hl
; EZ80-NEXT:    ld.sis (ix - 80), bc
; EZ80-NEXT:    ld hl, (ix - 81)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld (ix - 78), de
; EZ80-NEXT:    ld e, (ix - 76)
; EZ80-NEXT:    ld iy, (ix + 15)
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    ld a, (ix - 117) ; 1-byte Folded Reload
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 120), hl
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -189
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ld (ix - 75), hl
; EZ80-NEXT:    ld.sis hl, (ix - 74)
; EZ80-NEXT:    ld (ix - 72), hl
; EZ80-NEXT:    ld bc, -136
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld a, (hl)
; EZ80-NEXT:    ld (ix - 70), a
; EZ80-NEXT:    ld hl, (ix - 72)
; EZ80-NEXT:    ld de, (ix + 18)
; EZ80-NEXT:    ld (ix - 69), de
; EZ80-NEXT:    ld.sis de, (ix - 68)
; EZ80-NEXT:    ld (ix - 66), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -140
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 64), a
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (ix - 66)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -135
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld e, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -141
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -193
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -190
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix - 126)
; EZ80-NEXT:    ld (ix - 63), hl
; EZ80-NEXT:    ld l, (ix - 61)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -147
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld c, e
; EZ80-NEXT:    ld b, d
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -182
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 60), hl
; EZ80-NEXT:    ld.sis (ix - 59), bc
; EZ80-NEXT:    ld bc, (ix - 60)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld (ix - 57), de
; EZ80-NEXT:    ld a, (ix - 55)
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld e, (ix - 123) ; 1-byte Folded Reload
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -197
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -194
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -161
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 54), hl
; EZ80-NEXT:    ld bc, -164
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld a, (hl)
; EZ80-NEXT:    ld (ix - 52), a
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (ix - 54)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -164
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -176
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -161
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -139
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld bc, -200
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    dec bc
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -144
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 51), hl
; EZ80-NEXT:    ld bc, -170
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld a, (hl)
; EZ80-NEXT:    ld (ix - 49), a
; EZ80-NEXT:    ld de, (ix - 51)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -176
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, 0
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -173
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -179
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -132
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld bc, -144
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld bc, -170
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    ld iy, (ix - 120)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -193
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -189
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    dec bc
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld l, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    adc a, l
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    inc de
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -197
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -194
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld l, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    adc a, l
; EZ80-NEXT:    ld (ix - 120), a ; 1-byte Folded Spill
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    xor a, a
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -173
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -200
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld a, (ix - 120) ; 1-byte Folded Reload
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -201
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld l, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    adc a, l
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld d, a
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -173
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    xor a, a
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 120), hl
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -144
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -170
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld l, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    adc a, l
; EZ80-NEXT:    ld d, a
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    ld hl, (ix - 120)
; EZ80-NEXT:    xor a, a
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -170
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -188
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (ix - 120), iy
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    ld bc, -185
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    push af
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld l, (iy)
; EZ80-NEXT:    adc a, l
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -144
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -170
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    xor a, a
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -170
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -173
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -150
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (ix + 15)
; EZ80-NEXT:    ld a, (ix - 117) ; 1-byte Folded Reload
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 117), hl
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -185
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -129
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 48), hl
; EZ80-NEXT:    ld l, (ix - 46)
; EZ80-NEXT:    ld (ix - 45), hl
; EZ80-NEXT:    ld bc, -167
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld.sis (ix - 44), hl
; EZ80-NEXT:    ld hl, (ix - 45)
; EZ80-NEXT:    ld (ix - 42), iy
; EZ80-NEXT:    ld e, (ix - 40)
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (ix + 18)
; EZ80-NEXT:    ld (ix - 39), bc
; EZ80-NEXT:    ld.sis bc, (ix - 38)
; EZ80-NEXT:    ld (ix - 36), bc
; EZ80-NEXT:    ld bc, -140
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld a, (iy)
; EZ80-NEXT:    ld (ix - 34), a
; EZ80-NEXT:    ld bc, (ix - 36)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -141
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -129
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -140
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ld (ix - 33), hl
; EZ80-NEXT:    ld.sis hl, (ix - 32)
; EZ80-NEXT:    ld (ix - 30), hl
; EZ80-NEXT:    ld bc, -136
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld a, (hl)
; EZ80-NEXT:    ld (ix - 28), a
; EZ80-NEXT:    ld hl, (ix - 30)
; EZ80-NEXT:    ld de, (ix - 126)
; EZ80-NEXT:    ld (ix - 27), de
; EZ80-NEXT:    ld e, (ix - 25)
; EZ80-NEXT:    ld (ix - 24), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -182
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld.sis (ix - 23), de
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (ix - 24)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -147
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld iy, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 21), iy
; EZ80-NEXT:    ld a, (ix - 19)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -135
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld e, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -135
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    dec bc
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld e, (ix - 123) ; 1-byte Folded Reload
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    ld a, iyl
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 123), hl
; EZ80-NEXT:    ld (ix - 126), e ; 1-byte Folded Spill
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ld bc, -158
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld a, (iy)
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -139
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -157
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld bc, -139
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld bc, -141
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -179
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -176
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -164
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -161
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld bc, -147
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld bc, -150
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -154
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -132
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld d, e
; EZ80-NEXT:    ld hl, (ix - 117)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -185
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld e, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -129
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -140
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -135
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    dec de
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld bc, (ix - 123)
; EZ80-NEXT:    ld a, (ix - 126) ; 1-byte Folded Reload
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -139
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -141
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -147
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -150
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld de, -170
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld bc, (iy)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -173
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld (ix - 117), iy
; EZ80-NEXT:    ld b, e
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld d, iyh
; EZ80-NEXT:    ld (ix - 123), de
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -144
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 18), hl
; EZ80-NEXT:    ld.sis (ix - 17), de
; EZ80-NEXT:    ld de, (ix - 18)
; EZ80-NEXT:    ld (ix - 15), iy
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld c, (ix - 13)
; EZ80-NEXT:    ld (ix - 126), bc
; EZ80-NEXT:    ld hl, 63
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 120)
; EZ80-NEXT:    call __llshrs
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, (ix + 21)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 18)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ld bc, (ix + 12)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 63
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshrs
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ld bc, -129
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -132
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -144
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 12), de
; EZ80-NEXT:    ld hl, (ix - 123)
; EZ80-NEXT:    ld.sis (ix - 11), hl
; EZ80-NEXT:    ld de, (ix - 12)
; EZ80-NEXT:    ld hl, (ix - 117)
; EZ80-NEXT:    ld (ix - 9), hl
; EZ80-NEXT:    ld iy, (ix - 126)
; EZ80-NEXT:    push af
; EZ80-NEXT:    ld a, (ix - 7)
; EZ80-NEXT:    ld iyl, a
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    push bc
; EZ80-NEXT:    ld bc, -132
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -129
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 120)
; EZ80-NEXT:    ld c, iyl
; EZ80-NEXT:    ld b, iyh
; EZ80-NEXT:    call __llcmpu
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 117), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 117)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    jr nz, BB66_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    jr BB66_3
; EZ80-NEXT:  BB66_2:
; EZ80-NEXT:    ld a, -1
; EZ80-NEXT:  BB66_3:
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call {i64, i1} @llvm.smul.with.overflow.i64(i64 %0, i64 %1)
  extractvalue {i64, i1} %3, 1
  ret i1 %4
}

declare {i8, i1} @llvm.umul.with.overflow.i8(i8, i8)
define i1 @umul.with.overflow.i8(i8, i8) {
; Z80-LABEL: umul.with.overflow.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld a, (iy + 4)
; Z80-NEXT:    ld b, -1
; Z80-NEXT:    cp a, 2
; Z80-NEXT:    jr nc, BB67_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:  BB67_2:
; Z80-NEXT:    ld c, a
; Z80-NEXT:    call __bdivu
; Z80-NEXT:    cp a, l
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: umul.with.overflow.i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld l, (iy + 2)
; EZ80-CODE16-NEXT:    ld a, (iy + 4)
; EZ80-CODE16-NEXT:    ld b, -1
; EZ80-CODE16-NEXT:    cp a, 2
; EZ80-CODE16-NEXT:    jr nc, BB67_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:  BB67_2:
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    call __bdivu
; EZ80-CODE16-NEXT:    cp a, l
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: umul.with.overflow.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld l, (iy + 3)
; EZ80-NEXT:    ld a, (iy + 6)
; EZ80-NEXT:    ld b, -1
; EZ80-NEXT:    cp a, 2
; EZ80-NEXT:    jr nc, BB67_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, 1
; EZ80-NEXT:  BB67_2:
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    call __bdivu
; EZ80-NEXT:    cp a, l
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ret
  call {i8, i1} @llvm.umul.with.overflow.i8(i8 %0, i8 %1)
  extractvalue {i8, i1} %3, 1
  ret i1 %4
}
declare {i16, i1} @llvm.umul.with.overflow.i16(i16, i16)
define i1 @umul.with.overflow.i16(i16, i16) {
; Z80-LABEL: umul.with.overflow.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld c, (ix + 6)
; Z80-NEXT:    ld b, (ix + 7)
; Z80-NEXT:    ld iy, -1
; Z80-NEXT:    ld de, 2
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:    jr nc, BB68_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld bc, 1
; Z80-NEXT:  BB68_2:
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    call __sdivu
; Z80-NEXT:    ld e, (ix + 4)
; Z80-NEXT:    ld d, (ix + 5)
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: umul.with.overflow.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld bc, (ix + 6)
; EZ80-CODE16-NEXT:    ld iy, -1
; EZ80-CODE16-NEXT:    ld de, 2
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    sbc hl, de
; EZ80-CODE16-NEXT:    jr nc, BB68_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld bc, 1
; EZ80-CODE16-NEXT:  BB68_2:
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    call __sdivu
; EZ80-CODE16-NEXT:    ld de, (ix + 4)
; EZ80-CODE16-NEXT:    or a, a
; EZ80-CODE16-NEXT:    sbc hl, de
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: umul.with.overflow.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld bc, (ix + 9)
; EZ80-NEXT:    ld.sis iy, -1
; EZ80-NEXT:    ld.sis de, 2
; EZ80-NEXT:    ld l, c
; EZ80-NEXT:    ld h, b
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:    jr nc, BB68_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld.sis bc, 1
; EZ80-NEXT:  BB68_2:
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld d, iyh
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __sdivu
; EZ80-NEXT:    ld de, (ix + 6)
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call {i16, i1} @llvm.umul.with.overflow.i16(i16 %0, i16 %1)
  extractvalue {i16, i1} %3, 1
  ret i1 %4
}
declare {i32, i1} @llvm.umul.with.overflow.i32(i32, i32)
define i1 @umul.with.overflow.i32(i32, i32) {
; Z80-LABEL: umul.with.overflow.i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld hl, 1
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    call __lcmpu
; Z80-NEXT:    ccf
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    inc a
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB69_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:  BB69_2:
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB69_4
; Z80-NEXT:  ; %bb.3:
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:  BB69_4:
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    call __ldivu
; Z80-NEXT:    ld c, (ix + 4)
; Z80-NEXT:    ld b, (ix + 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lcmpu
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: umul.with.overflow.i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    ld iy, (ix + 10)
; EZ80-CODE16-NEXT:    ld hl, 1
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    call __lcmpu
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    inc a
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB69_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:  BB69_2:
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB69_4
; EZ80-CODE16-NEXT:  ; %bb.3:
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:  BB69_4:
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    call __ldivu
; EZ80-CODE16-NEXT:    ld bc, (ix + 4)
; EZ80-CODE16-NEXT:    ld iy, (ix + 6)
; EZ80-CODE16-NEXT:    call __lcmpu
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: umul.with.overflow.i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld bc, (ix + 12)
; EZ80-NEXT:    ld d, (ix + 15)
; EZ80-NEXT:    ld hl, 1
; EZ80-NEXT:    ld iyl, 0
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __lcmpu
; EZ80-NEXT:    ccf
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    inc a
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB69_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:  BB69_2:
; EZ80-NEXT:    ld l, (ix + 9)
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld iyh, e
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld e, -1
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB69_4
; EZ80-NEXT:  ; %bb.3:
; EZ80-NEXT:    ld d, iyl
; EZ80-NEXT:  BB69_4:
; EZ80-NEXT:    scf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __ldivu
; EZ80-NEXT:    ld bc, (ix + 6)
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    call __lcmpu
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call {i32, i1} @llvm.umul.with.overflow.i32(i32 %0, i32 %1)
  extractvalue {i32, i1} %3, 1
  ret i1 %4
}
declare {i64, i1} @llvm.umul.with.overflow.i64(i64, i64)
define i1 @umul.with.overflow.i64(i64, i64) {
; Z80-LABEL: umul.with.overflow.i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -5
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld e, (ix + 16)
; Z80-NEXT:    ld d, (ix + 17)
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld hl, 1
; Z80-NEXT:    ld e, c
; Z80-NEXT:    ld d, b
; Z80-NEXT:    call __llcmpu
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 5), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld iy, 10
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld sp, iy
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 5)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    ccf
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    inc a
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB70_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld hl, 1
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:  BB70_2:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    jr nz, BB70_4
; Z80-NEXT:  ; %bb.3:
; Z80-NEXT:    ld iyl, c
; Z80-NEXT:    ld iyh, b
; Z80-NEXT:  BB70_4:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld l, (ix + 16)
; Z80-NEXT:    ld h, (ix + 17)
; Z80-NEXT:    jr nz, BB70_6
; Z80-NEXT:  ; %bb.5:
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:  BB70_6:
; Z80-NEXT:    ld de, -1
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB70_8
; Z80-NEXT:  ; %bb.7:
; Z80-NEXT:    ld (ix - 4), c
; Z80-NEXT:    ld (ix - 3), b
; Z80-NEXT:  BB70_8:
; Z80-NEXT:    ld c, (ix - 4)
; Z80-NEXT:    ld b, (ix - 3)
; Z80-NEXT:    push bc
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, e
; Z80-NEXT:    ld h, d
; Z80-NEXT:    ld c, e
; Z80-NEXT:    ld b, d
; Z80-NEXT:    call __lldivu
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    call __llcmpu
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: umul.with.overflow.i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 5
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld iy, (ix + 14)
; EZ80-CODE16-NEXT:    ld de, (ix + 16)
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, 1
; EZ80-CODE16-NEXT:    ld e, c
; EZ80-CODE16-NEXT:    ld d, b
; EZ80-CODE16-NEXT:    call __llcmpu
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 5), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld iy, 10
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld sp, iy
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 5)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    inc a
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB70_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld hl, 1
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:  BB70_2:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld hl, (ix + 14)
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    jr nz, BB70_4
; EZ80-CODE16-NEXT:  ; %bb.3:
; EZ80-CODE16-NEXT:    ld iyl, c
; EZ80-CODE16-NEXT:    ld iyh, b
; EZ80-CODE16-NEXT:  BB70_4:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld hl, (ix + 16)
; EZ80-CODE16-NEXT:    jr nz, BB70_6
; EZ80-CODE16-NEXT:  ; %bb.5:
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:  BB70_6:
; EZ80-CODE16-NEXT:    ld de, -1
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB70_8
; EZ80-CODE16-NEXT:  ; %bb.7:
; EZ80-CODE16-NEXT:    ld (ix - 4), bc
; EZ80-CODE16-NEXT:  BB70_8:
; EZ80-CODE16-NEXT:    ld bc, (ix - 4)
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld l, e
; EZ80-CODE16-NEXT:    ld h, d
; EZ80-CODE16-NEXT:    ld c, e
; EZ80-CODE16-NEXT:    ld b, d
; EZ80-CODE16-NEXT:    call __lldivu
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    call __llcmpu
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 2), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 2)
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: umul.with.overflow.i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 4
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld iy, (ix + 15)
; EZ80-NEXT:    ld de, (ix + 21)
; EZ80-NEXT:    ld hl, 1
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld de, (ix + 18)
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld (ix - 3), iy
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    call __llcmpu
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 4), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 4)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ccf
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    inc a
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB70_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld hl, 1
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:  BB70_2:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    ld hl, (ix + 18)
; EZ80-NEXT:    jr nz, BB70_4
; EZ80-NEXT:  ; %bb.3:
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:  BB70_4:
; EZ80-NEXT:    ld.sis bc, -1
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    ld de, (ix + 21)
; EZ80-NEXT:    jp nz, BB70_6
; EZ80-NEXT:  ; %bb.5:
; EZ80-NEXT:    ld.sis de, 0
; EZ80-NEXT:    ; kill: def $de killed $de def $ude
; EZ80-NEXT:  BB70_6:
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld de, -1
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    call __lldivu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, (ix + 12)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld iy, (ix + 9)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld iy, (ix + 6)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llcmpu
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 3), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 3)
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call {i64, i1} @llvm.umul.with.overflow.i64(i64 %0, i64 %1)
  extractvalue {i64, i1} %3, 1
  ret i1 %4
}

declare i8 @llvm.sadd.sat.i8(i8, i8)
define i8 @sadd.sat.i8(i8, i8) {
; Z80-LABEL: sadd.sat.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 4)
; Z80-NEXT:    ld a, l
; Z80-NEXT:    add a, h
; Z80-NEXT:    ld e, a
; Z80-NEXT:    rlc a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    add a, -128
; Z80-NEXT:    ld c, a
; Z80-NEXT:    ld a, l
; Z80-NEXT:    add a, h
; Z80-NEXT:    jp pe, BB71_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld c, e
; Z80-NEXT:  BB71_2:
; Z80-NEXT:    ld a, c
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: sadd.sat.i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld l, (iy + 2)
; EZ80-CODE16-NEXT:    ld h, (iy + 4)
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    add a, h
; EZ80-CODE16-NEXT:    ld e, a
; EZ80-CODE16-NEXT:    rlc a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    add a, -128
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    add a, h
; EZ80-CODE16-NEXT:    jp pe, BB71_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld c, e
; EZ80-CODE16-NEXT:  BB71_2:
; EZ80-CODE16-NEXT:    ld a, c
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: sadd.sat.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld l, (iy + 3)
; EZ80-NEXT:    ld h, (iy + 6)
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    add a, h
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    rlc a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    add a, -128
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    add a, h
; EZ80-NEXT:    jp pe, BB71_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld c, e
; EZ80-NEXT:  BB71_2:
; EZ80-NEXT:    ld a, c
; EZ80-NEXT:    ret
  call i8 @llvm.sadd.sat.i8(i8 %0, i8 %1)
  ret i8 %3
}
declare i16 @llvm.sadd.sat.i16(i16, i16)
define i16 @sadd.sat.i16(i16, i16) {
; Z80-LABEL: sadd.sat.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    add hl, de
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld bc, -32768
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld c, (ix + 6)
; Z80-NEXT:    ld b, (ix + 7)
; Z80-NEXT:    add iy, bc
; Z80-NEXT:    jp pe, BB72_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ex de, hl
; Z80-NEXT:  BB72_2:
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: sadd.sat.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    add hl, de
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld bc, -32768
; EZ80-CODE16-NEXT:    add hl, bc
; EZ80-CODE16-NEXT:    ld iy, (ix - 2)
; EZ80-CODE16-NEXT:    ld bc, (ix + 6)
; EZ80-CODE16-NEXT:    add iy, bc
; EZ80-CODE16-NEXT:    jp pe, BB72_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:  BB72_2:
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: sadd.sat.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    add.sis hl, de
; EZ80-NEXT:    ld e, l
; EZ80-NEXT:    ld d, h
; EZ80-NEXT:    ld iyl, e
; EZ80-NEXT:    ld iyh, d
; EZ80-NEXT:    add.sis iy, iy
; EZ80-NEXT:    sbc.sis hl, hl
; EZ80-NEXT:    ld.sis bc, -32768
; EZ80-NEXT:    add.sis hl, bc
; EZ80-NEXT:    ld iy, (ix - 3)
; EZ80-NEXT:    ld bc, (ix + 9)
; EZ80-NEXT:    add.sis iy, bc
; EZ80-NEXT:    jp pe, BB72_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:  BB72_2:
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i16 @llvm.sadd.sat.i16(i16 %0, i16 %1)
  ret i16 %3
}
declare i32 @llvm.sadd.sat.i32(i32, i32)
define i32 @sadd.sat.i32(i32, i32) {
; Z80-LABEL: sadd.sat.i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -5
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ld e, (ix + 8)
; Z80-NEXT:    ld d, (ix + 9)
; Z80-NEXT:    ld c, (ix + 10)
; Z80-NEXT:    ld b, (ix + 11)
; Z80-NEXT:    add iy, de
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    jp pe, BB73_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    jr BB73_3
; Z80-NEXT:  BB73_2:
; Z80-NEXT:    ld a, -1
; Z80-NEXT:  BB73_3:
; Z80-NEXT:    ld (ix - 1), a
; Z80-NEXT:    ld a, 31
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 5), l
; Z80-NEXT:    ld (ix - 4), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld (ix - 3), l
; Z80-NEXT:    ld (ix - 2), h
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    call __lshrs
; Z80-NEXT:    ld iy, -32768
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld a, (ix - 1)
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB73_5
; Z80-NEXT:  ; %bb.4:
; Z80-NEXT:    ld l, (ix - 5)
; Z80-NEXT:    ld h, (ix - 4)
; Z80-NEXT:  BB73_5:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB73_7
; Z80-NEXT:  ; %bb.6:
; Z80-NEXT:    ld e, (ix - 3)
; Z80-NEXT:    ld d, (ix - 2)
; Z80-NEXT:  BB73_7:
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: sadd.sat.i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 5
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld iy, (ix + 4)
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    ld de, (ix + 8)
; EZ80-CODE16-NEXT:    ld bc, (ix + 10)
; EZ80-CODE16-NEXT:    add iy, de
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    jp pe, BB73_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    jr BB73_3
; EZ80-CODE16-NEXT:  BB73_2:
; EZ80-CODE16-NEXT:    ld a, -1
; EZ80-CODE16-NEXT:  BB73_3:
; EZ80-CODE16-NEXT:    ld (ix - 1), a
; EZ80-CODE16-NEXT:    ld a, 31
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    ld (ix - 5), iy
; EZ80-CODE16-NEXT:    ld (ix - 3), hl
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    call __lshrs
; EZ80-CODE16-NEXT:    ld iy, -32768
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld a, (ix - 1)
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB73_5
; EZ80-CODE16-NEXT:  ; %bb.4:
; EZ80-CODE16-NEXT:    ld hl, (ix - 5)
; EZ80-CODE16-NEXT:  BB73_5:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB73_7
; EZ80-CODE16-NEXT:  ; %bb.6:
; EZ80-CODE16-NEXT:    ld de, (ix - 3)
; EZ80-CODE16-NEXT:  BB73_7:
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: sadd.sat.i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    dec sp
; EZ80-NEXT:    ld iy, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 12)
; EZ80-NEXT:    ld l, (ix + 15)
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld a, (ix + 9)
; EZ80-NEXT:    adc a, l
; EZ80-NEXT:    jp pe, BB73_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld d, 0
; EZ80-NEXT:    jr BB73_3
; EZ80-NEXT:  BB73_2:
; EZ80-NEXT:    ld d, -1
; EZ80-NEXT:  BB73_3:
; EZ80-NEXT:    ld l, 31
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    ld (ix - 1), a
; EZ80-NEXT:    call __lshrs
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld bc, 0
; EZ80-NEXT:    ld a, -128
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    bit 0, d
; EZ80-NEXT:    jr nz, BB73_5
; EZ80-NEXT:  ; %bb.4:
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:  BB73_5:
; EZ80-NEXT:    bit 0, d
; EZ80-NEXT:    jr nz, BB73_7
; EZ80-NEXT:  ; %bb.6:
; EZ80-NEXT:    ld e, (ix - 1)
; EZ80-NEXT:  BB73_7:
; EZ80-NEXT:    inc sp
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i32 @llvm.sadd.sat.i32(i32 %0, i32 %1)
  ret i32 %3
}
declare i64 @llvm.sadd.sat.i64(i64, i64)
define i64 @sadd.sat.i64(i64, i64) {
; Z80-LABEL: sadd.sat.i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld e, (ix + 12)
; Z80-NEXT:    ld d, (ix + 13)
; Z80-NEXT:    ld c, (ix + 14)
; Z80-NEXT:    ld b, (ix + 15)
; Z80-NEXT:    add iy, de
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 16)
; Z80-NEXT:    ld d, (ix + 17)
; Z80-NEXT:    adc hl, de
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ld e, (ix + 18)
; Z80-NEXT:    ld d, (ix + 19)
; Z80-NEXT:    adc hl, de
; Z80-NEXT:    jp pe, BB74_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    jr BB74_3
; Z80-NEXT:  BB74_2:
; Z80-NEXT:    ld a, -1
; Z80-NEXT:  BB74_3:
; Z80-NEXT:    ld de, 63
; Z80-NEXT:    push de
; Z80-NEXT:    ld (ix - 6), l
; Z80-NEXT:    ld (ix - 5), h
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, (ix - 2)
; Z80-NEXT:    ld d, (ix - 1)
; Z80-NEXT:    ld (ix - 8), c
; Z80-NEXT:    ld (ix - 7), b
; Z80-NEXT:    call __llshrs
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, -32768
; Z80-NEXT:    push hl
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    call __lladd
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB74_9
; Z80-NEXT:  ; %bb.4:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB74_10
; Z80-NEXT:  BB74_5:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB74_11
; Z80-NEXT:  BB74_6:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB74_8
; Z80-NEXT:  BB74_7:
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:  BB74_8:
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:  BB74_9:
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp nz, BB74_5
; Z80-NEXT:  BB74_10:
; Z80-NEXT:    ld e, (ix - 2)
; Z80-NEXT:    ld d, (ix - 1)
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp nz, BB74_6
; Z80-NEXT:  BB74_11:
; Z80-NEXT:    ld c, (ix - 8)
; Z80-NEXT:    ld b, (ix - 7)
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB74_7
; Z80-NEXT:    jp BB74_8
;
; EZ80-CODE16-LABEL: sadd.sat.i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 10
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld iy, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 12)
; EZ80-CODE16-NEXT:    ld bc, (ix + 14)
; EZ80-CODE16-NEXT:    add iy, de
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 16)
; EZ80-CODE16-NEXT:    adc hl, de
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    ld de, (ix + 18)
; EZ80-CODE16-NEXT:    adc hl, de
; EZ80-CODE16-NEXT:    jp pe, BB74_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    jr BB74_3
; EZ80-CODE16-NEXT:  BB74_2:
; EZ80-CODE16-NEXT:    ld a, -1
; EZ80-CODE16-NEXT:  BB74_3:
; EZ80-CODE16-NEXT:    ld de, 63
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld (ix - 6), hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld (ix - 10), iy
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld de, (ix - 2)
; EZ80-CODE16-NEXT:    ld (ix - 8), bc
; EZ80-CODE16-NEXT:    call __llshrs
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, -32768
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    call __lladd
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB74_9
; EZ80-CODE16-NEXT:  ; %bb.4:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB74_10
; EZ80-CODE16-NEXT:  BB74_5:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB74_11
; EZ80-CODE16-NEXT:  BB74_6:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB74_8
; EZ80-CODE16-NEXT:  BB74_7:
; EZ80-CODE16-NEXT:    ld iy, (ix - 6)
; EZ80-CODE16-NEXT:  BB74_8:
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
; EZ80-CODE16-NEXT:  BB74_9:
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp nz, BB74_5
; EZ80-CODE16-NEXT:  BB74_10:
; EZ80-CODE16-NEXT:    ld de, (ix - 2)
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp nz, BB74_6
; EZ80-CODE16-NEXT:  BB74_11:
; EZ80-CODE16-NEXT:    ld bc, (ix - 8)
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB74_7
; EZ80-CODE16-NEXT:    jp BB74_8
;
; EZ80-LABEL: sadd.sat.i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 9
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld iy, (ix + 6)
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ld de, (ix + 15)
; EZ80-NEXT:    ld bc, (ix + 18)
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    adc hl, bc
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld hl, (ix + 12)
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    ld bc, (ix + 21)
; EZ80-NEXT:    adc.sis hl, bc
; EZ80-NEXT:    ld c, l
; EZ80-NEXT:    ld b, h
; EZ80-NEXT:    jp pe, BB74_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    jr BB74_3
; EZ80-NEXT:  BB74_2:
; EZ80-NEXT:    ld a, -1
; EZ80-NEXT:  BB74_3:
; EZ80-NEXT:    ld hl, 63
; EZ80-NEXT:    push hl
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld (ix - 6), de
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    call __llshrs
; EZ80-NEXT:    ld (ix - 9), iy
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld iy, -32768
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    push iy
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __lladd
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB74_8
; EZ80-NEXT:  ; %bb.4:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB74_9
; EZ80-NEXT:  BB74_5:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB74_7
; EZ80-NEXT:  BB74_6:
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:  BB74_7:
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB74_8:
; EZ80-NEXT:    ld hl, (ix - 9)
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB74_5
; EZ80-NEXT:  BB74_9:
; EZ80-NEXT:    ld de, (ix - 6)
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB74_6
; EZ80-NEXT:    jp BB74_7
  call i64 @llvm.sadd.sat.i64(i64 %0, i64 %1)
  ret i64 %3
}

declare i8 @llvm.uadd.sat.i8(i8, i8)
define i8 @uadd.sat.i8(i8, i8) {
; Z80-LABEL: uadd.sat.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld e, (iy + 2)
; Z80-NEXT:    ld c, (iy + 4)
; Z80-NEXT:    ld a, e
; Z80-NEXT:    add a, c
; Z80-NEXT:    ld l, a
; Z80-NEXT:    ld a, e
; Z80-NEXT:    add a, c
; Z80-NEXT:    jr nc, BB75_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld l, -1
; Z80-NEXT:  BB75_2:
; Z80-NEXT:    ld a, l
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: uadd.sat.i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld e, (iy + 2)
; EZ80-CODE16-NEXT:    ld c, (iy + 4)
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    add a, c
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    add a, c
; EZ80-CODE16-NEXT:    jr nc, BB75_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld l, -1
; EZ80-CODE16-NEXT:  BB75_2:
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: uadd.sat.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld e, (iy + 3)
; EZ80-NEXT:    ld c, (iy + 6)
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    add a, c
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    add a, c
; EZ80-NEXT:    jr nc, BB75_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld l, -1
; EZ80-NEXT:  BB75_2:
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    ret
  call i8 @llvm.uadd.sat.i8(i8 %0, i8 %1)
  ret i8 %3
}
declare i16 @llvm.uadd.sat.i16(i16, i16)
define i16 @uadd.sat.i16(i16, i16) {
; Z80-LABEL: uadd.sat.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld d, (iy + 5)
; Z80-NEXT:    add hl, de
; Z80-NEXT:    jr nc, BB76_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:  BB76_2:
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: uadd.sat.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld de, (iy + 4)
; EZ80-CODE16-NEXT:    add hl, de
; EZ80-CODE16-NEXT:    jr nc, BB76_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:  BB76_2:
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: uadd.sat.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld de, (iy + 6)
; EZ80-NEXT:    add.sis hl, de
; EZ80-NEXT:    jr nc, BB76_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld.sis hl, -1
; EZ80-NEXT:  BB76_2:
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    ret
  call i16 @llvm.uadd.sat.i16(i16 %0, i16 %1)
  ret i16 %3
}
declare i32 @llvm.uadd.sat.i32(i32, i32)
define i32 @uadd.sat.i32(i32, i32) {
; Z80-LABEL: uadd.sat.i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ld e, (ix + 8)
; Z80-NEXT:    ld d, (ix + 9)
; Z80-NEXT:    ld c, (ix + 10)
; Z80-NEXT:    ld b, (ix + 11)
; Z80-NEXT:    add iy, de
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld de, -1
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld c, e
; Z80-NEXT:    ld b, d
; Z80-NEXT:    jr nz, BB77_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:  BB77_2:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB77_4
; Z80-NEXT:  ; %bb.3:
; Z80-NEXT:    ex de, hl
; Z80-NEXT:  BB77_4:
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: uadd.sat.i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld iy, (ix + 4)
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    ld de, (ix + 8)
; EZ80-CODE16-NEXT:    ld bc, (ix + 10)
; EZ80-CODE16-NEXT:    add iy, de
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld de, -1
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld c, e
; EZ80-CODE16-NEXT:    ld b, d
; EZ80-CODE16-NEXT:    jr nz, BB77_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:  BB77_2:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB77_4
; EZ80-CODE16-NEXT:  ; %bb.3:
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:  BB77_4:
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: uadd.sat.i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld iy, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 12)
; EZ80-NEXT:    ld l, (ix + 15)
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld a, (ix + 9)
; EZ80-NEXT:    adc a, l
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    scf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB77_3
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB77_4
; EZ80-NEXT:  BB77_2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB77_3:
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB77_2
; EZ80-NEXT:  BB77_4:
; EZ80-NEXT:    ld e, -1
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i32 @llvm.uadd.sat.i32(i32 %0, i32 %1)
  ret i32 %3
}
declare i64 @llvm.uadd.sat.i64(i64, i64)
define i64 @uadd.sat.i64(i64, i64) {
; Z80-LABEL: uadd.sat.i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -6
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 12)
; Z80-NEXT:    ld d, (ix + 13)
; Z80-NEXT:    ld c, (ix + 14)
; Z80-NEXT:    ld b, (ix + 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 16)
; Z80-NEXT:    ld h, (ix + 17)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    add hl, de
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld (ix - 6), l
; Z80-NEXT:    ld (ix - 5), h
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ld c, (ix + 18)
; Z80-NEXT:    ld b, (ix + 19)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld iy, -1
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    jr nz, BB78_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ex de, hl
; Z80-NEXT:  BB78_2:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    jr nz, BB78_4
; Z80-NEXT:  ; %bb.3:
; Z80-NEXT:    ld e, (ix - 6)
; Z80-NEXT:    ld d, (ix - 5)
; Z80-NEXT:  BB78_4:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    jr nz, BB78_6
; Z80-NEXT:  ; %bb.5:
; Z80-NEXT:    ld c, (ix - 4)
; Z80-NEXT:    ld b, (ix - 3)
; Z80-NEXT:  BB78_6:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB78_8
; Z80-NEXT:  ; %bb.7:
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:  BB78_8:
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: uadd.sat.i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 6
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 12)
; EZ80-CODE16-NEXT:    ld bc, (ix + 14)
; EZ80-CODE16-NEXT:    ld iy, (ix + 16)
; EZ80-CODE16-NEXT:    add hl, de
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 6), hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    ld bc, (ix + 18)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld iy, -1
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    jr nz, BB78_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:  BB78_2:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    jr nz, BB78_4
; EZ80-CODE16-NEXT:  ; %bb.3:
; EZ80-CODE16-NEXT:    ld de, (ix - 6)
; EZ80-CODE16-NEXT:  BB78_4:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    jr nz, BB78_6
; EZ80-CODE16-NEXT:  ; %bb.5:
; EZ80-CODE16-NEXT:    ld bc, (ix - 4)
; EZ80-CODE16-NEXT:  BB78_6:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB78_8
; EZ80-CODE16-NEXT:  ; %bb.7:
; EZ80-CODE16-NEXT:    ld iy, (ix - 2)
; EZ80-CODE16-NEXT:  BB78_8:
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: uadd.sat.i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld iy, (ix + 6)
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ld de, (ix + 15)
; EZ80-NEXT:    ld bc, (ix + 18)
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    adc hl, bc
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    ld hl, (ix + 12)
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    ld de, (ix + 21)
; EZ80-NEXT:    adc.sis hl, de
; EZ80-NEXT:    ld c, l
; EZ80-NEXT:    ld b, h
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ld de, -1
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    jp z, BB78_5
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB78_6
; EZ80-NEXT:  BB78_2:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr z, BB78_4
; EZ80-NEXT:  BB78_3:
; EZ80-NEXT:    ld.sis bc, -1
; EZ80-NEXT:  BB78_4:
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB78_5:
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB78_2
; EZ80-NEXT:  BB78_6:
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB78_3
; EZ80-NEXT:    jp BB78_4
  call i64 @llvm.uadd.sat.i64(i64 %0, i64 %1)
  ret i64 %3
}

declare i8 @llvm.ssub.sat.i8(i8, i8)
define i8 @ssub.sat.i8(i8, i8) {
; Z80-LABEL: ssub.sat.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 4)
; Z80-NEXT:    ld a, l
; Z80-NEXT:    sub a, h
; Z80-NEXT:    ld e, a
; Z80-NEXT:    rlc a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    add a, -128
; Z80-NEXT:    ld c, a
; Z80-NEXT:    ld a, l
; Z80-NEXT:    sub a, h
; Z80-NEXT:    jp pe, BB79_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld c, e
; Z80-NEXT:  BB79_2:
; Z80-NEXT:    ld a, c
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: ssub.sat.i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld l, (iy + 2)
; EZ80-CODE16-NEXT:    ld h, (iy + 4)
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    sub a, h
; EZ80-CODE16-NEXT:    ld e, a
; EZ80-CODE16-NEXT:    rlc a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    add a, -128
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    sub a, h
; EZ80-CODE16-NEXT:    jp pe, BB79_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld c, e
; EZ80-CODE16-NEXT:  BB79_2:
; EZ80-CODE16-NEXT:    ld a, c
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: ssub.sat.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld l, (iy + 3)
; EZ80-NEXT:    ld h, (iy + 6)
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    sub a, h
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    rlc a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    add a, -128
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    sub a, h
; EZ80-NEXT:    jp pe, BB79_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld c, e
; EZ80-NEXT:  BB79_2:
; EZ80-NEXT:    ld a, c
; EZ80-NEXT:    ret
  call i8 @llvm.ssub.sat.i8(i8 %0, i8 %1)
  ret i8 %3
}
declare i16 @llvm.ssub.sat.i16(i16, i16)
define i16 @ssub.sat.i16(i16, i16) {
; Z80-LABEL: ssub.sat.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    ld e, (ix + 4)
; Z80-NEXT:    ld d, (ix + 5)
; Z80-NEXT:    ld c, (ix + 6)
; Z80-NEXT:    ld b, (ix + 7)
; Z80-NEXT:    ld l, e
; Z80-NEXT:    ld h, d
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld bc, -32768
; Z80-NEXT:    add iy, bc
; Z80-NEXT:    or a, a
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:    jp pe, BB80_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:  BB80_2:
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: ssub.sat.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld de, (ix + 4)
; EZ80-CODE16-NEXT:    ld bc, (ix + 6)
; EZ80-CODE16-NEXT:    ld l, e
; EZ80-CODE16-NEXT:    ld h, d
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld (ix - 2), iy
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld bc, -32768
; EZ80-CODE16-NEXT:    add iy, bc
; EZ80-CODE16-NEXT:    or a, a
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    sbc hl, de
; EZ80-CODE16-NEXT:    jp pe, BB80_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld iy, (ix - 2)
; EZ80-CODE16-NEXT:  BB80_2:
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: ssub.sat.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld de, (ix + 6)
; EZ80-NEXT:    ld bc, (ix + 9)
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:    sbc.sis hl, bc
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld iyl, e
; EZ80-NEXT:    ld iyh, d
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld (ix - 3), iy
; EZ80-NEXT:    add.sis iy, iy
; EZ80-NEXT:    sbc.sis hl, hl
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld iyl, e
; EZ80-NEXT:    ld iyh, d
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld.sis bc, -32768
; EZ80-NEXT:    add.sis iy, bc
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:    jp pe, BB80_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld iy, (ix - 3)
; EZ80-NEXT:  BB80_2:
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld d, iyh
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i16 @llvm.ssub.sat.i16(i16 %0, i16 %1)
  ret i16 %3
}
declare i32 @llvm.ssub.sat.i32(i32, i32)
define i32 @ssub.sat.i32(i32, i32) {
; Z80-LABEL: ssub.sat.i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -5
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 8)
; Z80-NEXT:    ld d, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:    jp pe, BB81_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    jr BB81_3
; Z80-NEXT:  BB81_2:
; Z80-NEXT:    ld a, -1
; Z80-NEXT:  BB81_3:
; Z80-NEXT:    ld (ix - 1), a
; Z80-NEXT:    ld a, 31
; Z80-NEXT:    ld (ix - 3), l
; Z80-NEXT:    ld (ix - 2), h
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld (ix - 5), c
; Z80-NEXT:    ld (ix - 4), b
; Z80-NEXT:    call __lshrs
; Z80-NEXT:    ld iy, -32768
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld a, (ix - 1)
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB81_5
; Z80-NEXT:  ; %bb.4:
; Z80-NEXT:    ld l, (ix - 5)
; Z80-NEXT:    ld h, (ix - 4)
; Z80-NEXT:  BB81_5:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB81_7
; Z80-NEXT:  ; %bb.6:
; Z80-NEXT:    ld e, (ix - 3)
; Z80-NEXT:    ld d, (ix - 2)
; Z80-NEXT:  BB81_7:
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: ssub.sat.i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 5
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 8)
; EZ80-CODE16-NEXT:    ld iy, (ix + 10)
; EZ80-CODE16-NEXT:    sbc hl, de
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    sbc hl, de
; EZ80-CODE16-NEXT:    jp pe, BB81_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    jr BB81_3
; EZ80-CODE16-NEXT:  BB81_2:
; EZ80-CODE16-NEXT:    ld a, -1
; EZ80-CODE16-NEXT:  BB81_3:
; EZ80-CODE16-NEXT:    ld (ix - 1), a
; EZ80-CODE16-NEXT:    ld a, 31
; EZ80-CODE16-NEXT:    ld (ix - 3), hl
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld (ix - 5), bc
; EZ80-CODE16-NEXT:    call __lshrs
; EZ80-CODE16-NEXT:    ld iy, -32768
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld a, (ix - 1)
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB81_5
; EZ80-CODE16-NEXT:  ; %bb.4:
; EZ80-CODE16-NEXT:    ld hl, (ix - 5)
; EZ80-CODE16-NEXT:  BB81_5:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB81_7
; EZ80-CODE16-NEXT:  ; %bb.6:
; EZ80-CODE16-NEXT:    ld de, (ix - 3)
; EZ80-CODE16-NEXT:  BB81_7:
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: ssub.sat.i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    dec sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld a, (ix + 9)
; EZ80-NEXT:    ld de, (ix + 12)
; EZ80-NEXT:    ld c, (ix + 15)
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    sbc a, c
; EZ80-NEXT:    jp pe, BB81_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld d, 0
; EZ80-NEXT:    jr BB81_3
; EZ80-NEXT:  BB81_2:
; EZ80-NEXT:    ld d, -1
; EZ80-NEXT:  BB81_3:
; EZ80-NEXT:    ld l, 31
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    ld (ix - 1), a
; EZ80-NEXT:    call __lshrs
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld bc, 0
; EZ80-NEXT:    ld a, -128
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    bit 0, d
; EZ80-NEXT:    jr nz, BB81_5
; EZ80-NEXT:  ; %bb.4:
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:  BB81_5:
; EZ80-NEXT:    bit 0, d
; EZ80-NEXT:    jr nz, BB81_7
; EZ80-NEXT:  ; %bb.6:
; EZ80-NEXT:    ld e, (ix - 1)
; EZ80-NEXT:  BB81_7:
; EZ80-NEXT:    inc sp
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i32 @llvm.ssub.sat.i32(i32 %0, i32 %1)
  ret i32 %3
}
declare i64 @llvm.ssub.sat.i64(i64, i64)
define i64 @ssub.sat.i64(i64, i64) {
; Z80-LABEL: ssub.sat.i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 12)
; Z80-NEXT:    ld d, (ix + 13)
; Z80-NEXT:    ld c, (ix + 14)
; Z80-NEXT:    ld b, (ix + 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 16)
; Z80-NEXT:    ld h, (ix + 17)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ld c, (ix + 18)
; Z80-NEXT:    ld b, (ix + 19)
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    jp pe, BB82_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    jr BB82_3
; Z80-NEXT:  BB82_2:
; Z80-NEXT:    ld a, -1
; Z80-NEXT:  BB82_3:
; Z80-NEXT:    ld bc, 63
; Z80-NEXT:    push bc
; Z80-NEXT:    ld (ix - 6), l
; Z80-NEXT:    ld (ix - 5), h
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld (ix - 10), e
; Z80-NEXT:    ld (ix - 9), d
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    call __llshrs
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, -32768
; Z80-NEXT:    push hl
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    call __lladd
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB82_9
; Z80-NEXT:  ; %bb.4:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB82_10
; Z80-NEXT:  BB82_5:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB82_11
; Z80-NEXT:  BB82_6:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB82_8
; Z80-NEXT:  BB82_7:
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:  BB82_8:
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:  BB82_9:
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp nz, BB82_5
; Z80-NEXT:  BB82_10:
; Z80-NEXT:    ld e, (ix - 10)
; Z80-NEXT:    ld d, (ix - 9)
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp nz, BB82_6
; Z80-NEXT:  BB82_11:
; Z80-NEXT:    ld c, (ix - 8)
; Z80-NEXT:    ld b, (ix - 7)
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB82_7
; Z80-NEXT:    jp BB82_8
;
; EZ80-CODE16-LABEL: ssub.sat.i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 10
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 12)
; EZ80-CODE16-NEXT:    ld bc, (ix + 14)
; EZ80-CODE16-NEXT:    ld iy, (ix + 16)
; EZ80-CODE16-NEXT:    sbc hl, de
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    ld bc, (ix + 18)
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    jp pe, BB82_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    jr BB82_3
; EZ80-CODE16-NEXT:  BB82_2:
; EZ80-CODE16-NEXT:    ld a, -1
; EZ80-CODE16-NEXT:  BB82_3:
; EZ80-CODE16-NEXT:    ld bc, 63
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld (ix - 6), hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld (ix - 10), de
; EZ80-CODE16-NEXT:    ld (ix - 8), iy
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    call __llshrs
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, -32768
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    call __lladd
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB82_9
; EZ80-CODE16-NEXT:  ; %bb.4:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB82_10
; EZ80-CODE16-NEXT:  BB82_5:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB82_11
; EZ80-CODE16-NEXT:  BB82_6:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB82_8
; EZ80-CODE16-NEXT:  BB82_7:
; EZ80-CODE16-NEXT:    ld iy, (ix - 6)
; EZ80-CODE16-NEXT:  BB82_8:
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
; EZ80-CODE16-NEXT:  BB82_9:
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp nz, BB82_5
; EZ80-CODE16-NEXT:  BB82_10:
; EZ80-CODE16-NEXT:    ld de, (ix - 10)
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp nz, BB82_6
; EZ80-CODE16-NEXT:  BB82_11:
; EZ80-CODE16-NEXT:    ld bc, (ix - 8)
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB82_7
; EZ80-CODE16-NEXT:    jp BB82_8
;
; EZ80-LABEL: ssub.sat.i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 9
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 15)
; EZ80-NEXT:    ld bc, (ix + 18)
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    sbc hl, bc
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld hl, (ix + 12)
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    ld bc, (ix + 21)
; EZ80-NEXT:    sbc.sis hl, bc
; EZ80-NEXT:    ld c, l
; EZ80-NEXT:    ld b, h
; EZ80-NEXT:    jp pe, BB82_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    jr BB82_3
; EZ80-NEXT:  BB82_2:
; EZ80-NEXT:    ld a, -1
; EZ80-NEXT:  BB82_3:
; EZ80-NEXT:    ld hl, 63
; EZ80-NEXT:    push hl
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld (ix - 6), de
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    call __llshrs
; EZ80-NEXT:    ld (ix - 9), iy
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld iy, -32768
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    push iy
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __lladd
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB82_8
; EZ80-NEXT:  ; %bb.4:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB82_9
; EZ80-NEXT:  BB82_5:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB82_7
; EZ80-NEXT:  BB82_6:
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:  BB82_7:
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB82_8:
; EZ80-NEXT:    ld hl, (ix - 9)
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB82_5
; EZ80-NEXT:  BB82_9:
; EZ80-NEXT:    ld de, (ix - 6)
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB82_6
; EZ80-NEXT:    jp BB82_7
  call i64 @llvm.ssub.sat.i64(i64 %0, i64 %1)
  ret i64 %3
}

declare i8 @llvm.usub.sat.i8(i8, i8)
define i8 @usub.sat.i8(i8, i8) {
; Z80-LABEL: usub.sat.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld c, (iy + 2)
; Z80-NEXT:    ld h, (iy + 4)
; Z80-NEXT:    ld a, c
; Z80-NEXT:    sub a, h
; Z80-NEXT:    ld l, a
; Z80-NEXT:    ld e, 0
; Z80-NEXT:    ld a, c
; Z80-NEXT:    sub a, h
; Z80-NEXT:    jr c, BB83_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld e, l
; Z80-NEXT:  BB83_2:
; Z80-NEXT:    ld a, e
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: usub.sat.i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld c, (iy + 2)
; EZ80-CODE16-NEXT:    ld h, (iy + 4)
; EZ80-CODE16-NEXT:    ld a, c
; EZ80-CODE16-NEXT:    sub a, h
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    ld e, 0
; EZ80-CODE16-NEXT:    ld a, c
; EZ80-CODE16-NEXT:    sub a, h
; EZ80-CODE16-NEXT:    jr c, BB83_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:  BB83_2:
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: usub.sat.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld c, (iy + 3)
; EZ80-NEXT:    ld h, (iy + 6)
; EZ80-NEXT:    ld a, c
; EZ80-NEXT:    sub a, h
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    ld e, 0
; EZ80-NEXT:    ld a, c
; EZ80-NEXT:    sub a, h
; EZ80-NEXT:    jr c, BB83_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld e, l
; EZ80-NEXT:  BB83_2:
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ret
  call i8 @llvm.usub.sat.i8(i8 %0, i8 %1)
  ret i8 %3
}
declare i16 @llvm.usub.sat.i16(i16, i16)
define i16 @usub.sat.i16(i16, i16) {
; Z80-LABEL: usub.sat.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld c, (iy + 2)
; Z80-NEXT:    ld b, (iy + 3)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld d, (iy + 5)
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    or a, a
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    jr nc, BB84_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld de, 0
; Z80-NEXT:  BB84_2:
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: usub.sat.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld bc, (iy + 2)
; EZ80-CODE16-NEXT:    ld de, (iy + 4)
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    sbc hl, de
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    or a, a
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    jr nc, BB84_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:  BB84_2:
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: usub.sat.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld bc, (iy + 3)
; EZ80-NEXT:    ld de, (iy + 6)
; EZ80-NEXT:    ld l, c
; EZ80-NEXT:    ld h, b
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld e, l
; EZ80-NEXT:    ld d, h
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    ld l, c
; EZ80-NEXT:    ld h, b
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    sbc.sis hl, bc
; EZ80-NEXT:    jr nc, BB84_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld.sis de, 0
; EZ80-NEXT:  BB84_2:
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:    ret
  call i16 @llvm.usub.sat.i16(i16 %0, i16 %1)
  ret i16 %3
}
declare i32 @llvm.usub.sat.i32(i32, i32)
define i32 @usub.sat.i32(i32, i32) {
; Z80-LABEL: usub.sat.i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 8)
; Z80-NEXT:    ld d, (ix + 9)
; Z80-NEXT:    ld c, (ix + 10)
; Z80-NEXT:    ld b, (ix + 11)
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld c, e
; Z80-NEXT:    ld b, d
; Z80-NEXT:    jr nz, BB85_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:  BB85_2:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB85_4
; Z80-NEXT:  ; %bb.3:
; Z80-NEXT:    ex de, hl
; Z80-NEXT:  BB85_4:
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: usub.sat.i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 8)
; EZ80-CODE16-NEXT:    ld bc, (ix + 10)
; EZ80-CODE16-NEXT:    sbc hl, de
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld c, e
; EZ80-CODE16-NEXT:    ld b, d
; EZ80-CODE16-NEXT:    jr nz, BB85_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:  BB85_2:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB85_4
; EZ80-CODE16-NEXT:  ; %bb.3:
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:  BB85_4:
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: usub.sat.i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld a, (iy + 6)
; EZ80-NEXT:    ld de, (iy + 9)
; EZ80-NEXT:    ld c, (iy + 12)
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:    sbc a, c
; EZ80-NEXT:    ld d, a
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ld bc, 0
; EZ80-NEXT:    ld e, 0
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB85_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:  BB85_2:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB85_4
; EZ80-NEXT:  ; %bb.3:
; EZ80-NEXT:    ld e, d
; EZ80-NEXT:  BB85_4:
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ret
  call i32 @llvm.usub.sat.i32(i32 %0, i32 %1)
  ret i32 %3
}
declare i64 @llvm.usub.sat.i64(i64, i64)
define i64 @usub.sat.i64(i64, i64) {
; Z80-LABEL: usub.sat.i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -6
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 12)
; Z80-NEXT:    ld d, (ix + 13)
; Z80-NEXT:    ld c, (ix + 14)
; Z80-NEXT:    ld b, (ix + 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 16)
; Z80-NEXT:    ld h, (ix + 17)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    ld (ix - 6), l
; Z80-NEXT:    ld (ix - 5), h
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ld c, (ix + 18)
; Z80-NEXT:    ld b, (ix + 19)
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    jr nz, BB86_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ex de, hl
; Z80-NEXT:  BB86_2:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    jr nz, BB86_4
; Z80-NEXT:  ; %bb.3:
; Z80-NEXT:    ld e, (ix - 6)
; Z80-NEXT:    ld d, (ix - 5)
; Z80-NEXT:  BB86_4:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    jr nz, BB86_6
; Z80-NEXT:  ; %bb.5:
; Z80-NEXT:    ld c, (ix - 4)
; Z80-NEXT:    ld b, (ix - 3)
; Z80-NEXT:  BB86_6:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB86_8
; Z80-NEXT:  ; %bb.7:
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:  BB86_8:
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: usub.sat.i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 6
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 12)
; EZ80-CODE16-NEXT:    ld bc, (ix + 14)
; EZ80-CODE16-NEXT:    ld iy, (ix + 16)
; EZ80-CODE16-NEXT:    sbc hl, de
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 6), hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    ld bc, (ix + 18)
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    jr nz, BB86_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:  BB86_2:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    jr nz, BB86_4
; EZ80-CODE16-NEXT:  ; %bb.3:
; EZ80-CODE16-NEXT:    ld de, (ix - 6)
; EZ80-CODE16-NEXT:  BB86_4:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    jr nz, BB86_6
; EZ80-CODE16-NEXT:  ; %bb.5:
; EZ80-CODE16-NEXT:    ld bc, (ix - 4)
; EZ80-CODE16-NEXT:  BB86_6:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB86_8
; EZ80-CODE16-NEXT:  ; %bb.7:
; EZ80-CODE16-NEXT:    ld iy, (ix - 2)
; EZ80-CODE16-NEXT:  BB86_8:
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: usub.sat.i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 15)
; EZ80-NEXT:    ld bc, (ix + 18)
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    sbc hl, bc
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    ld hl, (ix + 12)
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    ld de, (ix + 21)
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:    ld c, l
; EZ80-NEXT:    ld b, h
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    jp z, BB86_5
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB86_6
; EZ80-NEXT:  BB86_2:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr z, BB86_4
; EZ80-NEXT:  BB86_3:
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:  BB86_4:
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB86_5:
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB86_2
; EZ80-NEXT:  BB86_6:
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB86_3
; EZ80-NEXT:    jp BB86_4
  call i64 @llvm.usub.sat.i64(i64 %0, i64 %1)
  ret i64 %3
}

declare i8 @llvm.sshl.sat.i8(i8, i8)
define i8 @sshl.sat.i8(i8, i8) {
; Z80-LABEL: sshl.sat.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld b, (iy + 4)
; Z80-NEXT:    ld a, l
; Z80-NEXT:    call __bshl
; Z80-NEXT:    ld e, a
; Z80-NEXT:    call __bshrs
; Z80-NEXT:    ld c, a
; Z80-NEXT:    ld a, l
; Z80-NEXT:    add a, -128
; Z80-NEXT:    cp a, -128
; Z80-NEXT:    jr c, BB87_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld h, 127
; Z80-NEXT:    jr BB87_3
; Z80-NEXT:  BB87_2:
; Z80-NEXT:    ld h, -128
; Z80-NEXT:  BB87_3:
; Z80-NEXT:    ld a, l
; Z80-NEXT:    cp a, c
; Z80-NEXT:    jr nz, BB87_5
; Z80-NEXT:  ; %bb.4:
; Z80-NEXT:    ld h, e
; Z80-NEXT:  BB87_5:
; Z80-NEXT:    ld a, h
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: sshl.sat.i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld l, (iy + 2)
; EZ80-CODE16-NEXT:    ld b, (iy + 4)
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    call __bshl
; EZ80-CODE16-NEXT:    ld e, a
; EZ80-CODE16-NEXT:    call __bshrs
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    add a, -128
; EZ80-CODE16-NEXT:    cp a, -128
; EZ80-CODE16-NEXT:    jr c, BB87_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld h, 127
; EZ80-CODE16-NEXT:    jr BB87_3
; EZ80-CODE16-NEXT:  BB87_2:
; EZ80-CODE16-NEXT:    ld h, -128
; EZ80-CODE16-NEXT:  BB87_3:
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    cp a, c
; EZ80-CODE16-NEXT:    jr nz, BB87_5
; EZ80-CODE16-NEXT:  ; %bb.4:
; EZ80-CODE16-NEXT:    ld h, e
; EZ80-CODE16-NEXT:  BB87_5:
; EZ80-CODE16-NEXT:    ld a, h
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: sshl.sat.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld l, (iy + 3)
; EZ80-NEXT:    ld b, (iy + 6)
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    call __bshl
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    call __bshrs
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    add a, -128
; EZ80-NEXT:    cp a, -128
; EZ80-NEXT:    jr c, BB87_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld h, 127
; EZ80-NEXT:    jr BB87_3
; EZ80-NEXT:  BB87_2:
; EZ80-NEXT:    ld h, -128
; EZ80-NEXT:  BB87_3:
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    cp a, c
; EZ80-NEXT:    jr nz, BB87_5
; EZ80-NEXT:  ; %bb.4:
; EZ80-NEXT:    ld h, e
; EZ80-NEXT:  BB87_5:
; EZ80-NEXT:    ld a, h
; EZ80-NEXT:    ret
  call i8 @llvm.sshl.sat.i8(i8 %0, i8 %1)
  ret i8 %3
}
declare i16 @llvm.sshl.sat.i16(i16, i16)
define i16 @sshl.sat.i16(i16, i16) {
; Z80-LABEL: sshl.sat.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld c, (ix + 6)
; Z80-NEXT:    ld b, (ix + 7)
; Z80-NEXT:    call __sshl
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ; kill: def $c killed $c killed $bc
; Z80-NEXT:    call __sshrs
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    ld bc, -32768
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    jr c, BB88_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld bc, 32767
; Z80-NEXT:    jr BB88_3
; Z80-NEXT:  BB88_2:
; Z80-NEXT:    ld bc, -32768
; Z80-NEXT:  BB88_3:
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:    jr nz, BB88_5
; Z80-NEXT:  ; %bb.4:
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:  BB88_5:
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: sshl.sat.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld bc, (ix + 6)
; EZ80-CODE16-NEXT:    call __sshl
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ; kill: def $c killed $c killed $bc
; EZ80-CODE16-NEXT:    call __sshrs
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    ld bc, -32768
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    add hl, bc
; EZ80-CODE16-NEXT:    or a, a
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    jr c, BB88_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld bc, 32767
; EZ80-CODE16-NEXT:    jr BB88_3
; EZ80-CODE16-NEXT:  BB88_2:
; EZ80-CODE16-NEXT:    ld bc, -32768
; EZ80-CODE16-NEXT:  BB88_3:
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    or a, a
; EZ80-CODE16-NEXT:    sbc hl, de
; EZ80-CODE16-NEXT:    jr nz, BB88_5
; EZ80-CODE16-NEXT:  ; %bb.4:
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:  BB88_5:
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: sshl.sat.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld bc, (ix + 9)
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    call __sshl
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld iyl, e
; EZ80-NEXT:    ld iyh, d
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ; kill: def $c killed $c killed $ubc
; EZ80-NEXT:    call __sshrs
; EZ80-NEXT:    ld e, l
; EZ80-NEXT:    ld d, h
; EZ80-NEXT:    ld.sis bc, -32768
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    add.sis hl, bc
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, bc
; EZ80-NEXT:    jr c, BB88_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld.sis bc, 32767
; EZ80-NEXT:    jr BB88_3
; EZ80-NEXT:  BB88_2:
; EZ80-NEXT:    ld.sis bc, -32768
; EZ80-NEXT:  BB88_3:
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:    jr nz, BB88_5
; EZ80-NEXT:  ; %bb.4:
; EZ80-NEXT:    ld c, iyl
; EZ80-NEXT:    ld b, iyh
; EZ80-NEXT:  BB88_5:
; EZ80-NEXT:    ld l, c
; EZ80-NEXT:    ld h, b
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i16 @llvm.sshl.sat.i16(i16 %0, i16 %1)
  ret i16 %3
}
declare i32 @llvm.sshl.sat.i32(i32, i32)
define i32 @sshl.sat.i32(i32, i32) {
; Z80-LABEL: sshl.sat.i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -8
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld c, (ix + 4)
; Z80-NEXT:    ld b, (ix + 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld a, l
; Z80-NEXT:    call __lshl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld (ix - 8), c
; Z80-NEXT:    ld (ix - 7), b
; Z80-NEXT:    ld (ix - 6), e
; Z80-NEXT:    ld (ix - 5), d
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld a, l
; Z80-NEXT:    call __lshrs
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    call __lcmpzero
; Z80-NEXT:    jp m, BB89_3
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr z, BB89_4
; Z80-NEXT:  BB89_2:
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    jr BB89_5
; Z80-NEXT:  BB89_3:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB89_2
; Z80-NEXT:  BB89_4:
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:  BB89_5:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    jr nz, BB89_7
; Z80-NEXT:  ; %bb.6:
; Z80-NEXT:    ld hl, 32767
; Z80-NEXT:    jr BB89_8
; Z80-NEXT:  BB89_7:
; Z80-NEXT:    ld hl, -32768
; Z80-NEXT:  BB89_8:
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    call __lcmpu
; Z80-NEXT:    jr nz, BB89_10
; Z80-NEXT:  ; %bb.9:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    jr BB89_11
; Z80-NEXT:  BB89_10:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:  BB89_11:
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    jr nz, BB89_13
; Z80-NEXT:  ; %bb.12:
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:  BB89_13:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB89_15
; Z80-NEXT:  ; %bb.14:
; Z80-NEXT:    ld e, (ix - 6)
; Z80-NEXT:    ld d, (ix - 5)
; Z80-NEXT:  BB89_15:
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: sshl.sat.i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 8
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld bc, (ix + 4)
; EZ80-CODE16-NEXT:    ld iy, (ix + 6)
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    call __lshl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld (ix - 8), bc
; EZ80-CODE16-NEXT:    ld (ix - 6), de
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    call __lshrs
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    call __lcmpzero
; EZ80-CODE16-NEXT:    jp m, BB89_3
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr z, BB89_4
; EZ80-CODE16-NEXT:  BB89_2:
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    jr BB89_5
; EZ80-CODE16-NEXT:  BB89_3:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB89_2
; EZ80-CODE16-NEXT:  BB89_4:
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:  BB89_5:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    jr nz, BB89_7
; EZ80-CODE16-NEXT:  ; %bb.6:
; EZ80-CODE16-NEXT:    ld hl, 32767
; EZ80-CODE16-NEXT:    jr BB89_8
; EZ80-CODE16-NEXT:  BB89_7:
; EZ80-CODE16-NEXT:    ld hl, -32768
; EZ80-CODE16-NEXT:  BB89_8:
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    call __lcmpu
; EZ80-CODE16-NEXT:    jr nz, BB89_10
; EZ80-CODE16-NEXT:  ; %bb.9:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    jr BB89_11
; EZ80-CODE16-NEXT:  BB89_10:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:  BB89_11:
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    jr nz, BB89_13
; EZ80-CODE16-NEXT:  ; %bb.12:
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:  BB89_13:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB89_15
; EZ80-CODE16-NEXT:  ; %bb.14:
; EZ80-CODE16-NEXT:    ld de, (ix - 6)
; EZ80-CODE16-NEXT:  BB89_15:
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: sshl.sat.i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 4
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld iy, (ix + 6)
; EZ80-NEXT:    ld e, (ix + 9)
; EZ80-NEXT:    ld hl, (ix + 12)
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    call __lshl
; EZ80-NEXT:    ld (ix - 4), bc
; EZ80-NEXT:    ld (ix - 1), a
; EZ80-NEXT:    ; kill: def $l killed $l killed $uhl
; EZ80-NEXT:    call __lshrs
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    call __lcmpzero
; EZ80-NEXT:    jp m, BB89_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld l, 0
; EZ80-NEXT:    jr BB89_3
; EZ80-NEXT:  BB89_2:
; EZ80-NEXT:    ld l, 1
; EZ80-NEXT:  BB89_3:
; EZ80-NEXT:    bit 0, l
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    jr nz, BB89_5
; EZ80-NEXT:  ; %bb.4:
; EZ80-NEXT:    ld iy, -1
; EZ80-NEXT:  BB89_5:
; EZ80-NEXT:    bit 0, l
; EZ80-NEXT:    jr nz, BB89_7
; EZ80-NEXT:  ; %bb.6:
; EZ80-NEXT:    ld d, 127
; EZ80-NEXT:    jr BB89_8
; EZ80-NEXT:  BB89_7:
; EZ80-NEXT:    ld d, -128
; EZ80-NEXT:  BB89_8:
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    call __lcmpu
; EZ80-NEXT:    jr nz, BB89_10
; EZ80-NEXT:  ; %bb.9:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr z, BB89_11
; EZ80-NEXT:    jr BB89_12
; EZ80-NEXT:  BB89_10:
; EZ80-NEXT:    ld a, 1
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB89_12
; EZ80-NEXT:  BB89_11:
; EZ80-NEXT:    ld iy, (ix - 4)
; EZ80-NEXT:  BB89_12:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB89_14
; EZ80-NEXT:  ; %bb.13:
; EZ80-NEXT:    ld d, (ix - 1)
; EZ80-NEXT:  BB89_14:
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld e, d
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i32 @llvm.sshl.sat.i32(i32 %0, i32 %1)
  ret i32 %3
}
declare i64 @llvm.sshl.sat.i64(i64, i64)
define i64 @sshl.sat.i64(i64, i64) {
; Z80-LABEL: sshl.sat.i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -22
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 18), l
; Z80-NEXT:    ld (ix - 17), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld (ix - 22), e
; Z80-NEXT:    ld (ix - 21), d
; Z80-NEXT:    ld (ix - 20), c
; Z80-NEXT:    ld (ix - 19), b
; Z80-NEXT:    call __llshrs
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:    ld (ix - 12), e
; Z80-NEXT:    ld (ix - 11), d
; Z80-NEXT:    ld (ix - 14), c
; Z80-NEXT:    ld (ix - 13), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 16), l
; Z80-NEXT:    ld (ix - 15), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    call __llcmpzero
; Z80-NEXT:    pop hl
; Z80-NEXT:    jp m, BB90_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    jr BB90_3
; Z80-NEXT:  BB90_2:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:  BB90_3:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    jr nz, BB90_5
; Z80-NEXT:  ; %bb.4:
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:  BB90_5:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    jr nz, BB90_7
; Z80-NEXT:  ; %bb.6:
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:  BB90_7:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB90_9
; Z80-NEXT:  ; %bb.8:
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:  BB90_9:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld (ix - 6), e
; Z80-NEXT:    ld (ix - 5), d
; Z80-NEXT:    ld (ix - 8), c
; Z80-NEXT:    ld (ix - 7), b
; Z80-NEXT:    jr nz, BB90_11
; Z80-NEXT:  ; %bb.10:
; Z80-NEXT:    ld hl, 32767
; Z80-NEXT:    jr BB90_12
; Z80-NEXT:  BB90_11:
; Z80-NEXT:    ld hl, -32768
; Z80-NEXT:  BB90_12:
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld l, (ix - 16)
; Z80-NEXT:    ld h, (ix - 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 14)
; Z80-NEXT:    ld h, (ix - 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 12)
; Z80-NEXT:    ld h, (ix - 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    call __llcmpu
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    jr nz, BB90_14
; Z80-NEXT:  ; %bb.13:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    jr BB90_15
; Z80-NEXT:  BB90_14:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:  BB90_15:
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    ld e, (ix - 8)
; Z80-NEXT:    ld d, (ix - 7)
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB90_21
; Z80-NEXT:  ; %bb.16:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB90_22
; Z80-NEXT:  BB90_17:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB90_23
; Z80-NEXT:  BB90_18:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB90_20
; Z80-NEXT:  BB90_19:
; Z80-NEXT:    ld c, (ix - 18)
; Z80-NEXT:    ld b, (ix - 17)
; Z80-NEXT:    ld (ix - 4), c
; Z80-NEXT:    ld (ix - 3), b
; Z80-NEXT:  BB90_20:
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:  BB90_21:
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp nz, BB90_17
; Z80-NEXT:  BB90_22:
; Z80-NEXT:    ld e, (ix - 22)
; Z80-NEXT:    ld d, (ix - 21)
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp nz, BB90_18
; Z80-NEXT:  BB90_23:
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 20)
; Z80-NEXT:    ld h, (ix - 19)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB90_19
; Z80-NEXT:    jp BB90_20
;
; EZ80-CODE16-LABEL: sshl.sat.i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 22
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    ld iy, (ix + 10)
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld (ix - 18), iy
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld (ix - 22), de
; EZ80-CODE16-NEXT:    ld (ix - 20), bc
; EZ80-CODE16-NEXT:    call __llshrs
; EZ80-CODE16-NEXT:    ld (ix - 10), hl
; EZ80-CODE16-NEXT:    ld (ix - 12), de
; EZ80-CODE16-NEXT:    ld (ix - 14), bc
; EZ80-CODE16-NEXT:    ld (ix - 16), iy
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    call __llcmpzero
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    jp m, BB90_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    jr BB90_3
; EZ80-CODE16-NEXT:  BB90_2:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:  BB90_3:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    jr nz, BB90_5
; EZ80-CODE16-NEXT:  ; %bb.4:
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:  BB90_5:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    jr nz, BB90_7
; EZ80-CODE16-NEXT:  ; %bb.6:
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:  BB90_7:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB90_9
; EZ80-CODE16-NEXT:  ; %bb.8:
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:  BB90_9:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld (ix - 6), de
; EZ80-CODE16-NEXT:    ld (ix - 8), bc
; EZ80-CODE16-NEXT:    jr nz, BB90_11
; EZ80-CODE16-NEXT:  ; %bb.10:
; EZ80-CODE16-NEXT:    ld hl, 32767
; EZ80-CODE16-NEXT:    jr BB90_12
; EZ80-CODE16-NEXT:  BB90_11:
; EZ80-CODE16-NEXT:    ld hl, -32768
; EZ80-CODE16-NEXT:  BB90_12:
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 16)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 14)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    call __llcmpu
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 10), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 10)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    jr nz, BB90_14
; EZ80-CODE16-NEXT:  ; %bb.13:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    jr BB90_15
; EZ80-CODE16-NEXT:  BB90_14:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:  BB90_15:
; EZ80-CODE16-NEXT:    ld hl, (ix - 6)
; EZ80-CODE16-NEXT:    ld de, (ix - 8)
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB90_21
; EZ80-CODE16-NEXT:  ; %bb.16:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB90_22
; EZ80-CODE16-NEXT:  BB90_17:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB90_23
; EZ80-CODE16-NEXT:  BB90_18:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB90_20
; EZ80-CODE16-NEXT:  BB90_19:
; EZ80-CODE16-NEXT:    ld bc, (ix - 18)
; EZ80-CODE16-NEXT:    ld (ix - 4), bc
; EZ80-CODE16-NEXT:  BB90_20:
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    ld iy, (ix - 4)
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
; EZ80-CODE16-NEXT:  BB90_21:
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp nz, BB90_17
; EZ80-CODE16-NEXT:  BB90_22:
; EZ80-CODE16-NEXT:    ld de, (ix - 22)
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp nz, BB90_18
; EZ80-CODE16-NEXT:  BB90_23:
; EZ80-CODE16-NEXT:    ld iy, (ix - 20)
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB90_19
; EZ80-CODE16-NEXT:    jp BB90_20
;
; EZ80-LABEL: sshl.sat.i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 24
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld iy, (ix + 6)
; EZ80-NEXT:    ld bc, (ix + 12)
; EZ80-NEXT:    ld de, (ix + 15)
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld (ix - 24), iy
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld (ix - 21), de
; EZ80-NEXT:    ld (ix - 18), bc
; EZ80-NEXT:    call __llshrs
; EZ80-NEXT:    ld (ix - 6), hl
; EZ80-NEXT:    ld (ix - 9), de
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    ld (ix - 12), bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ld bc, (ix + 12)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llcmpzero
; EZ80-NEXT:    jp m, BB90_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    jr BB90_3
; EZ80-NEXT:  BB90_2:
; EZ80-NEXT:    ld a, 1
; EZ80-NEXT:  BB90_3:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    jr z, BB90_7
; EZ80-NEXT:  ; %bb.4:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr z, BB90_8
; EZ80-NEXT:  BB90_5:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB90_9
; EZ80-NEXT:  BB90_6:
; EZ80-NEXT:    ld.sis hl, 32767
; EZ80-NEXT:    jr BB90_10
; EZ80-NEXT:  BB90_7:
; EZ80-NEXT:    ld iy, -1
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB90_5
; EZ80-NEXT:  BB90_8:
; EZ80-NEXT:    scf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr z, BB90_6
; EZ80-NEXT:  BB90_9:
; EZ80-NEXT:    ld.sis hl, -32768
; EZ80-NEXT:  BB90_10:
; EZ80-NEXT:    ld (ix - 15), hl
; EZ80-NEXT:    ld hl, (ix - 12)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 9)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 6)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ld bc, (ix + 12)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llcmpu
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 6), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 6)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    jr nz, BB90_12
; EZ80-NEXT:  ; %bb.11:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    jr BB90_13
; EZ80-NEXT:  BB90_12:
; EZ80-NEXT:    ld a, 1
; EZ80-NEXT:  BB90_13:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    ld bc, (ix - 15)
; EZ80-NEXT:    jp z, BB90_18
; EZ80-NEXT:  ; %bb.14:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB90_19
; EZ80-NEXT:  BB90_15:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB90_17
; EZ80-NEXT:  BB90_16:
; EZ80-NEXT:    ld bc, (ix - 18)
; EZ80-NEXT:  BB90_17:
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB90_18:
; EZ80-NEXT:    ld iy, (ix - 24)
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB90_15
; EZ80-NEXT:  BB90_19:
; EZ80-NEXT:    ld hl, (ix - 21)
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB90_16
; EZ80-NEXT:    jp BB90_17
  call i64 @llvm.sshl.sat.i64(i64 %0, i64 %1)
  ret i64 %3
}

declare i8 @llvm.ushl.sat.i8(i8, i8)
define i8 @ushl.sat.i8(i8, i8) {
; Z80-LABEL: ushl.sat.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld e, (iy + 2)
; Z80-NEXT:    ld b, (iy + 4)
; Z80-NEXT:    ld a, e
; Z80-NEXT:    call __bshl
; Z80-NEXT:    ld l, a
; Z80-NEXT:    call __bshru
; Z80-NEXT:    ld c, a
; Z80-NEXT:    ld a, e
; Z80-NEXT:    cp a, c
; Z80-NEXT:    jr z, BB91_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld l, -1
; Z80-NEXT:  BB91_2:
; Z80-NEXT:    ld a, l
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: ushl.sat.i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld e, (iy + 2)
; EZ80-CODE16-NEXT:    ld b, (iy + 4)
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    call __bshl
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    call __bshru
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    cp a, c
; EZ80-CODE16-NEXT:    jr z, BB91_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld l, -1
; EZ80-CODE16-NEXT:  BB91_2:
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: ushl.sat.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld e, (iy + 3)
; EZ80-NEXT:    ld b, (iy + 6)
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    call __bshl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    call __bshru
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    cp a, c
; EZ80-NEXT:    jr z, BB91_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld l, -1
; EZ80-NEXT:  BB91_2:
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    ret
  call i8 @llvm.ushl.sat.i8(i8 %0, i8 %1)
  ret i8 %3
}
declare i16 @llvm.ushl.sat.i16(i16, i16)
define i16 @ushl.sat.i16(i16, i16) {
; Z80-LABEL: ushl.sat.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld c, (ix + 6)
; Z80-NEXT:    ld b, (ix + 7)
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    call __sshl
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    ; kill: def $c killed $c killed $bc
; Z80-NEXT:    call __sshru
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    jr z, BB92_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld de, -1
; Z80-NEXT:  BB92_2:
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: ushl.sat.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld iy, (ix + 4)
; EZ80-CODE16-NEXT:    ld bc, (ix + 6)
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    call __sshl
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    ; kill: def $c killed $c killed $bc
; EZ80-CODE16-NEXT:    call __sshru
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    or a, a
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    jr z, BB92_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld de, -1
; EZ80-CODE16-NEXT:  BB92_2:
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: ushl.sat.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld iy, (ix + 6)
; EZ80-NEXT:    ld bc, (ix + 9)
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld d, iyh
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    call __sshl
; EZ80-NEXT:    ld e, l
; EZ80-NEXT:    ld d, h
; EZ80-NEXT:    ; kill: def $c killed $c killed $ubc
; EZ80-NEXT:    call __sshru
; EZ80-NEXT:    ld c, l
; EZ80-NEXT:    ld b, h
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld d, iyh
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, bc
; EZ80-NEXT:    jr z, BB92_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld.sis de, -1
; EZ80-NEXT:  BB92_2:
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i16 @llvm.ushl.sat.i16(i16 %0, i16 %1)
  ret i16 %3
}
declare i32 @llvm.ushl.sat.i32(i32, i32)
define i32 @ushl.sat.i32(i32, i32) {
; Z80-LABEL: ushl.sat.i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld c, (ix + 4)
; Z80-NEXT:    ld b, (ix + 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld a, l
; Z80-NEXT:    call __lshl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld (ix - 4), c
; Z80-NEXT:    ld (ix - 3), b
; Z80-NEXT:    ld (ix - 2), e
; Z80-NEXT:    ld (ix - 1), d
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld a, l
; Z80-NEXT:    call __lshru
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    call __lcmpu
; Z80-NEXT:    jr nz, BB93_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    jr BB93_3
; Z80-NEXT:  BB93_2:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:  BB93_3:
; Z80-NEXT:    ld de, -1
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld l, e
; Z80-NEXT:    ld h, d
; Z80-NEXT:    jr nz, BB93_5
; Z80-NEXT:  ; %bb.4:
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:  BB93_5:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB93_7
; Z80-NEXT:  ; %bb.6:
; Z80-NEXT:    ld e, (ix - 2)
; Z80-NEXT:    ld d, (ix - 1)
; Z80-NEXT:  BB93_7:
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: ushl.sat.i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 4
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld bc, (ix + 4)
; EZ80-CODE16-NEXT:    ld iy, (ix + 6)
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    call __lshl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld (ix - 4), bc
; EZ80-CODE16-NEXT:    ld (ix - 2), de
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    call __lshru
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    call __lcmpu
; EZ80-CODE16-NEXT:    jr nz, BB93_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    jr BB93_3
; EZ80-CODE16-NEXT:  BB93_2:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:  BB93_3:
; EZ80-CODE16-NEXT:    ld de, -1
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld l, e
; EZ80-CODE16-NEXT:    ld h, d
; EZ80-CODE16-NEXT:    jr nz, BB93_5
; EZ80-CODE16-NEXT:  ; %bb.4:
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:  BB93_5:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB93_7
; EZ80-CODE16-NEXT:  ; %bb.6:
; EZ80-CODE16-NEXT:    ld de, (ix - 2)
; EZ80-CODE16-NEXT:  BB93_7:
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: ushl.sat.i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, (ix + 6)
; EZ80-NEXT:    ld e, (ix + 9)
; EZ80-NEXT:    ld hl, (ix + 12)
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    call __lshl
; EZ80-NEXT:    ld d, a
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ; kill: def $l killed $l killed $uhl
; EZ80-NEXT:    call __lshru
; EZ80-NEXT:    ld iy, -1
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    call __lcmpu
; EZ80-NEXT:    jr nz, BB93_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr z, BB93_3
; EZ80-NEXT:    jr BB93_4
; EZ80-NEXT:  BB93_2:
; EZ80-NEXT:    ld a, 1
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB93_4
; EZ80-NEXT:  BB93_3:
; EZ80-NEXT:    ld iy, (ix - 3)
; EZ80-NEXT:  BB93_4:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr z, BB93_6
; EZ80-NEXT:  ; %bb.5:
; EZ80-NEXT:    ld d, -1
; EZ80-NEXT:  BB93_6:
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld e, d
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i32 @llvm.ushl.sat.i32(i32 %0, i32 %1)
  ret i32 %3
}
declare i64 @llvm.ushl.sat.i64(i64, i64)
define i64 @ushl.sat.i64(i64, i64) {
; Z80-LABEL: ushl.sat.i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 6), l
; Z80-NEXT:    ld (ix - 5), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld (ix - 10), e
; Z80-NEXT:    ld (ix - 9), d
; Z80-NEXT:    ld (ix - 8), c
; Z80-NEXT:    ld (ix - 7), b
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    call __llcmpu
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    jr nz, BB94_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    jr BB94_3
; Z80-NEXT:  BB94_2:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:  BB94_3:
; Z80-NEXT:    ld iy, -1
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    jr nz, BB94_5
; Z80-NEXT:  ; %bb.4:
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:  BB94_5:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    jr nz, BB94_7
; Z80-NEXT:  ; %bb.6:
; Z80-NEXT:    ld e, (ix - 10)
; Z80-NEXT:    ld d, (ix - 9)
; Z80-NEXT:  BB94_7:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    jr nz, BB94_9
; Z80-NEXT:  ; %bb.8:
; Z80-NEXT:    ld c, (ix - 8)
; Z80-NEXT:    ld b, (ix - 7)
; Z80-NEXT:  BB94_9:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB94_11
; Z80-NEXT:  ; %bb.10:
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:  BB94_11:
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: ushl.sat.i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 10
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    ld iy, (ix + 10)
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld (ix - 6), iy
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld (ix - 10), de
; EZ80-CODE16-NEXT:    ld (ix - 8), bc
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    call __llcmpu
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 4), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 4)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    jr nz, BB94_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    jr BB94_3
; EZ80-CODE16-NEXT:  BB94_2:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:  BB94_3:
; EZ80-CODE16-NEXT:    ld iy, -1
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    jr nz, BB94_5
; EZ80-CODE16-NEXT:  ; %bb.4:
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:  BB94_5:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    jr nz, BB94_7
; EZ80-CODE16-NEXT:  ; %bb.6:
; EZ80-CODE16-NEXT:    ld de, (ix - 10)
; EZ80-CODE16-NEXT:  BB94_7:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    jr nz, BB94_9
; EZ80-CODE16-NEXT:  ; %bb.8:
; EZ80-CODE16-NEXT:    ld bc, (ix - 8)
; EZ80-CODE16-NEXT:  BB94_9:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB94_11
; EZ80-CODE16-NEXT:  ; %bb.10:
; EZ80-CODE16-NEXT:    ld iy, (ix - 6)
; EZ80-CODE16-NEXT:  BB94_11:
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: ushl.sat.i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 10
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ld bc, (ix + 12)
; EZ80-NEXT:    ld iy, (ix + 15)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld (ix - 10), iy
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld (ix - 7), de
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld iy, -1
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ld bc, (ix + 12)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llcmpu
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 4), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 4)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    jr nz, BB94_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    jr BB94_3
; EZ80-NEXT:  BB94_2:
; EZ80-NEXT:    ld a, 1
; EZ80-NEXT:  BB94_3:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    jp z, BB94_8
; EZ80-NEXT:  ; %bb.4:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB94_9
; EZ80-NEXT:  BB94_5:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr z, BB94_7
; EZ80-NEXT:  BB94_6:
; EZ80-NEXT:    ld.sis bc, -1
; EZ80-NEXT:  BB94_7:
; EZ80-NEXT:    lea de, iy
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB94_8:
; EZ80-NEXT:    ld hl, (ix - 10)
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB94_5
; EZ80-NEXT:  BB94_9:
; EZ80-NEXT:    ld iy, (ix - 7)
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB94_6
; EZ80-NEXT:    jp BB94_7
  call i64 @llvm.ushl.sat.i64(i64 %0, i64 %1)
  ret i64 %3
}

declare i8 @llvm.smul.sat.i8(i8, i8)
define i8 @smul.sat.i8(i8, i8) {
; Z80-LABEL: smul.sat.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld a, (iy + 2)
; Z80-NEXT:    ld l, (iy + 4)
; Z80-NEXT:    ; kill: def $l killed $l def $hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, a
; Z80-NEXT:    push hl
; Z80-NEXT:    call _llvm.smul.sat.i8
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: smul.sat.i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld a, (iy + 2)
; EZ80-CODE16-NEXT:    ld l, (iy + 4)
; EZ80-CODE16-NEXT:    ; kill: def $l killed $l def $hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    call _llvm.smul.sat.i8
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: smul.sat.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld a, (iy + 3)
; EZ80-NEXT:    ld l, (iy + 6)
; EZ80-NEXT:    ; kill: def $l killed $l def $uhl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    push hl
; EZ80-NEXT:    call _llvm.smul.sat.i8
; EZ80-NEXT:    ld hl, 6
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ret
  call i8 @llvm.smul.sat.i8(i8 %0, i8 %1)
  ret i8 %3
}
declare i16 @llvm.smul.sat.i16(i16, i16)
define i16 @smul.sat.i16(i16, i16) {
; Z80-LABEL: smul.sat.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld d, (iy + 5)
; Z80-NEXT:    push de
; Z80-NEXT:    push hl
; Z80-NEXT:    call _llvm.smul.sat.i16
; Z80-NEXT:    pop iy
; Z80-NEXT:    pop iy
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: smul.sat.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld de, (iy + 4)
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    call _llvm.smul.sat.i16
; EZ80-CODE16-NEXT:    ld iy, 4
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld sp, iy
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: smul.sat.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld de, (iy + 6)
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    call _llvm.smul.sat.i16
; EZ80-NEXT:    ld iy, 6
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ret
  call i16 @llvm.smul.sat.i16(i16 %0, i16 %1)
  ret i16 %3
}
declare i32 @llvm.smul.sat.i32(i32, i32)
define i32 @smul.sat.i32(i32, i32) {
; Z80-LABEL: smul.sat.i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    push iy
; Z80-NEXT:    call _llvm.smul.sat.i32
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: smul.sat.i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld iy, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    call _llvm.smul.sat.i32
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: smul.sat.i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld a, (iy + 6)
; EZ80-NEXT:    ld de, (iy + 9)
; EZ80-NEXT:    ld c, (iy + 12)
; EZ80-NEXT:    ; kill: def $c killed $c def $ubc
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    call _llvm.smul.sat.i32
; EZ80-NEXT:    ld iy, 12
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ret
  call i32 @llvm.smul.sat.i32(i32 %0, i32 %1)
  ret i32 %3
}
declare i64 @llvm.smul.sat.i64(i64, i64)
define i64 @smul.sat.i64(i64, i64) {
; Z80-LABEL: smul.sat.i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld c, (ix + 14)
; Z80-NEXT:    ld b, (ix + 15)
; Z80-NEXT:    ld e, (ix + 16)
; Z80-NEXT:    ld d, (ix + 17)
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    push bc
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    call _llvm.smul.sat.i64
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld hl, 16
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: smul.sat.i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld iy, (ix + 12)
; EZ80-CODE16-NEXT:    ld bc, (ix + 14)
; EZ80-CODE16-NEXT:    ld de, (ix + 16)
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    call _llvm.smul.sat.i64
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 16
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: smul.sat.i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld iy, (ix + 12)
; EZ80-NEXT:    ld bc, (ix + 15)
; EZ80-NEXT:    ld de, (ix + 18)
; EZ80-NEXT:    ld hl, (ix + 21)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    call _llvm.smul.sat.i64
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i64 @llvm.smul.sat.i64(i64 %0, i64 %1)
  ret i64 %3
}

declare i8 @llvm.umul.sat.i8(i8, i8)
define i8 @umul.sat.i8(i8, i8) {
; Z80-LABEL: umul.sat.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld a, (iy + 2)
; Z80-NEXT:    ld l, (iy + 4)
; Z80-NEXT:    ; kill: def $l killed $l def $hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, a
; Z80-NEXT:    push hl
; Z80-NEXT:    call _llvm.umul.sat.i8
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: umul.sat.i8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld a, (iy + 2)
; EZ80-CODE16-NEXT:    ld l, (iy + 4)
; EZ80-CODE16-NEXT:    ; kill: def $l killed $l def $hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    call _llvm.umul.sat.i8
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: umul.sat.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld a, (iy + 3)
; EZ80-NEXT:    ld l, (iy + 6)
; EZ80-NEXT:    ; kill: def $l killed $l def $uhl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    push hl
; EZ80-NEXT:    call _llvm.umul.sat.i8
; EZ80-NEXT:    ld hl, 6
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ret
  call i8 @llvm.umul.sat.i8(i8 %0, i8 %1)
  ret i8 %3
}
declare i16 @llvm.umul.sat.i16(i16, i16)
define i16 @umul.sat.i16(i16, i16) {
; Z80-LABEL: umul.sat.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld d, (iy + 5)
; Z80-NEXT:    push de
; Z80-NEXT:    push hl
; Z80-NEXT:    call _llvm.umul.sat.i16
; Z80-NEXT:    pop iy
; Z80-NEXT:    pop iy
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: umul.sat.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld de, (iy + 4)
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    call _llvm.umul.sat.i16
; EZ80-CODE16-NEXT:    ld iy, 4
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld sp, iy
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: umul.sat.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld de, (iy + 6)
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    call _llvm.umul.sat.i16
; EZ80-NEXT:    ld iy, 6
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ret
  call i16 @llvm.umul.sat.i16(i16 %0, i16 %1)
  ret i16 %3
}
declare i32 @llvm.umul.sat.i32(i32, i32)
define i32 @umul.sat.i32(i32, i32) {
; Z80-LABEL: umul.sat.i32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    push iy
; Z80-NEXT:    call _llvm.umul.sat.i32
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: umul.sat.i32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld iy, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    call _llvm.umul.sat.i32
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: umul.sat.i32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld a, (iy + 6)
; EZ80-NEXT:    ld de, (iy + 9)
; EZ80-NEXT:    ld c, (iy + 12)
; EZ80-NEXT:    ; kill: def $c killed $c def $ubc
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    call _llvm.umul.sat.i32
; EZ80-NEXT:    ld iy, 12
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ret
  call i32 @llvm.umul.sat.i32(i32 %0, i32 %1)
  ret i32 %3
}
declare i64 @llvm.umul.sat.i64(i64, i64)
define i64 @umul.sat.i64(i64, i64) {
; Z80-LABEL: umul.sat.i64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld c, (ix + 14)
; Z80-NEXT:    ld b, (ix + 15)
; Z80-NEXT:    ld e, (ix + 16)
; Z80-NEXT:    ld d, (ix + 17)
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    push bc
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    call _llvm.umul.sat.i64
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld hl, 16
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: umul.sat.i64:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld iy, (ix + 12)
; EZ80-CODE16-NEXT:    ld bc, (ix + 14)
; EZ80-CODE16-NEXT:    ld de, (ix + 16)
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    call _llvm.umul.sat.i64
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 16
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: umul.sat.i64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld iy, (ix + 12)
; EZ80-NEXT:    ld bc, (ix + 15)
; EZ80-NEXT:    ld de, (ix + 18)
; EZ80-NEXT:    ld hl, (ix + 21)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    call _llvm.umul.sat.i64
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i64 @llvm.umul.sat.i64(i64 %0, i64 %1)
  ret i64 %3
}

declare i8 @llvm.smul.fix.i8(i8, i8, i32 immarg)
define i8 @smul.fix.i8.7(i8, i8) {
; Z80-LABEL: smul.fix.i8.7:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld c, (iy + 2)
; Z80-NEXT:    ld d, (iy + 4)
; Z80-NEXT:    ld e, 7
; Z80-NEXT:    ld a, c
; Z80-NEXT:    rlc a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld h, a
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld a, d
; Z80-NEXT:    rlc a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld b, a
; Z80-NEXT:    ld c, d
; Z80-NEXT:    call __smulu
; Z80-NEXT:    ld c, e
; Z80-NEXT:    call __sshrs
; Z80-NEXT:    ld a, l
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: smul.fix.i8.7:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld c, (iy + 2)
; EZ80-CODE16-NEXT:    ld d, (iy + 4)
; EZ80-CODE16-NEXT:    ld e, 7
; EZ80-CODE16-NEXT:    ld a, c
; EZ80-CODE16-NEXT:    rlc a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld h, a
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld a, d
; EZ80-CODE16-NEXT:    rlc a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld b, a
; EZ80-CODE16-NEXT:    ld c, d
; EZ80-CODE16-NEXT:    call __smulu
; EZ80-CODE16-NEXT:    ld c, e
; EZ80-CODE16-NEXT:    call __sshrs
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: smul.fix.i8.7:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld c, (iy + 3)
; EZ80-NEXT:    ld d, (iy + 6)
; EZ80-NEXT:    ld e, 7
; EZ80-NEXT:    ld a, c
; EZ80-NEXT:    rlc a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ld h, a
; EZ80-NEXT:    ld l, c
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    rlc a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ld b, a
; EZ80-NEXT:    ld c, d
; EZ80-NEXT:    call __smulu
; EZ80-NEXT:    ld c, e
; EZ80-NEXT:    call __sshrs
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    ret
  call i8 @llvm.smul.fix.i8(i8 %0, i8 %1, i32 7)
  ret i8 %3
}
declare i16 @llvm.smul.fix.i16(i16, i16, i32 immarg)
define i16 @smul.fix.i16.7(i16, i16) {
; Z80-LABEL: smul.fix.i16.7:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld c, (ix + 4)
; Z80-NEXT:    ld b, (ix + 5)
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    ld iyl, c
; Z80-NEXT:    ld iyh, b
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    ld c, (ix + 6)
; Z80-NEXT:    ld b, (ix + 7)
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld a, 7
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    call __lshrs
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: smul.fix.i16.7:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld bc, (ix + 4)
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    ld iyl, c
; EZ80-CODE16-NEXT:    ld iyh, b
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    ld iy, (ix + 6)
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    ld bc, (ix + 6)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld a, 7
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    call __lshrs
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: smul.fix.i16.7:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, (ix + 6)
; EZ80-NEXT:    ld a, b
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld d, a
; EZ80-NEXT:    ld e, c
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    ld iy, (ix + 9)
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld b, a
; EZ80-NEXT:    ld c, iyl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ; kill: def $e killed $e killed $ude
; EZ80-NEXT:    ld a, iyl
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld l, 7
; EZ80-NEXT:    call __lshrs
; EZ80-NEXT:    ld l, c
; EZ80-NEXT:    ld h, b
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i16 @llvm.smul.fix.i16(i16 %0, i16 %1, i32 7)
  ret i16 %3
}
define i16 @smul.fix.i16.15(i16, i16) {
; Z80-LABEL: smul.fix.i16.15:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld c, (ix + 4)
; Z80-NEXT:    ld b, (ix + 5)
; Z80-NEXT:    ld a, 15
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    ld iyl, c
; Z80-NEXT:    ld iyh, b
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    ld c, (ix + 6)
; Z80-NEXT:    ld b, (ix + 7)
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    call __lshrs
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: smul.fix.i16.15:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld bc, (ix + 4)
; EZ80-CODE16-NEXT:    ld a, 15
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    ld iyl, c
; EZ80-CODE16-NEXT:    ld iyh, b
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    ld iy, (ix + 6)
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    ld bc, (ix + 6)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    call __lshrs
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: smul.fix.i16.15:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, (ix + 6)
; EZ80-NEXT:    ld a, b
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld d, a
; EZ80-NEXT:    ld e, c
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    ld iy, (ix + 9)
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld b, a
; EZ80-NEXT:    ld c, iyl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ; kill: def $e killed $e killed $ude
; EZ80-NEXT:    ld a, iyl
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld l, 15
; EZ80-NEXT:    call __lshrs
; EZ80-NEXT:    ld l, c
; EZ80-NEXT:    ld h, b
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i16 @llvm.smul.fix.i16(i16 %0, i16 %1, i32 15)
  ret i16 %3
}
declare i32 @llvm.smul.fix.i32(i32, i32, i32 immarg)
define i32 @smul.fix.i32.15(i32, i32) {
; Z80-LABEL: smul.fix.i32.15:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld l, e
; Z80-NEXT:    ld h, d
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 15
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    call __llshrs
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: smul.fix.i32.15:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld iy, (ix + 6)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld l, e
; EZ80-CODE16-NEXT:    ld h, d
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 15
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    call __llshrs
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: smul.fix.i32.15:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld e, (ix + 9)
; EZ80-NEXT:    ld a, (ix + 15)
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld c, e
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld hl, (ix + 12)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 15
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshrs
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i32 @llvm.smul.fix.i32(i32 %0, i32 %1, i32 15)
  ret i32 %3
}
define i32 @smul.fix.i32.31(i32, i32) {
; Z80-LABEL: smul.fix.i32.31:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld l, e
; Z80-NEXT:    ld h, d
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 31
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    call __llshrs
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: smul.fix.i32.31:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld iy, (ix + 6)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld l, e
; EZ80-CODE16-NEXT:    ld h, d
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 31
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    call __llshrs
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: smul.fix.i32.31:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld e, (ix + 9)
; EZ80-NEXT:    ld a, (ix + 15)
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld c, e
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld hl, (ix + 12)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 31
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshrs
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i32 @llvm.smul.fix.i32(i32 %0, i32 %1, i32 31)
  ret i32 %3
}
declare i64 @llvm.smul.fix.i64(i64, i64, i32 immarg)
define i64 @smul.fix.i64.31(i64, i64) {
; Z80-LABEL: smul.fix.i64.31:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -44
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld a, 31
; Z80-NEXT:    call __lshrs
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    ld (ix - 10), e
; Z80-NEXT:    ld (ix - 9), d
; Z80-NEXT:    ld c, (ix + 16)
; Z80-NEXT:    ld b, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lshrs
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld (ix - 6), e
; Z80-NEXT:    ld (ix - 5), d
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 12)
; Z80-NEXT:    ld b, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 16), l
; Z80-NEXT:    ld (ix - 15), h
; Z80-NEXT:    ld (ix - 18), e
; Z80-NEXT:    ld (ix - 17), d
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    ld c, (ix + 12)
; Z80-NEXT:    ld b, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 12), l
; Z80-NEXT:    ld (ix - 11), h
; Z80-NEXT:    ld (ix - 2), e
; Z80-NEXT:    ld (ix - 1), d
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 16)
; Z80-NEXT:    ld b, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 20), l
; Z80-NEXT:    ld (ix - 19), h
; Z80-NEXT:    ld (ix - 14), e
; Z80-NEXT:    ld (ix - 13), d
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 22), l
; Z80-NEXT:    ld (ix - 21), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 22)
; Z80-NEXT:    ld h, (ix - 21)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 24), l
; Z80-NEXT:    ld (ix - 23), h
; Z80-NEXT:    ld (ix - 22), e
; Z80-NEXT:    ld (ix - 21), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix - 12)
; Z80-NEXT:    ld h, (ix - 11)
; Z80-NEXT:    ld e, (ix - 20)
; Z80-NEXT:    ld d, (ix - 19)
; Z80-NEXT:    add hl, de
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld c, (ix - 14)
; Z80-NEXT:    ld b, (ix - 13)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    inc iy
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, (ix - 24)
; Z80-NEXT:    ld d, (ix - 23)
; Z80-NEXT:    add hl, de
; Z80-NEXT:    ld (ix - 12), l
; Z80-NEXT:    ld (ix - 11), h
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    ld e, (ix - 22)
; Z80-NEXT:    ld d, (ix - 21)
; Z80-NEXT:    adc hl, de
; Z80-NEXT:    ld (ix - 20), l
; Z80-NEXT:    ld (ix - 19), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    inc bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld (ix - 22), l
; Z80-NEXT:    ld (ix - 21), h
; Z80-NEXT:    ld (ix - 14), e
; Z80-NEXT:    ld (ix - 13), d
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    ld e, (ix - 10)
; Z80-NEXT:    ld d, (ix - 9)
; Z80-NEXT:    ld c, (ix + 12)
; Z80-NEXT:    ld b, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld (ix - 24), e
; Z80-NEXT:    ld (ix - 23), d
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    ld c, (ix + 16)
; Z80-NEXT:    ld b, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 30), l
; Z80-NEXT:    ld (ix - 29), h
; Z80-NEXT:    ld (ix - 26), e
; Z80-NEXT:    ld (ix - 25), d
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix - 4)
; Z80-NEXT:    ld b, (ix - 3)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 32), l
; Z80-NEXT:    ld (ix - 31), h
; Z80-NEXT:    ld (ix - 28), e
; Z80-NEXT:    ld (ix - 27), d
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 34), l
; Z80-NEXT:    ld (ix - 33), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 34)
; Z80-NEXT:    ld h, (ix - 33)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 36), l
; Z80-NEXT:    ld (ix - 35), h
; Z80-NEXT:    ld (ix - 34), e
; Z80-NEXT:    ld (ix - 33), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 16)
; Z80-NEXT:    ld h, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 38), l
; Z80-NEXT:    ld (ix - 37), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 38)
; Z80-NEXT:    ld h, (ix - 37)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 40), l
; Z80-NEXT:    ld (ix - 39), h
; Z80-NEXT:    ld (ix - 38), e
; Z80-NEXT:    ld (ix - 37), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld e, (ix - 30)
; Z80-NEXT:    ld d, (ix - 29)
; Z80-NEXT:    add iy, de
; Z80-NEXT:    ld l, (ix - 24)
; Z80-NEXT:    ld h, (ix - 23)
; Z80-NEXT:    ld e, (ix - 26)
; Z80-NEXT:    ld d, (ix - 25)
; Z80-NEXT:    adc hl, de
; Z80-NEXT:    ld (ix - 24), l
; Z80-NEXT:    ld (ix - 23), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    inc de
; Z80-NEXT:    ld c, (ix - 32)
; Z80-NEXT:    ld b, (ix - 31)
; Z80-NEXT:    add iy, bc
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix - 24)
; Z80-NEXT:    ld h, (ix - 23)
; Z80-NEXT:    ld c, (ix - 28)
; Z80-NEXT:    ld b, (ix - 27)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld (ix - 24), l
; Z80-NEXT:    ld (ix - 23), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    inc bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld c, (ix - 36)
; Z80-NEXT:    ld b, (ix - 35)
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld l, (ix - 24)
; Z80-NEXT:    ld h, (ix - 23)
; Z80-NEXT:    ld c, (ix - 34)
; Z80-NEXT:    ld b, (ix - 33)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld (ix - 24), l
; Z80-NEXT:    ld (ix - 23), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    inc bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld c, (ix - 40)
; Z80-NEXT:    ld b, (ix - 39)
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld l, (ix - 24)
; Z80-NEXT:    ld h, (ix - 23)
; Z80-NEXT:    ld c, (ix - 38)
; Z80-NEXT:    ld b, (ix - 37)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld (ix - 24), l
; Z80-NEXT:    ld (ix - 23), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    inc bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld c, (ix - 22)
; Z80-NEXT:    ld b, (ix - 21)
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld l, (ix - 24)
; Z80-NEXT:    ld h, (ix - 23)
; Z80-NEXT:    ld c, (ix - 14)
; Z80-NEXT:    ld b, (ix - 13)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld (ix - 14), l
; Z80-NEXT:    ld (ix - 13), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    inc bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld (ix - 22), l
; Z80-NEXT:    ld (ix - 21), h
; Z80-NEXT:    ld (ix - 24), e
; Z80-NEXT:    ld (ix - 23), d
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    ld e, (ix - 10)
; Z80-NEXT:    ld d, (ix - 9)
; Z80-NEXT:    ld c, (ix + 12)
; Z80-NEXT:    ld b, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 26), l
; Z80-NEXT:    ld (ix - 25), h
; Z80-NEXT:    ld (ix - 28), e
; Z80-NEXT:    ld (ix - 27), d
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    ld e, (ix - 10)
; Z80-NEXT:    ld d, (ix - 9)
; Z80-NEXT:    ld c, (ix + 16)
; Z80-NEXT:    ld b, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 38), l
; Z80-NEXT:    ld (ix - 37), h
; Z80-NEXT:    ld (ix - 40), e
; Z80-NEXT:    ld (ix - 39), d
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    ld c, (ix - 4)
; Z80-NEXT:    ld b, (ix - 3)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 34), l
; Z80-NEXT:    ld (ix - 33), h
; Z80-NEXT:    ld (ix - 36), e
; Z80-NEXT:    ld (ix - 35), d
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix - 4)
; Z80-NEXT:    ld b, (ix - 3)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 30), l
; Z80-NEXT:    ld (ix - 29), h
; Z80-NEXT:    ld (ix - 32), e
; Z80-NEXT:    ld (ix - 31), d
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    ld e, (ix - 10)
; Z80-NEXT:    ld d, (ix - 9)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    ld (ix - 10), e
; Z80-NEXT:    ld (ix - 9), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 16)
; Z80-NEXT:    ld h, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 42), l
; Z80-NEXT:    ld (ix - 41), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 42)
; Z80-NEXT:    ld h, (ix - 41)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 42), l
; Z80-NEXT:    ld (ix - 41), h
; Z80-NEXT:    ld (ix - 44), e
; Z80-NEXT:    ld (ix - 43), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld (ix - 6), e
; Z80-NEXT:    ld (ix - 5), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix - 26)
; Z80-NEXT:    ld h, (ix - 25)
; Z80-NEXT:    ld e, (ix - 28)
; Z80-NEXT:    ld d, (ix - 27)
; Z80-NEXT:    ld c, (ix - 38)
; Z80-NEXT:    ld b, (ix - 37)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 40)
; Z80-NEXT:    ld h, (ix - 39)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 34)
; Z80-NEXT:    ld b, (ix - 33)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 36)
; Z80-NEXT:    ld h, (ix - 35)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 30)
; Z80-NEXT:    ld b, (ix - 29)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 32)
; Z80-NEXT:    ld h, (ix - 31)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 8)
; Z80-NEXT:    ld b, (ix - 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 42)
; Z80-NEXT:    ld b, (ix - 41)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 44)
; Z80-NEXT:    ld h, (ix - 43)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 4)
; Z80-NEXT:    ld b, (ix - 3)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 22)
; Z80-NEXT:    ld b, (ix - 21)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 24)
; Z80-NEXT:    ld h, (ix - 23)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld (ix - 6), e
; Z80-NEXT:    ld (ix - 5), d
; Z80-NEXT:    ld hl, 31
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 20)
; Z80-NEXT:    ld h, (ix - 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 16)
; Z80-NEXT:    ld h, (ix - 15)
; Z80-NEXT:    ld e, (ix - 18)
; Z80-NEXT:    ld d, (ix - 17)
; Z80-NEXT:    ld c, (ix - 12)
; Z80-NEXT:    ld b, (ix - 11)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    ld (ix - 10), e
; Z80-NEXT:    ld (ix - 9), d
; Z80-NEXT:    ld (ix - 12), c
; Z80-NEXT:    ld (ix - 11), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 16), l
; Z80-NEXT:    ld (ix - 15), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 33
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 14)
; Z80-NEXT:    ld d, (ix - 13)
; Z80-NEXT:    ld c, (ix - 4)
; Z80-NEXT:    ld b, (ix - 3)
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 18), l
; Z80-NEXT:    ld (ix - 17), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ld h, (ix - 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 16)
; Z80-NEXT:    ld h, (ix - 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    ld e, (ix - 10)
; Z80-NEXT:    ld d, (ix - 9)
; Z80-NEXT:    ld c, (ix - 12)
; Z80-NEXT:    ld b, (ix - 11)
; Z80-NEXT:    call __llor
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    ld (ix - 10), e
; Z80-NEXT:    ld (ix - 9), d
; Z80-NEXT:    ld (ix - 12), c
; Z80-NEXT:    ld (ix - 11), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 16), l
; Z80-NEXT:    ld (ix - 15), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 31
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 14)
; Z80-NEXT:    ld d, (ix - 13)
; Z80-NEXT:    ld c, (ix - 4)
; Z80-NEXT:    ld b, (ix - 3)
; Z80-NEXT:    call __llshrs
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    ld e, (ix - 10)
; Z80-NEXT:    ld d, (ix - 9)
; Z80-NEXT:    ld c, (ix - 12)
; Z80-NEXT:    ld b, (ix - 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 16)
; Z80-NEXT:    ld h, (ix - 15)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: smul.fix.i64.31:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 44
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    ld iy, (ix + 10)
; EZ80-CODE16-NEXT:    ld a, 31
; EZ80-CODE16-NEXT:    call __lshrs
; EZ80-CODE16-NEXT:    ld (ix - 8), hl
; EZ80-CODE16-NEXT:    ld (ix - 10), de
; EZ80-CODE16-NEXT:    ld bc, (ix + 16)
; EZ80-CODE16-NEXT:    ld iy, (ix + 18)
; EZ80-CODE16-NEXT:    call __lshrs
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld (ix - 6), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 12)
; EZ80-CODE16-NEXT:    ld iy, (ix + 14)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 16), hl
; EZ80-CODE16-NEXT:    ld (ix - 18), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    ld bc, (ix + 12)
; EZ80-CODE16-NEXT:    ld iy, (ix + 14)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 12), hl
; EZ80-CODE16-NEXT:    ld (ix - 2), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 16)
; EZ80-CODE16-NEXT:    ld iy, (ix + 18)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 20), hl
; EZ80-CODE16-NEXT:    ld (ix - 14), de
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 14)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 22), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 22)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 24), hl
; EZ80-CODE16-NEXT:    ld (ix - 22), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 12)
; EZ80-CODE16-NEXT:    ld de, (ix - 20)
; EZ80-CODE16-NEXT:    add hl, de
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld bc, (ix - 14)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    inc iy
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld de, (ix - 24)
; EZ80-CODE16-NEXT:    add hl, de
; EZ80-CODE16-NEXT:    ld (ix - 12), hl
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    ld de, (ix - 22)
; EZ80-CODE16-NEXT:    adc hl, de
; EZ80-CODE16-NEXT:    ld (ix - 20), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld (ix - 22), hl
; EZ80-CODE16-NEXT:    ld (ix - 14), de
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    ld de, (ix - 10)
; EZ80-CODE16-NEXT:    ld bc, (ix + 12)
; EZ80-CODE16-NEXT:    ld iy, (ix + 14)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld (ix - 24), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    ld bc, (ix + 16)
; EZ80-CODE16-NEXT:    ld iy, (ix + 18)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 30), hl
; EZ80-CODE16-NEXT:    ld (ix - 26), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix - 4)
; EZ80-CODE16-NEXT:    ld iy, (ix - 6)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 32), hl
; EZ80-CODE16-NEXT:    ld (ix - 28), de
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 14)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 34), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 34)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 36), hl
; EZ80-CODE16-NEXT:    ld (ix - 34), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 16)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 38), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 38)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 40), hl
; EZ80-CODE16-NEXT:    ld (ix - 38), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld iy, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 30)
; EZ80-CODE16-NEXT:    add iy, de
; EZ80-CODE16-NEXT:    ld hl, (ix - 24)
; EZ80-CODE16-NEXT:    ld de, (ix - 26)
; EZ80-CODE16-NEXT:    adc hl, de
; EZ80-CODE16-NEXT:    ld (ix - 24), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    inc de
; EZ80-CODE16-NEXT:    ld bc, (ix - 32)
; EZ80-CODE16-NEXT:    add iy, bc
; EZ80-CODE16-NEXT:    ld (ix - 2), iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 24)
; EZ80-CODE16-NEXT:    ld bc, (ix - 28)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 24), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld bc, (ix - 36)
; EZ80-CODE16-NEXT:    add hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 24)
; EZ80-CODE16-NEXT:    ld bc, (ix - 34)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 24), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld bc, (ix - 40)
; EZ80-CODE16-NEXT:    add hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 24)
; EZ80-CODE16-NEXT:    ld bc, (ix - 38)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 24), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld bc, (ix - 22)
; EZ80-CODE16-NEXT:    add hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 24)
; EZ80-CODE16-NEXT:    ld bc, (ix - 14)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 14), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld (ix - 22), hl
; EZ80-CODE16-NEXT:    ld (ix - 24), de
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    ld de, (ix - 10)
; EZ80-CODE16-NEXT:    ld bc, (ix + 12)
; EZ80-CODE16-NEXT:    ld iy, (ix + 14)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 26), hl
; EZ80-CODE16-NEXT:    ld (ix - 28), de
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    ld de, (ix - 10)
; EZ80-CODE16-NEXT:    ld bc, (ix + 16)
; EZ80-CODE16-NEXT:    ld iy, (ix + 18)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 38), hl
; EZ80-CODE16-NEXT:    ld (ix - 40), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    ld bc, (ix - 4)
; EZ80-CODE16-NEXT:    ld iy, (ix - 6)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 34), hl
; EZ80-CODE16-NEXT:    ld (ix - 36), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix - 4)
; EZ80-CODE16-NEXT:    ld iy, (ix - 6)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 30), hl
; EZ80-CODE16-NEXT:    ld (ix - 32), de
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 14)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    ld de, (ix - 10)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 8), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 8), hl
; EZ80-CODE16-NEXT:    ld (ix - 10), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 16)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 42), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 42)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 42), hl
; EZ80-CODE16-NEXT:    ld (ix - 44), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix - 6)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld (ix - 6), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 26)
; EZ80-CODE16-NEXT:    ld de, (ix - 28)
; EZ80-CODE16-NEXT:    ld bc, (ix - 38)
; EZ80-CODE16-NEXT:    ld iy, (ix - 40)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 34)
; EZ80-CODE16-NEXT:    ld iy, (ix - 36)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 30)
; EZ80-CODE16-NEXT:    ld iy, (ix - 32)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 8)
; EZ80-CODE16-NEXT:    ld iy, (ix - 10)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 42)
; EZ80-CODE16-NEXT:    ld iy, (ix - 44)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 4)
; EZ80-CODE16-NEXT:    ld iy, (ix - 6)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 22)
; EZ80-CODE16-NEXT:    ld iy, (ix - 24)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld (ix - 6), de
; EZ80-CODE16-NEXT:    ld hl, 31
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 20)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 16)
; EZ80-CODE16-NEXT:    ld de, (ix - 18)
; EZ80-CODE16-NEXT:    ld bc, (ix - 12)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 8), hl
; EZ80-CODE16-NEXT:    ld (ix - 10), de
; EZ80-CODE16-NEXT:    ld (ix - 12), bc
; EZ80-CODE16-NEXT:    ld (ix - 16), iy
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 33
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 6)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 14)
; EZ80-CODE16-NEXT:    ld bc, (ix - 4)
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 18), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 16)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    ld de, (ix - 10)
; EZ80-CODE16-NEXT:    ld bc, (ix - 12)
; EZ80-CODE16-NEXT:    call __llor
; EZ80-CODE16-NEXT:    ld (ix - 8), hl
; EZ80-CODE16-NEXT:    ld (ix - 10), de
; EZ80-CODE16-NEXT:    ld (ix - 12), bc
; EZ80-CODE16-NEXT:    ld (ix - 16), iy
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 31
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 6)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 14)
; EZ80-CODE16-NEXT:    ld bc, (ix - 4)
; EZ80-CODE16-NEXT:    call __llshrs
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    ld de, (ix - 10)
; EZ80-CODE16-NEXT:    ld bc, (ix - 12)
; EZ80-CODE16-NEXT:    ld iy, (ix - 16)
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: smul.fix.i64.31:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, -217
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld de, (ix + 12)
; EZ80-NEXT:    ld bc, (ix + 21)
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld h, a
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld de, -132
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld de, -159
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    ld a, b
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld h, a
; EZ80-NEXT:    ld l, c
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -129
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld de, -156
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    ld bc, (ix + 9)
; EZ80-NEXT:    ld iyh, c
; EZ80-NEXT:    ld (ix - 120), bc
; EZ80-NEXT:    ld.sis hl, (ix - 119)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -179
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 117), bc
; EZ80-NEXT:    ld.sis bc, (ix - 116)
; EZ80-NEXT:    ld l, 31
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -182
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), a
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 114), bc
; EZ80-NEXT:    ld (ix - 112), a
; EZ80-NEXT:    ld bc, (ix - 114)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -194
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), a
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    call __lshrs
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -175
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    dec de
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), a ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix + 18)
; EZ80-NEXT:    ld iyl, e
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -135
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    push af
; EZ80-NEXT:    ld a, iyl
; EZ80-NEXT:    ld (ix), a
; EZ80-NEXT:    pop af
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 111), de
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld.sis bc, (ix - 110)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -153
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld (ix - 108), de
; EZ80-NEXT:    ld.sis de, (ix - 107)
; EZ80-NEXT:    ld hl, (ix + 21)
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -188
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), a
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 105), de
; EZ80-NEXT:    ld (ix - 103), a
; EZ80-NEXT:    ld bc, (ix - 105)
; EZ80-NEXT:    ld a, h
; EZ80-NEXT:    ld de, -191
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    ld l, 31
; EZ80-NEXT:    call __lshrs
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -171
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    dec de
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), a ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld e, iyh
; EZ80-NEXT:    ld bc, (ix + 15)
; EZ80-NEXT:    ld a, iyl
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -162
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ; kill: def $e killed $e def $ude
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -165
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ld (ix - 102), hl
; EZ80-NEXT:    ld.sis hl, (ix - 101)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -132
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -144
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), a
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 99), hl
; EZ80-NEXT:    ld (ix - 97), a
; EZ80-NEXT:    ld hl, (ix - 99)
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -141
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), a
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld a, iyl
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 126), hl
; EZ80-NEXT:    ld (ix - 123), e ; 1-byte Folded Spill
; EZ80-NEXT:    ld hl, (ix + 18)
; EZ80-NEXT:    ld (ix - 96), hl
; EZ80-NEXT:    ld.sis hl, (ix - 95)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -129
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -149
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), a
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 93), hl
; EZ80-NEXT:    ld (ix - 91), a
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (ix - 93)
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    ld de, -150
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -148
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    push af
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    ld (ix), a
; EZ80-NEXT:    pop af
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld e, iyh
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -185
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -168
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld e, iyh
; EZ80-NEXT:    ld bc, -138
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), de
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -135
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld iyl, a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -147
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), iy
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld bc, -197
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld bc, -200
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    ld iy, (ix - 126)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -185
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld a, (ix - 123) ; 1-byte Folded Reload
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -168
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld l, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    adc a, l
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    inc de
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -197
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (ix - 126), iy
; EZ80-NEXT:    ld de, -200
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    push af
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld l, (iy)
; EZ80-NEXT:    adc a, l
; EZ80-NEXT:    ld h, a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -168
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    xor a, a
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -204
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -201
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -132
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 90), hl
; EZ80-NEXT:    ld l, (ix - 88)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -159
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld c, e
; EZ80-NEXT:    ld b, d
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -185
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 87), hl
; EZ80-NEXT:    ld.sis (ix - 86), bc
; EZ80-NEXT:    ld hl, (ix - 87)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld (ix - 84), de
; EZ80-NEXT:    ld e, (ix - 82)
; EZ80-NEXT:    ld iy, (ix + 15)
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -135
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 123), hl
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -205
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ld (ix - 81), hl
; EZ80-NEXT:    ld.sis hl, (ix - 80)
; EZ80-NEXT:    ld (ix - 78), hl
; EZ80-NEXT:    ld bc, -144
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld a, (hl)
; EZ80-NEXT:    ld (ix - 76), a
; EZ80-NEXT:    ld hl, (ix - 78)
; EZ80-NEXT:    ld de, (ix + 18)
; EZ80-NEXT:    ld (ix - 75), de
; EZ80-NEXT:    ld.sis de, (ix - 74)
; EZ80-NEXT:    ld (ix - 72), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -149
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 70), a
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (ix - 72)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -141
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld e, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -150
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -209
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -206
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -129
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 69), hl
; EZ80-NEXT:    ld l, (ix - 67)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -156
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld c, e
; EZ80-NEXT:    ld b, d
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -200
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 66), hl
; EZ80-NEXT:    ld.sis (ix - 65), bc
; EZ80-NEXT:    ld bc, (ix - 66)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld (ix - 63), de
; EZ80-NEXT:    ld a, (ix - 61)
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -148
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld e, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -213
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -210
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -179
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 60), hl
; EZ80-NEXT:    ld bc, -182
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld a, (hl)
; EZ80-NEXT:    ld (ix - 58), a
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (ix - 60)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -182
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -194
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -179
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -147
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld bc, -216
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    dec bc
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -153
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 57), hl
; EZ80-NEXT:    ld bc, -188
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld a, (hl)
; EZ80-NEXT:    ld (ix - 55), a
; EZ80-NEXT:    ld de, (ix - 57)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -194
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, 0
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -191
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -197
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -138
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld bc, -153
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld bc, -188
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    ld iy, (ix - 123)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -209
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -205
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    dec bc
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld l, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    adc a, l
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    inc de
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -213
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -210
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld l, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    adc a, l
; EZ80-NEXT:    ld (ix - 123), a ; 1-byte Folded Spill
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    xor a, a
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -191
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -216
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld a, (ix - 123) ; 1-byte Folded Reload
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -217
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld l, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    adc a, l
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld d, a
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -191
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    xor a, a
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 123), hl
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -153
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -188
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld l, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    adc a, l
; EZ80-NEXT:    ld d, a
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    ld hl, (ix - 123)
; EZ80-NEXT:    xor a, a
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -188
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -204
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (ix - 123), iy
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld bc, -201
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    push af
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld l, (iy)
; EZ80-NEXT:    adc a, l
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -153
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -188
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    xor a, a
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -188
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -191
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -159
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (ix + 15)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -135
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -135
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -201
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -132
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 54), hl
; EZ80-NEXT:    ld l, (ix - 52)
; EZ80-NEXT:    ld (ix - 51), hl
; EZ80-NEXT:    ld bc, -185
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld.sis (ix - 50), hl
; EZ80-NEXT:    ld hl, (ix - 51)
; EZ80-NEXT:    ld (ix - 48), iy
; EZ80-NEXT:    ld e, (ix - 46)
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (ix + 18)
; EZ80-NEXT:    ld (ix - 45), bc
; EZ80-NEXT:    ld.sis bc, (ix - 44)
; EZ80-NEXT:    ld (ix - 42), bc
; EZ80-NEXT:    ld bc, -149
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld a, (iy)
; EZ80-NEXT:    ld (ix - 40), a
; EZ80-NEXT:    ld bc, (ix - 42)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -150
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -132
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -149
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ld (ix - 39), hl
; EZ80-NEXT:    ld.sis hl, (ix - 38)
; EZ80-NEXT:    ld (ix - 36), hl
; EZ80-NEXT:    ld bc, -144
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld a, (hl)
; EZ80-NEXT:    ld (ix - 34), a
; EZ80-NEXT:    ld hl, (ix - 36)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -129
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 33), de
; EZ80-NEXT:    ld e, (ix - 31)
; EZ80-NEXT:    ld (ix - 30), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -200
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld.sis (ix - 29), de
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (ix - 30)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -156
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld iy, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 27), iy
; EZ80-NEXT:    ld a, (ix - 25)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -141
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld e, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -144
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -150
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -148
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld e, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    ld a, iyl
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ld bc, -129
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -141
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -176
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -147
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -175
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld bc, -147
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    dec bc
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -197
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -194
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -182
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -179
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld bc, -156
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld bc, -159
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -172
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -138
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld d, e
; EZ80-NEXT:    ld bc, -135
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -201
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld e, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -132
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -149
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -144
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -150
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -129
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -141
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -147
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    dec de
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -156
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -159
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld de, -188
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld bc, (iy)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -191
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld h, e
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -129
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 126)
; EZ80-NEXT:    ld l, c
; EZ80-NEXT:    ld h, b
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -165
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 24), de
; EZ80-NEXT:    ld.sis (ix - 23), hl
; EZ80-NEXT:    ld de, (ix - 24)
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld (ix - 21), bc
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld de, -168
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld bc, (hl)
; EZ80-NEXT:    ld c, (ix - 19)
; EZ80-NEXT:    ld hl, 31
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld de, -162
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -135
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -138
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -141
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld de, -132
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld (hl), iy
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld d, iyh
; EZ80-NEXT:    ld (ix - 126), de
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -153
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 18), hl
; EZ80-NEXT:    ld.sis (ix - 17), de
; EZ80-NEXT:    ld de, (ix - 18)
; EZ80-NEXT:    ld (ix - 15), iy
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld de, -129
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld bc, (hl)
; EZ80-NEXT:    ld c, (ix - 13)
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld (iy), bc
; EZ80-NEXT:    ld hl, 33
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 123)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -135
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld bc, -138
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld de, (iy)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -141
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __llor
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -135
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -138
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld de, -153
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld (ix - 12), hl
; EZ80-NEXT:    ld hl, (ix - 126)
; EZ80-NEXT:    ld.sis (ix - 11), hl
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld de, (ix - 12)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld de, -132
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld (ix - 9), hl
; EZ80-NEXT:    ld de, -129
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld bc, (hl)
; EZ80-NEXT:    ld c, (ix - 7)
; EZ80-NEXT:    ld hl, 31
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 123)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __llshrs
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld bc, -135
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld de, (iy)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -138
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ret
  call i64 @llvm.smul.fix.i64(i64 %0, i64 %1, i32 31)
  ret i64 %3
}

declare i8 @llvm.umul.fix.i8(i8, i8, i32 immarg)
define i8 @umul.fix.i8.8(i8, i8) {
; Z80-LABEL: umul.fix.i8.8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld a, (iy + 2)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld h, 0
; Z80-NEXT:    ld l, a
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld c, e
; Z80-NEXT:    call __smulu
; Z80-NEXT:    ld d, 0
; Z80-NEXT:    ld e, h
; Z80-NEXT:    ld a, e
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: umul.fix.i8.8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld a, (iy + 2)
; EZ80-CODE16-NEXT:    ld e, (iy + 4)
; EZ80-CODE16-NEXT:    ld h, 0
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld c, e
; EZ80-CODE16-NEXT:    call __smulu
; EZ80-CODE16-NEXT:    ld d, 0
; EZ80-CODE16-NEXT:    ld e, h
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: umul.fix.i8.8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld a, (iy + 3)
; EZ80-NEXT:    ld e, (iy + 6)
; EZ80-NEXT:    ld h, 0
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    ld b, h
; EZ80-NEXT:    ld c, e
; EZ80-NEXT:    call __smulu
; EZ80-NEXT:    ld d, 0
; EZ80-NEXT:    ld e, h
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ret
  call i8 @llvm.umul.fix.i8(i8 %0, i8 %1, i32 8)
  ret i8 %3
}
declare i16 @llvm.umul.fix.i16(i16, i16, i32 immarg)
define i16 @umul.fix.i16.8(i16, i16) {
; Z80-LABEL: umul.fix.i16.8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld c, (iy + 4)
; Z80-NEXT:    ld b, (iy + 5)
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld a, 8
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    call __lshru
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: umul.fix.i16.8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld bc, (iy + 4)
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld a, 8
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    call __lshru
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: umul.fix.i16.8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld de, (iy + 3)
; EZ80-NEXT:    ld iy, (iy + 6)
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:    xor a, a
; EZ80-NEXT:    ld bc, 0
; EZ80-NEXT:    ld c, iyl
; EZ80-NEXT:    ld b, iyh
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld l, 8
; EZ80-NEXT:    call __lshru
; EZ80-NEXT:    ld l, c
; EZ80-NEXT:    ld h, b
; EZ80-NEXT:    ret
  call i16 @llvm.umul.fix.i16(i16 %0, i16 %1, i32 8)
  ret i16 %3
}
define i16 @umul.fix.i16.16(i16, i16) {
; Z80-LABEL: umul.fix.i16.16:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld c, (iy + 4)
; Z80-NEXT:    ld b, (iy + 5)
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld a, 16
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    call __lshru
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: umul.fix.i16.16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld bc, (iy + 4)
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld a, 16
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    call __lshru
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: umul.fix.i16.16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld de, (iy + 3)
; EZ80-NEXT:    ld iy, (iy + 6)
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:    xor a, a
; EZ80-NEXT:    ld bc, 0
; EZ80-NEXT:    ld c, iyl
; EZ80-NEXT:    ld b, iyh
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld l, 16
; EZ80-NEXT:    call __lshru
; EZ80-NEXT:    ld l, c
; EZ80-NEXT:    ld h, b
; EZ80-NEXT:    ret
  call i16 @llvm.umul.fix.i16(i16 %0, i16 %1, i32 16)
  ret i16 %3
}
declare i32 @llvm.umul.fix.i32(i32, i32, i32 immarg)
define i32 @umul.fix.i32.16(i32, i32) {
; Z80-LABEL: umul.fix.i32.16:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 16
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: umul.fix.i32.16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld iy, (ix + 8)
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 16
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: umul.fix.i32.16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld a, (ix + 9)
; EZ80-NEXT:    ld l, (ix + 15)
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld iyl, e
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld bc, 0
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 12)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 16
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i32 @llvm.umul.fix.i32(i32 %0, i32 %1, i32 16)
  ret i32 %3
}
define i32 @umul.fix.i32.32(i32, i32) {
; Z80-LABEL: umul.fix.i32.32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: umul.fix.i32.32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld iy, (ix + 8)
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: umul.fix.i32.32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld a, (ix + 9)
; EZ80-NEXT:    ld l, (ix + 15)
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld iyl, e
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld bc, 0
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 12)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i32 @llvm.umul.fix.i32(i32 %0, i32 %1, i32 32)
  ret i32 %3
}
declare i64 @llvm.umul.fix.i64(i64, i64, i32 immarg)
define i64 @umul.fix.i64.32(i64, i64) {
; Z80-LABEL: umul.fix.i64.32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -44
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 12)
; Z80-NEXT:    ld b, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 12), l
; Z80-NEXT:    ld (ix - 11), h
; Z80-NEXT:    ld (ix - 14), e
; Z80-NEXT:    ld (ix - 13), d
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    ld c, (ix + 12)
; Z80-NEXT:    ld b, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld (ix - 2), e
; Z80-NEXT:    ld (ix - 1), d
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 16)
; Z80-NEXT:    ld b, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    ld (ix - 6), e
; Z80-NEXT:    ld (ix - 5), d
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 16), l
; Z80-NEXT:    ld (ix - 15), h
; Z80-NEXT:    ld (ix - 10), e
; Z80-NEXT:    ld (ix - 9), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    ld e, (ix - 8)
; Z80-NEXT:    ld d, (ix - 7)
; Z80-NEXT:    add hl, de
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld c, (ix - 6)
; Z80-NEXT:    ld b, (ix - 5)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    inc iy
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, (ix - 16)
; Z80-NEXT:    ld d, (ix - 15)
; Z80-NEXT:    add hl, de
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    ld e, (ix - 10)
; Z80-NEXT:    ld d, (ix - 9)
; Z80-NEXT:    adc hl, de
; Z80-NEXT:    ld (ix - 16), l
; Z80-NEXT:    ld (ix - 15), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    inc bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    ld (ix - 6), e
; Z80-NEXT:    ld (ix - 5), d
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    ld l, e
; Z80-NEXT:    ld h, d
; Z80-NEXT:    ld c, (ix + 12)
; Z80-NEXT:    ld b, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld (ix - 10), e
; Z80-NEXT:    ld (ix - 9), d
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    ld c, (ix + 16)
; Z80-NEXT:    ld b, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 22), l
; Z80-NEXT:    ld (ix - 21), h
; Z80-NEXT:    ld (ix - 18), e
; Z80-NEXT:    ld (ix - 17), d
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 24), l
; Z80-NEXT:    ld (ix - 23), h
; Z80-NEXT:    ld (ix - 20), e
; Z80-NEXT:    ld (ix - 19), d
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 26), l
; Z80-NEXT:    ld (ix - 25), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 26)
; Z80-NEXT:    ld h, (ix - 25)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 28), l
; Z80-NEXT:    ld (ix - 27), h
; Z80-NEXT:    ld (ix - 26), e
; Z80-NEXT:    ld (ix - 25), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 16)
; Z80-NEXT:    ld h, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 30), l
; Z80-NEXT:    ld (ix - 29), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 30)
; Z80-NEXT:    ld h, (ix - 29)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 32), l
; Z80-NEXT:    ld (ix - 31), h
; Z80-NEXT:    ld (ix - 30), e
; Z80-NEXT:    ld (ix - 29), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld e, (ix - 22)
; Z80-NEXT:    ld d, (ix - 21)
; Z80-NEXT:    add iy, de
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    ld e, (ix - 18)
; Z80-NEXT:    ld d, (ix - 17)
; Z80-NEXT:    adc hl, de
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    inc de
; Z80-NEXT:    ld c, (ix - 24)
; Z80-NEXT:    ld b, (ix - 23)
; Z80-NEXT:    add iy, bc
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    ld c, (ix - 20)
; Z80-NEXT:    ld b, (ix - 19)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    inc bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld c, (ix - 28)
; Z80-NEXT:    ld b, (ix - 27)
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    ld c, (ix - 26)
; Z80-NEXT:    ld b, (ix - 25)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    inc bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld c, (ix - 32)
; Z80-NEXT:    ld b, (ix - 31)
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    ld c, (ix - 30)
; Z80-NEXT:    ld b, (ix - 29)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    inc bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld c, (ix - 8)
; Z80-NEXT:    ld b, (ix - 7)
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    ld c, (ix - 6)
; Z80-NEXT:    ld b, (ix - 5)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld (ix - 6), l
; Z80-NEXT:    ld (ix - 5), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    inc bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    ld (ix - 10), e
; Z80-NEXT:    ld (ix - 9), d
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    ld l, e
; Z80-NEXT:    ld h, d
; Z80-NEXT:    ld c, (ix + 12)
; Z80-NEXT:    ld b, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 18), l
; Z80-NEXT:    ld (ix - 17), h
; Z80-NEXT:    ld (ix - 20), e
; Z80-NEXT:    ld (ix - 19), d
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    ld l, e
; Z80-NEXT:    ld h, d
; Z80-NEXT:    ld c, (ix + 16)
; Z80-NEXT:    ld b, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 30), l
; Z80-NEXT:    ld (ix - 29), h
; Z80-NEXT:    ld (ix - 32), e
; Z80-NEXT:    ld (ix - 31), d
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 26), l
; Z80-NEXT:    ld (ix - 25), h
; Z80-NEXT:    ld (ix - 28), e
; Z80-NEXT:    ld (ix - 27), d
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 22), l
; Z80-NEXT:    ld (ix - 21), h
; Z80-NEXT:    ld (ix - 24), e
; Z80-NEXT:    ld (ix - 23), d
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    ld e, c
; Z80-NEXT:    ld d, b
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 34), l
; Z80-NEXT:    ld (ix - 33), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 34)
; Z80-NEXT:    ld h, (ix - 33)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 34), l
; Z80-NEXT:    ld (ix - 33), h
; Z80-NEXT:    ld (ix - 36), e
; Z80-NEXT:    ld (ix - 35), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 16)
; Z80-NEXT:    ld h, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 38), l
; Z80-NEXT:    ld (ix - 37), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 38)
; Z80-NEXT:    ld h, (ix - 37)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 38), l
; Z80-NEXT:    ld (ix - 37), h
; Z80-NEXT:    ld (ix - 40), e
; Z80-NEXT:    ld (ix - 39), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 42), l
; Z80-NEXT:    ld (ix - 41), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 42)
; Z80-NEXT:    ld h, (ix - 41)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 42), l
; Z80-NEXT:    ld (ix - 41), h
; Z80-NEXT:    ld (ix - 44), e
; Z80-NEXT:    ld (ix - 43), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ld h, (ix - 17)
; Z80-NEXT:    ld e, (ix - 20)
; Z80-NEXT:    ld d, (ix - 19)
; Z80-NEXT:    ld c, (ix - 30)
; Z80-NEXT:    ld b, (ix - 29)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 32)
; Z80-NEXT:    ld h, (ix - 31)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 26)
; Z80-NEXT:    ld b, (ix - 25)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 28)
; Z80-NEXT:    ld h, (ix - 27)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 22)
; Z80-NEXT:    ld b, (ix - 21)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 24)
; Z80-NEXT:    ld h, (ix - 23)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 34)
; Z80-NEXT:    ld b, (ix - 33)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 36)
; Z80-NEXT:    ld h, (ix - 35)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 38)
; Z80-NEXT:    ld b, (ix - 37)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 40)
; Z80-NEXT:    ld h, (ix - 39)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 42)
; Z80-NEXT:    ld b, (ix - 41)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 44)
; Z80-NEXT:    ld h, (ix - 43)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 8)
; Z80-NEXT:    ld b, (ix - 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    ld (ix - 10), e
; Z80-NEXT:    ld (ix - 9), d
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 16)
; Z80-NEXT:    ld h, (ix - 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 12)
; Z80-NEXT:    ld h, (ix - 11)
; Z80-NEXT:    ld e, (ix - 14)
; Z80-NEXT:    ld d, (ix - 13)
; Z80-NEXT:    ld c, (ix - 4)
; Z80-NEXT:    ld b, (ix - 3)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld (ix - 12), e
; Z80-NEXT:    ld (ix - 11), d
; Z80-NEXT:    ld (ix - 14), c
; Z80-NEXT:    ld (ix - 13), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 16), l
; Z80-NEXT:    ld (ix - 15), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 6)
; Z80-NEXT:    ld d, (ix - 5)
; Z80-NEXT:    ld c, (ix - 8)
; Z80-NEXT:    ld b, (ix - 7)
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 18), l
; Z80-NEXT:    ld (ix - 17), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ld h, (ix - 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 16)
; Z80-NEXT:    ld h, (ix - 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    ld e, (ix - 12)
; Z80-NEXT:    ld d, (ix - 11)
; Z80-NEXT:    ld c, (ix - 14)
; Z80-NEXT:    ld b, (ix - 13)
; Z80-NEXT:    call __llor
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld (ix - 12), e
; Z80-NEXT:    ld (ix - 11), d
; Z80-NEXT:    ld (ix - 14), c
; Z80-NEXT:    ld (ix - 13), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 16), l
; Z80-NEXT:    ld (ix - 15), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 6)
; Z80-NEXT:    ld d, (ix - 5)
; Z80-NEXT:    ld c, (ix - 8)
; Z80-NEXT:    ld b, (ix - 7)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    ld e, (ix - 12)
; Z80-NEXT:    ld d, (ix - 11)
; Z80-NEXT:    ld c, (ix - 14)
; Z80-NEXT:    ld b, (ix - 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 16)
; Z80-NEXT:    ld h, (ix - 15)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: umul.fix.i64.32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 44
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 12)
; EZ80-CODE16-NEXT:    ld iy, (ix + 14)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 12), hl
; EZ80-CODE16-NEXT:    ld (ix - 14), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    ld bc, (ix + 12)
; EZ80-CODE16-NEXT:    ld iy, (ix + 14)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld (ix - 2), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 16)
; EZ80-CODE16-NEXT:    ld iy, (ix + 18)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 8), hl
; EZ80-CODE16-NEXT:    ld (ix - 6), de
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 14)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 10), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 16), hl
; EZ80-CODE16-NEXT:    ld (ix - 10), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    ld de, (ix - 8)
; EZ80-CODE16-NEXT:    add hl, de
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld bc, (ix - 6)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    inc iy
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld de, (ix - 16)
; EZ80-CODE16-NEXT:    add hl, de
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    ld de, (ix - 10)
; EZ80-CODE16-NEXT:    adc hl, de
; EZ80-CODE16-NEXT:    ld (ix - 16), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld (ix - 8), hl
; EZ80-CODE16-NEXT:    ld (ix - 6), de
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    ld l, e
; EZ80-CODE16-NEXT:    ld h, d
; EZ80-CODE16-NEXT:    ld bc, (ix + 12)
; EZ80-CODE16-NEXT:    ld iy, (ix + 14)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld (ix - 10), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    ld bc, (ix + 16)
; EZ80-CODE16-NEXT:    ld iy, (ix + 18)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 22), hl
; EZ80-CODE16-NEXT:    ld (ix - 18), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 24), hl
; EZ80-CODE16-NEXT:    ld (ix - 20), de
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 14)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 26), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 26)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 28), hl
; EZ80-CODE16-NEXT:    ld (ix - 26), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 16)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 30), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 30)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 32), hl
; EZ80-CODE16-NEXT:    ld (ix - 30), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld iy, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 22)
; EZ80-CODE16-NEXT:    add iy, de
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    ld de, (ix - 18)
; EZ80-CODE16-NEXT:    adc hl, de
; EZ80-CODE16-NEXT:    ld (ix - 10), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    inc de
; EZ80-CODE16-NEXT:    ld bc, (ix - 24)
; EZ80-CODE16-NEXT:    add iy, bc
; EZ80-CODE16-NEXT:    ld (ix - 2), iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    ld bc, (ix - 20)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 10), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld bc, (ix - 28)
; EZ80-CODE16-NEXT:    add hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    ld bc, (ix - 26)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 10), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld bc, (ix - 32)
; EZ80-CODE16-NEXT:    add hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    ld bc, (ix - 30)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 10), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld bc, (ix - 8)
; EZ80-CODE16-NEXT:    add hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    ld bc, (ix - 6)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 6), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld (ix - 8), hl
; EZ80-CODE16-NEXT:    ld (ix - 10), de
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    ld l, e
; EZ80-CODE16-NEXT:    ld h, d
; EZ80-CODE16-NEXT:    ld bc, (ix + 12)
; EZ80-CODE16-NEXT:    ld iy, (ix + 14)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 18), hl
; EZ80-CODE16-NEXT:    ld (ix - 20), de
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    ld l, e
; EZ80-CODE16-NEXT:    ld h, d
; EZ80-CODE16-NEXT:    ld bc, (ix + 16)
; EZ80-CODE16-NEXT:    ld iy, (ix + 18)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 30), hl
; EZ80-CODE16-NEXT:    ld (ix - 32), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 26), hl
; EZ80-CODE16-NEXT:    ld (ix - 28), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 22), hl
; EZ80-CODE16-NEXT:    ld (ix - 24), de
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 14)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    ld e, c
; EZ80-CODE16-NEXT:    ld d, b
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 34), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 34)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 34), hl
; EZ80-CODE16-NEXT:    ld (ix - 36), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 16)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 38), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 38)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 38), hl
; EZ80-CODE16-NEXT:    ld (ix - 40), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 42), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 42)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 42), hl
; EZ80-CODE16-NEXT:    ld (ix - 44), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 18)
; EZ80-CODE16-NEXT:    ld de, (ix - 20)
; EZ80-CODE16-NEXT:    ld bc, (ix - 30)
; EZ80-CODE16-NEXT:    ld iy, (ix - 32)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 26)
; EZ80-CODE16-NEXT:    ld iy, (ix - 28)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 22)
; EZ80-CODE16-NEXT:    ld iy, (ix - 24)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 34)
; EZ80-CODE16-NEXT:    ld iy, (ix - 36)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 38)
; EZ80-CODE16-NEXT:    ld iy, (ix - 40)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 42)
; EZ80-CODE16-NEXT:    ld iy, (ix - 44)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 8)
; EZ80-CODE16-NEXT:    ld iy, (ix - 10)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld (ix - 8), hl
; EZ80-CODE16-NEXT:    ld (ix - 10), de
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 16)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 12)
; EZ80-CODE16-NEXT:    ld de, (ix - 14)
; EZ80-CODE16-NEXT:    ld bc, (ix - 4)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld (ix - 12), de
; EZ80-CODE16-NEXT:    ld (ix - 14), bc
; EZ80-CODE16-NEXT:    ld (ix - 16), iy
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 6)
; EZ80-CODE16-NEXT:    ld bc, (ix - 8)
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 18), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 16)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    ld de, (ix - 12)
; EZ80-CODE16-NEXT:    ld bc, (ix - 14)
; EZ80-CODE16-NEXT:    call __llor
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld (ix - 12), de
; EZ80-CODE16-NEXT:    ld (ix - 14), bc
; EZ80-CODE16-NEXT:    ld (ix - 16), iy
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 6)
; EZ80-CODE16-NEXT:    ld bc, (ix - 8)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    ld de, (ix - 12)
; EZ80-CODE16-NEXT:    ld bc, (ix - 14)
; EZ80-CODE16-NEXT:    ld iy, (ix - 16)
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: umul.fix.i64.32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, -170
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld de, (ix + 12)
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    ld iyl, e
; EZ80-NEXT:    ld iyh, d
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld de, (ix + 21)
; EZ80-NEXT:    ld c, e
; EZ80-NEXT:    ld b, d
; EZ80-NEXT:    ld (ix - 117), bc
; EZ80-NEXT:    ld bc, (ix + 9)
; EZ80-NEXT:    ld l, c
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld (ix - 99), de
; EZ80-NEXT:    ld (ix - 96), bc
; EZ80-NEXT:    ld.sis hl, (ix - 95)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -136
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 18)
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    ld (ix - 105), a
; EZ80-NEXT:    ld (ix - 93), hl
; EZ80-NEXT:    ld.sis hl, (ix - 92)
; EZ80-NEXT:    ld (ix - 124), hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ; kill: def $e killed $e killed $ude
; EZ80-NEXT:    ld bc, (ix + 15)
; EZ80-NEXT:    ld a, (ix - 105) ; 1-byte Folded Reload
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 127), hl
; EZ80-NEXT:    ; kill: def $e killed $e def $ude
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -130
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ld (ix - 90), hl
; EZ80-NEXT:    ld.sis hl, (ix - 89)
; EZ80-NEXT:    ld a, iyl
; EZ80-NEXT:    ld (ix - 114), a
; EZ80-NEXT:    ld (ix - 87), hl
; EZ80-NEXT:    ld (ix - 85), a
; EZ80-NEXT:    ld hl, (ix - 87)
; EZ80-NEXT:    ld e, iyh
; EZ80-NEXT:    ld (ix - 111), e
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (ix + 15)
; EZ80-NEXT:    ld d, (ix - 105)
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 108), hl
; EZ80-NEXT:    ld (ix - 102), e ; 1-byte Folded Spill
; EZ80-NEXT:    ld hl, (ix + 18)
; EZ80-NEXT:    ld (ix - 84), hl
; EZ80-NEXT:    ld.sis bc, (ix - 83)
; EZ80-NEXT:    ld hl, (ix - 117)
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    ld (ix - 120), a
; EZ80-NEXT:    ld (ix - 81), bc
; EZ80-NEXT:    ld (ix - 79), a
; EZ80-NEXT:    ld bc, (ix - 81)
; EZ80-NEXT:    ld a, h
; EZ80-NEXT:    ld (ix - 121), a
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld iy, (ix - 99)
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -139
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -133
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld l, d
; EZ80-NEXT:    ld (ix - 117), hl
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    lea de, iy
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld bc, -142
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld bc, -145
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    ld iy, (ix - 108)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -139
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld a, (ix - 102) ; 1-byte Folded Reload
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -133
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld l, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    adc a, l
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    inc de
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -142
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (ix - 108), iy
; EZ80-NEXT:    ld de, -145
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    push af
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld l, (iy)
; EZ80-NEXT:    adc a, l
; EZ80-NEXT:    ld h, a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -133
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    xor a, a
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -145
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -142
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld l, 0
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    ld iyl, e
; EZ80-NEXT:    ld iyh, d
; EZ80-NEXT:    ld (ix - 78), hl
; EZ80-NEXT:    ld.sis (ix - 77), iy
; EZ80-NEXT:    ld bc, -154
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), iy
; EZ80-NEXT:    ld hl, (ix - 78)
; EZ80-NEXT:    ld (ix - 75), de
; EZ80-NEXT:    ld e, (ix - 73)
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (ix + 15)
; EZ80-NEXT:    ld a, (ix - 105) ; 1-byte Folded Reload
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 102), hl
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -157
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ld (ix - 72), hl
; EZ80-NEXT:    ld.sis hl, (ix - 71)
; EZ80-NEXT:    ld (ix - 69), hl
; EZ80-NEXT:    ld a, (ix - 114)
; EZ80-NEXT:    ld (ix - 67), a
; EZ80-NEXT:    ld hl, (ix - 69)
; EZ80-NEXT:    ld de, (ix + 18)
; EZ80-NEXT:    ld (ix - 66), de
; EZ80-NEXT:    ld.sis de, (ix - 65)
; EZ80-NEXT:    ld (ix - 63), de
; EZ80-NEXT:    ld a, (ix - 120)
; EZ80-NEXT:    ld (ix - 61), a
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (ix - 63)
; EZ80-NEXT:    ld e, (ix - 111) ; 1-byte Folded Reload
; EZ80-NEXT:    ld a, (ix - 121) ; 1-byte Folded Reload
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -161
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -158
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld l, 0
; EZ80-NEXT:    ld (ix - 60), hl
; EZ80-NEXT:    ld.sis (ix - 59), iy
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (ix - 60)
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    ld (ix - 57), iy
; EZ80-NEXT:    ld a, (ix - 55)
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix - 99)
; EZ80-NEXT:    ; kill: def $e killed $e killed $ude
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -165
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -162
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 12)
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -136
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 54), de
; EZ80-NEXT:    ld (ix - 52), a
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (ix - 54)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -139
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld a, h
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ld bc, -136
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), de
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld hl, (ix - 117)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld bc, -168
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    dec bc
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    ld hl, (ix + 21)
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    ld de, (ix - 124)
; EZ80-NEXT:    ld (ix - 51), de
; EZ80-NEXT:    ld (ix - 49), a
; EZ80-NEXT:    ld de, (ix - 51)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -148
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld a, h
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -151
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, 0
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix - 99)
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld (ix - 124), hl
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld bc, -170
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    ld iy, (ix - 102)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -161
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -157
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    dec bc
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld l, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    adc a, l
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    inc de
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -165
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -162
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld l, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    adc a, l
; EZ80-NEXT:    ld (ix - 102), a ; 1-byte Folded Spill
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    xor a, a
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -157
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -168
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld a, (ix - 102) ; 1-byte Folded Reload
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -169
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld l, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    adc a, l
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld d, a
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -157
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    xor a, a
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 102), hl
; EZ80-NEXT:    ld bc, (ix - 124)
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -170
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld l, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    adc a, l
; EZ80-NEXT:    ld d, a
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    ld hl, (ix - 102)
; EZ80-NEXT:    xor a, a
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -157
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -145
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (ix - 102), iy
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld bc, -142
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    push af
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld l, (iy)
; EZ80-NEXT:    adc a, l
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    ld (ix - 124), hl
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -157
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    xor a, a
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -142
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -145
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (ix + 15)
; EZ80-NEXT:    ld a, (ix - 105) ; 1-byte Folded Reload
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 105), hl
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -157
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld l, 0
; EZ80-NEXT:    ld (ix - 48), hl
; EZ80-NEXT:    ld bc, -154
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld iy, (hl)
; EZ80-NEXT:    ld.sis (ix - 47), iy
; EZ80-NEXT:    ld hl, (ix - 48)
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    ld (ix - 45), de
; EZ80-NEXT:    ld e, (ix - 43)
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (ix + 18)
; EZ80-NEXT:    ld (ix - 42), bc
; EZ80-NEXT:    ld.sis bc, (ix - 41)
; EZ80-NEXT:    ld (ix - 39), bc
; EZ80-NEXT:    ld a, (ix - 120)
; EZ80-NEXT:    ld (ix - 37), a
; EZ80-NEXT:    ld bc, (ix - 39)
; EZ80-NEXT:    ld a, (ix - 121) ; 1-byte Folded Reload
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 120), hl
; EZ80-NEXT:    ld (ix - 121), e ; 1-byte Folded Spill
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ld (ix - 36), hl
; EZ80-NEXT:    ld.sis hl, (ix - 35)
; EZ80-NEXT:    ld (ix - 33), hl
; EZ80-NEXT:    ld a, (ix - 114)
; EZ80-NEXT:    ld (ix - 31), a
; EZ80-NEXT:    ld hl, (ix - 33)
; EZ80-NEXT:    ld e, 0
; EZ80-NEXT:    ld (ix - 30), de
; EZ80-NEXT:    ld.sis (ix - 29), iy
; EZ80-NEXT:    ld bc, (ix - 30)
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    ld (ix - 27), iy
; EZ80-NEXT:    ld a, (ix - 25)
; EZ80-NEXT:    ld e, (ix - 111) ; 1-byte Folded Reload
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -154
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -158
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix - 99)
; EZ80-NEXT:    ; kill: def $e killed $e killed $ude
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    xor a, a
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 111), hl
; EZ80-NEXT:    ld (ix - 114), e ; 1-byte Folded Spill
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld hl, (ix - 117)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    lea de, iy
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld (ix - 117), hl
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld bc, -161
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -151
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -148
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -139
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld bc, -136
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld de, (iy)
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld bc, -136
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld bc, -139
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix - 99)
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld d, e
; EZ80-NEXT:    ld hl, (ix - 105)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -157
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld e, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 120)
; EZ80-NEXT:    ld a, (ix - 121) ; 1-byte Folded Reload
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -154
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -158
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld bc, (ix - 111)
; EZ80-NEXT:    ld a, (ix - 114) ; 1-byte Folded Reload
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld bc, (ix - 117)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -161
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -136
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -139
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld de, -142
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld bc, (iy)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -145
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld h, e
; EZ80-NEXT:    ld (ix - 99), hl
; EZ80-NEXT:    ld bc, (ix - 108)
; EZ80-NEXT:    ld l, c
; EZ80-NEXT:    ld h, b
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -130
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 24), de
; EZ80-NEXT:    ld.sis (ix - 23), hl
; EZ80-NEXT:    ld de, (ix - 24)
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld (ix - 21), bc
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld de, -133
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld bc, (hl)
; EZ80-NEXT:    ld c, (ix - 19)
; EZ80-NEXT:    ld hl, 32
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 127)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld (ix - 111), hl
; EZ80-NEXT:    ld (ix - 114), de
; EZ80-NEXT:    ld (ix - 117), bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld (ix - 105), iy
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld d, iyh
; EZ80-NEXT:    ld (ix - 108), de
; EZ80-NEXT:    ld hl, (ix - 124)
; EZ80-NEXT:    ld (ix - 18), hl
; EZ80-NEXT:    ld.sis (ix - 17), de
; EZ80-NEXT:    ld de, (ix - 18)
; EZ80-NEXT:    ld (ix - 15), iy
; EZ80-NEXT:    ld bc, (ix - 99)
; EZ80-NEXT:    ld c, (ix - 13)
; EZ80-NEXT:    ld (ix - 99), bc
; EZ80-NEXT:    ld hl, 32
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 102)
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 111)
; EZ80-NEXT:    ld de, (ix - 114)
; EZ80-NEXT:    ld bc, (ix - 117)
; EZ80-NEXT:    call __llor
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld (ix - 111), de
; EZ80-NEXT:    ld (ix - 114), bc
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld hl, (ix - 124)
; EZ80-NEXT:    ld (ix - 12), hl
; EZ80-NEXT:    ld hl, (ix - 108)
; EZ80-NEXT:    ld.sis (ix - 11), hl
; EZ80-NEXT:    ld de, (ix - 12)
; EZ80-NEXT:    ld hl, (ix - 105)
; EZ80-NEXT:    ld (ix - 9), hl
; EZ80-NEXT:    ld bc, (ix - 99)
; EZ80-NEXT:    ld c, (ix - 7)
; EZ80-NEXT:    ld hl, 32
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 102)
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld de, (ix - 111)
; EZ80-NEXT:    ld bc, (ix - 114)
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i64 @llvm.umul.fix.i64(i64 %0, i64 %1, i32 32)
  ret i64 %3
}

declare i8 @llvm.smul.fix.sat.i8(i8, i8, i32 immarg)
define i8 @smul.fix.sat.i8.7(i8, i8) {
; Z80-LABEL: smul.fix.sat.i8.7:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld c, (iy + 2)
; Z80-NEXT:    ld d, (iy + 4)
; Z80-NEXT:    ld e, 7
; Z80-NEXT:    ld a, c
; Z80-NEXT:    rlc a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld h, a
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld a, d
; Z80-NEXT:    rlc a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld b, a
; Z80-NEXT:    ld c, d
; Z80-NEXT:    call __smulu
; Z80-NEXT:    ld c, e
; Z80-NEXT:    call __sshrs
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    ld bc, -32768
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld bc, 32641
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    jr nc, BB115_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld de, -128
; Z80-NEXT:  BB115_2:
; Z80-NEXT:    ld l, e
; Z80-NEXT:    ld h, d
; Z80-NEXT:    ld bc, -32768
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld bc, -32641
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    jr c, BB115_4
; Z80-NEXT:  ; %bb.3:
; Z80-NEXT:    ld de, 127
; Z80-NEXT:  BB115_4:
; Z80-NEXT:    ld a, e
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: smul.fix.sat.i8.7:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld c, (iy + 2)
; EZ80-CODE16-NEXT:    ld d, (iy + 4)
; EZ80-CODE16-NEXT:    ld e, 7
; EZ80-CODE16-NEXT:    ld a, c
; EZ80-CODE16-NEXT:    rlc a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld h, a
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld a, d
; EZ80-CODE16-NEXT:    rlc a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld b, a
; EZ80-CODE16-NEXT:    ld c, d
; EZ80-CODE16-NEXT:    call __smulu
; EZ80-CODE16-NEXT:    ld c, e
; EZ80-CODE16-NEXT:    call __sshrs
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    ld bc, -32768
; EZ80-CODE16-NEXT:    add hl, bc
; EZ80-CODE16-NEXT:    ld bc, 32641
; EZ80-CODE16-NEXT:    or a, a
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    jr nc, BB115_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld de, -128
; EZ80-CODE16-NEXT:  BB115_2:
; EZ80-CODE16-NEXT:    ld l, e
; EZ80-CODE16-NEXT:    ld h, d
; EZ80-CODE16-NEXT:    ld bc, -32768
; EZ80-CODE16-NEXT:    add hl, bc
; EZ80-CODE16-NEXT:    ld bc, -32641
; EZ80-CODE16-NEXT:    or a, a
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    jr c, BB115_4
; EZ80-CODE16-NEXT:  ; %bb.3:
; EZ80-CODE16-NEXT:    ld de, 127
; EZ80-CODE16-NEXT:  BB115_4:
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: smul.fix.sat.i8.7:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld c, (iy + 3)
; EZ80-NEXT:    ld d, (iy + 6)
; EZ80-NEXT:    ld e, 7
; EZ80-NEXT:    ld a, c
; EZ80-NEXT:    rlc a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ld h, a
; EZ80-NEXT:    ld l, c
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    rlc a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ld b, a
; EZ80-NEXT:    ld c, d
; EZ80-NEXT:    call __smulu
; EZ80-NEXT:    ld c, e
; EZ80-NEXT:    call __sshrs
; EZ80-NEXT:    ld e, l
; EZ80-NEXT:    ld d, h
; EZ80-NEXT:    ld.sis bc, -32768
; EZ80-NEXT:    add.sis hl, bc
; EZ80-NEXT:    ld.sis bc, 32641
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, bc
; EZ80-NEXT:    jr nc, BB115_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld.sis de, -128
; EZ80-NEXT:  BB115_2:
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:    ld.sis bc, -32768
; EZ80-NEXT:    add.sis hl, bc
; EZ80-NEXT:    ld.sis bc, -32641
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, bc
; EZ80-NEXT:    jr c, BB115_4
; EZ80-NEXT:  ; %bb.3:
; EZ80-NEXT:    ld.sis de, 127
; EZ80-NEXT:  BB115_4:
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ret
  call i8 @llvm.smul.fix.sat.i8(i8 %0, i8 %1, i32 7)
  ret i8 %3
}
declare i16 @llvm.smul.fix.sat.i16(i16, i16, i32 immarg)
define i16 @smul.fix.sat.i16.7(i16, i16) {
; Z80-LABEL: smul.fix.sat.i16.7:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    ld c, (ix + 4)
; Z80-NEXT:    ld b, (ix + 5)
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    ld iyl, c
; Z80-NEXT:    ld iyh, b
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    ld c, (ix + 6)
; Z80-NEXT:    ld b, (ix + 7)
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld a, 7
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    call __lshrs
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ld hl, -32768
; Z80-NEXT:    ld de, -1
; Z80-NEXT:    ld (ix - 2), c
; Z80-NEXT:    ld (ix - 1), b
; Z80-NEXT:    call __lcmps
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    jp m, BB116_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr z, BB116_3
; Z80-NEXT:    jr BB116_4
; Z80-NEXT:  BB116_2:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB116_4
; Z80-NEXT:  BB116_3:
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:  BB116_4:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB116_6
; Z80-NEXT:  ; %bb.5:
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:  BB116_6:
; Z80-NEXT:    ld bc, 32767
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __lcmps
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    jp m, BB116_8
; Z80-NEXT:  ; %bb.7:
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:  BB116_8:
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: smul.fix.sat.i16.7:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld bc, (ix + 4)
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    ld iyl, c
; EZ80-CODE16-NEXT:    ld iyh, b
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    ld iy, (ix + 6)
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    ld bc, (ix + 6)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld a, 7
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    call __lshrs
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ld hl, -32768
; EZ80-CODE16-NEXT:    ld de, -1
; EZ80-CODE16-NEXT:    ld (ix - 2), bc
; EZ80-CODE16-NEXT:    call __lcmps
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    jp m, BB116_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr z, BB116_3
; EZ80-CODE16-NEXT:    jr BB116_4
; EZ80-CODE16-NEXT:  BB116_2:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB116_4
; EZ80-CODE16-NEXT:  BB116_3:
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:  BB116_4:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB116_6
; EZ80-CODE16-NEXT:  ; %bb.5:
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:  BB116_6:
; EZ80-CODE16-NEXT:    ld bc, 32767
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __lcmps
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    jp m, BB116_8
; EZ80-CODE16-NEXT:  ; %bb.7:
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:  BB116_8:
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: smul.fix.sat.i16.7:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, (ix + 6)
; EZ80-NEXT:    ld a, b
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld d, a
; EZ80-NEXT:    ld e, c
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    ld iy, (ix + 9)
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld b, a
; EZ80-NEXT:    ld c, iyl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ; kill: def $e killed $e killed $ude
; EZ80-NEXT:    ld a, iyl
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld d, 0
; EZ80-NEXT:    ld l, 7
; EZ80-NEXT:    call __lshrs
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld hl, -32768
; EZ80-NEXT:    ld e, -1
; EZ80-NEXT:    call __lcmps
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    jp m, BB116_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld c, 0
; EZ80-NEXT:    bit 0, c
; EZ80-NEXT:    jr z, BB116_3
; EZ80-NEXT:    jr BB116_4
; EZ80-NEXT:  BB116_2:
; EZ80-NEXT:    ld c, 1
; EZ80-NEXT:    bit 0, c
; EZ80-NEXT:    jr nz, BB116_4
; EZ80-NEXT:  BB116_3:
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:  BB116_4:
; EZ80-NEXT:    bit 0, c
; EZ80-NEXT:    jr nz, BB116_6
; EZ80-NEXT:  ; %bb.5:
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:  BB116_6:
; EZ80-NEXT:    ld bc, 32767
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __lcmps
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    jp m, BB116_8
; EZ80-NEXT:  ; %bb.7:
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:  BB116_8:
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld d, iyh
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i16 @llvm.smul.fix.sat.i16(i16 %0, i16 %1, i32 7)
  ret i16 %3
}
define i16 @smul.fix.sat.i16.15(i16, i16) {
; Z80-LABEL: smul.fix.sat.i16.15:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    ld c, (ix + 4)
; Z80-NEXT:    ld b, (ix + 5)
; Z80-NEXT:    ld a, 15
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    ld iyl, c
; Z80-NEXT:    ld iyh, b
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    ld c, (ix + 6)
; Z80-NEXT:    ld b, (ix + 7)
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    call __lshrs
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ld hl, -32768
; Z80-NEXT:    ld de, -1
; Z80-NEXT:    ld (ix - 2), c
; Z80-NEXT:    ld (ix - 1), b
; Z80-NEXT:    call __lcmps
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    jp m, BB117_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr z, BB117_3
; Z80-NEXT:    jr BB117_4
; Z80-NEXT:  BB117_2:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB117_4
; Z80-NEXT:  BB117_3:
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:  BB117_4:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB117_6
; Z80-NEXT:  ; %bb.5:
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:  BB117_6:
; Z80-NEXT:    ld bc, 32767
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __lcmps
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    jp m, BB117_8
; Z80-NEXT:  ; %bb.7:
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:  BB117_8:
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: smul.fix.sat.i16.15:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld bc, (ix + 4)
; EZ80-CODE16-NEXT:    ld a, 15
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    ld iyl, c
; EZ80-CODE16-NEXT:    ld iyh, b
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    ld iy, (ix + 6)
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    ld bc, (ix + 6)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    call __lshrs
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ld hl, -32768
; EZ80-CODE16-NEXT:    ld de, -1
; EZ80-CODE16-NEXT:    ld (ix - 2), bc
; EZ80-CODE16-NEXT:    call __lcmps
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    jp m, BB117_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr z, BB117_3
; EZ80-CODE16-NEXT:    jr BB117_4
; EZ80-CODE16-NEXT:  BB117_2:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB117_4
; EZ80-CODE16-NEXT:  BB117_3:
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:  BB117_4:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB117_6
; EZ80-CODE16-NEXT:  ; %bb.5:
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:  BB117_6:
; EZ80-CODE16-NEXT:    ld bc, 32767
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __lcmps
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    jp m, BB117_8
; EZ80-CODE16-NEXT:  ; %bb.7:
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:  BB117_8:
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: smul.fix.sat.i16.15:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, (ix + 6)
; EZ80-NEXT:    ld a, b
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld d, a
; EZ80-NEXT:    ld e, c
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    ld iy, (ix + 9)
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld b, a
; EZ80-NEXT:    ld c, iyl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ; kill: def $e killed $e killed $ude
; EZ80-NEXT:    ld a, iyl
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld d, 0
; EZ80-NEXT:    ld l, 15
; EZ80-NEXT:    call __lshrs
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld hl, -32768
; EZ80-NEXT:    ld e, -1
; EZ80-NEXT:    call __lcmps
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    jp m, BB117_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld c, 0
; EZ80-NEXT:    bit 0, c
; EZ80-NEXT:    jr z, BB117_3
; EZ80-NEXT:    jr BB117_4
; EZ80-NEXT:  BB117_2:
; EZ80-NEXT:    ld c, 1
; EZ80-NEXT:    bit 0, c
; EZ80-NEXT:    jr nz, BB117_4
; EZ80-NEXT:  BB117_3:
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:  BB117_4:
; EZ80-NEXT:    bit 0, c
; EZ80-NEXT:    jr nz, BB117_6
; EZ80-NEXT:  ; %bb.5:
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:  BB117_6:
; EZ80-NEXT:    ld bc, 32767
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __lcmps
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    jp m, BB117_8
; EZ80-NEXT:  ; %bb.7:
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:  BB117_8:
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld d, iyh
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i16 @llvm.smul.fix.sat.i16(i16 %0, i16 %1, i32 15)
  ret i16 %3
}
declare i32 @llvm.smul.fix.sat.i32(i32, i32, i32 immarg)
define i32 @smul.fix.sat.i32.15(i32, i32) {
; Z80-LABEL: smul.fix.sat.i32.15:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -9
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld l, e
; Z80-NEXT:    ld h, d
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 15
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    call __llshrs
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld (ix - 6), c
; Z80-NEXT:    ld (ix - 5), b
; Z80-NEXT:    push bc
; Z80-NEXT:    ld (ix - 2), e
; Z80-NEXT:    ld (ix - 1), d
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld bc, -1
; Z80-NEXT:    push bc
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    ld de, -32768
; Z80-NEXT:    call __llcmps
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 9), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 9)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    jp m, BB118_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    jr BB118_3
; Z80-NEXT:  BB118_2:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:  BB118_3:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    ld c, (ix - 6)
; Z80-NEXT:    ld b, (ix - 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    jp z, BB118_10
; Z80-NEXT:  ; %bb.4:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB118_11
; Z80-NEXT:  BB118_5:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB118_12
; Z80-NEXT:  BB118_6:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB118_8
; Z80-NEXT:  BB118_7:
; Z80-NEXT:    ld iy, -1
; Z80-NEXT:  BB118_8:
; Z80-NEXT:    ld de, 32767
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    ld e, (ix - 2)
; Z80-NEXT:    ld d, (ix - 1)
; Z80-NEXT:    call __llcmps
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 6), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld iy, 10
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld sp, iy
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    jp m, BB118_13
; Z80-NEXT:  ; %bb.9:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr z, BB118_14
; Z80-NEXT:    jr BB118_15
; Z80-NEXT:  BB118_10:
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp nz, BB118_5
; Z80-NEXT:  BB118_11:
; Z80-NEXT:    ld de, -32768
; Z80-NEXT:    ld (ix - 2), e
; Z80-NEXT:    ld (ix - 1), d
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp nz, BB118_6
; Z80-NEXT:  BB118_12:
; Z80-NEXT:    ld de, -1
; Z80-NEXT:    ld c, e
; Z80-NEXT:    ld b, d
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB118_7
; Z80-NEXT:    jp BB118_8
; Z80-NEXT:  BB118_13:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB118_15
; Z80-NEXT:  BB118_14:
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:  BB118_15:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB118_17
; Z80-NEXT:  ; %bb.16:
; Z80-NEXT:    ld de, 32767
; Z80-NEXT:    ld (ix - 2), e
; Z80-NEXT:    ld (ix - 1), d
; Z80-NEXT:  BB118_17:
; Z80-NEXT:    ld e, (ix - 2)
; Z80-NEXT:    ld d, (ix - 1)
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: smul.fix.sat.i32.15:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 9
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld iy, (ix + 6)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld l, e
; EZ80-CODE16-NEXT:    ld h, d
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 15
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    call __llshrs
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld (ix - 8), iy
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld (ix - 6), bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld (ix - 2), de
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld bc, -1
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    ld de, -32768
; EZ80-CODE16-NEXT:    call __llcmps
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 9), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 9)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    jp m, BB118_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    jr BB118_3
; EZ80-CODE16-NEXT:  BB118_2:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:  BB118_3:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    ld bc, (ix - 6)
; EZ80-CODE16-NEXT:    ld iy, (ix - 8)
; EZ80-CODE16-NEXT:    jp z, BB118_10
; EZ80-CODE16-NEXT:  ; %bb.4:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB118_11
; EZ80-CODE16-NEXT:  BB118_5:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB118_12
; EZ80-CODE16-NEXT:  BB118_6:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB118_8
; EZ80-CODE16-NEXT:  BB118_7:
; EZ80-CODE16-NEXT:    ld iy, -1
; EZ80-CODE16-NEXT:  BB118_8:
; EZ80-CODE16-NEXT:    ld de, 32767
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    ld de, (ix - 2)
; EZ80-CODE16-NEXT:    call __llcmps
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 6), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld iy, 10
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld sp, iy
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 6)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    jp m, BB118_13
; EZ80-CODE16-NEXT:  ; %bb.9:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr z, BB118_14
; EZ80-CODE16-NEXT:    jr BB118_15
; EZ80-CODE16-NEXT:  BB118_10:
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp nz, BB118_5
; EZ80-CODE16-NEXT:  BB118_11:
; EZ80-CODE16-NEXT:    ld de, -32768
; EZ80-CODE16-NEXT:    ld (ix - 2), de
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp nz, BB118_6
; EZ80-CODE16-NEXT:  BB118_12:
; EZ80-CODE16-NEXT:    ld de, -1
; EZ80-CODE16-NEXT:    ld c, e
; EZ80-CODE16-NEXT:    ld b, d
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB118_7
; EZ80-CODE16-NEXT:    jp BB118_8
; EZ80-CODE16-NEXT:  BB118_13:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB118_15
; EZ80-CODE16-NEXT:  BB118_14:
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:  BB118_15:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB118_17
; EZ80-CODE16-NEXT:  ; %bb.16:
; EZ80-CODE16-NEXT:    ld de, 32767
; EZ80-CODE16-NEXT:    ld (ix - 2), de
; EZ80-CODE16-NEXT:  BB118_17:
; EZ80-CODE16-NEXT:    ld de, (ix - 2)
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: smul.fix.sat.i32.15:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 10
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld e, (ix + 9)
; EZ80-NEXT:    ld a, (ix + 15)
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld c, e
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld hl, (ix + 12)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 15
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshrs
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld (ix - 6), bc
; EZ80-NEXT:    push bc
; EZ80-NEXT:    ld (ix - 9), de
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld (ix - 3), iy
; EZ80-NEXT:    push iy
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld de, -128
; EZ80-NEXT:    ld.sis bc, -1
; EZ80-NEXT:    call __llcmps
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 10), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 10)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    jp m, BB118_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    jr BB118_3
; EZ80-NEXT:  BB118_2:
; EZ80-NEXT:    ld a, 1
; EZ80-NEXT:  BB118_3:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    ld iy, (ix - 9)
; EZ80-NEXT:    jp z, BB118_9
; EZ80-NEXT:  ; %bb.4:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB118_10
; EZ80-NEXT:  BB118_5:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB118_7
; EZ80-NEXT:  BB118_6:
; EZ80-NEXT:    ld.sis hl, -1
; EZ80-NEXT:    ; kill: def $hl killed $hl def $uhl
; EZ80-NEXT:    ld (ix - 6), hl
; EZ80-NEXT:  BB118_7:
; EZ80-NEXT:    ld bc, -1
; EZ80-NEXT:    ld de, 127
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    push bc
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    lea de, iy
; EZ80-NEXT:    ld bc, (ix - 6)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llcmps
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 6), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 6)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    jp m, BB118_11
; EZ80-NEXT:  ; %bb.8:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr z, BB118_12
; EZ80-NEXT:    jr BB118_13
; EZ80-NEXT:  BB118_9:
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB118_5
; EZ80-NEXT:  BB118_10:
; EZ80-NEXT:    ld iy, -128
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB118_6
; EZ80-NEXT:    jp BB118_7
; EZ80-NEXT:  BB118_11:
; EZ80-NEXT:    ld a, 1
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB118_13
; EZ80-NEXT:  BB118_12:
; EZ80-NEXT:    scf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:  BB118_13:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB118_15
; EZ80-NEXT:  ; %bb.14:
; EZ80-NEXT:    ld iy, 127
; EZ80-NEXT:  BB118_15:
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i32 @llvm.smul.fix.sat.i32(i32 %0, i32 %1, i32 15)
  ret i32 %3
}
define i32 @smul.fix.sat.i32.31(i32, i32) {
; Z80-LABEL: smul.fix.sat.i32.31:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -9
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld l, e
; Z80-NEXT:    ld h, d
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 31
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    call __llshrs
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld (ix - 6), c
; Z80-NEXT:    ld (ix - 5), b
; Z80-NEXT:    push bc
; Z80-NEXT:    ld (ix - 2), e
; Z80-NEXT:    ld (ix - 1), d
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld bc, -1
; Z80-NEXT:    push bc
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    ld de, -32768
; Z80-NEXT:    call __llcmps
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 9), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 9)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    jp m, BB119_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    jr BB119_3
; Z80-NEXT:  BB119_2:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:  BB119_3:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    ld c, (ix - 6)
; Z80-NEXT:    ld b, (ix - 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    jp z, BB119_10
; Z80-NEXT:  ; %bb.4:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB119_11
; Z80-NEXT:  BB119_5:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB119_12
; Z80-NEXT:  BB119_6:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB119_8
; Z80-NEXT:  BB119_7:
; Z80-NEXT:    ld iy, -1
; Z80-NEXT:  BB119_8:
; Z80-NEXT:    ld de, 32767
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    ld e, (ix - 2)
; Z80-NEXT:    ld d, (ix - 1)
; Z80-NEXT:    call __llcmps
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 6), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld iy, 10
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld sp, iy
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    jp m, BB119_13
; Z80-NEXT:  ; %bb.9:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr z, BB119_14
; Z80-NEXT:    jr BB119_15
; Z80-NEXT:  BB119_10:
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp nz, BB119_5
; Z80-NEXT:  BB119_11:
; Z80-NEXT:    ld de, -32768
; Z80-NEXT:    ld (ix - 2), e
; Z80-NEXT:    ld (ix - 1), d
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp nz, BB119_6
; Z80-NEXT:  BB119_12:
; Z80-NEXT:    ld de, -1
; Z80-NEXT:    ld c, e
; Z80-NEXT:    ld b, d
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB119_7
; Z80-NEXT:    jp BB119_8
; Z80-NEXT:  BB119_13:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB119_15
; Z80-NEXT:  BB119_14:
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:  BB119_15:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB119_17
; Z80-NEXT:  ; %bb.16:
; Z80-NEXT:    ld de, 32767
; Z80-NEXT:    ld (ix - 2), e
; Z80-NEXT:    ld (ix - 1), d
; Z80-NEXT:  BB119_17:
; Z80-NEXT:    ld e, (ix - 2)
; Z80-NEXT:    ld d, (ix - 1)
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: smul.fix.sat.i32.31:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 9
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld iy, (ix + 6)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld l, e
; EZ80-CODE16-NEXT:    ld h, d
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 31
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    call __llshrs
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld (ix - 8), iy
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld (ix - 6), bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld (ix - 2), de
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld bc, -1
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    ld de, -32768
; EZ80-CODE16-NEXT:    call __llcmps
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 9), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 9)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    jp m, BB119_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    jr BB119_3
; EZ80-CODE16-NEXT:  BB119_2:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:  BB119_3:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    ld bc, (ix - 6)
; EZ80-CODE16-NEXT:    ld iy, (ix - 8)
; EZ80-CODE16-NEXT:    jp z, BB119_10
; EZ80-CODE16-NEXT:  ; %bb.4:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB119_11
; EZ80-CODE16-NEXT:  BB119_5:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB119_12
; EZ80-CODE16-NEXT:  BB119_6:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB119_8
; EZ80-CODE16-NEXT:  BB119_7:
; EZ80-CODE16-NEXT:    ld iy, -1
; EZ80-CODE16-NEXT:  BB119_8:
; EZ80-CODE16-NEXT:    ld de, 32767
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    ld de, (ix - 2)
; EZ80-CODE16-NEXT:    call __llcmps
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 6), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld iy, 10
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld sp, iy
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 6)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    jp m, BB119_13
; EZ80-CODE16-NEXT:  ; %bb.9:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr z, BB119_14
; EZ80-CODE16-NEXT:    jr BB119_15
; EZ80-CODE16-NEXT:  BB119_10:
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp nz, BB119_5
; EZ80-CODE16-NEXT:  BB119_11:
; EZ80-CODE16-NEXT:    ld de, -32768
; EZ80-CODE16-NEXT:    ld (ix - 2), de
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp nz, BB119_6
; EZ80-CODE16-NEXT:  BB119_12:
; EZ80-CODE16-NEXT:    ld de, -1
; EZ80-CODE16-NEXT:    ld c, e
; EZ80-CODE16-NEXT:    ld b, d
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB119_7
; EZ80-CODE16-NEXT:    jp BB119_8
; EZ80-CODE16-NEXT:  BB119_13:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB119_15
; EZ80-CODE16-NEXT:  BB119_14:
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:  BB119_15:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB119_17
; EZ80-CODE16-NEXT:  ; %bb.16:
; EZ80-CODE16-NEXT:    ld de, 32767
; EZ80-CODE16-NEXT:    ld (ix - 2), de
; EZ80-CODE16-NEXT:  BB119_17:
; EZ80-CODE16-NEXT:    ld de, (ix - 2)
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: smul.fix.sat.i32.31:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 10
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld e, (ix + 9)
; EZ80-NEXT:    ld a, (ix + 15)
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld c, e
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld hl, (ix + 12)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 31
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshrs
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld (ix - 6), bc
; EZ80-NEXT:    push bc
; EZ80-NEXT:    ld (ix - 9), de
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld (ix - 3), iy
; EZ80-NEXT:    push iy
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld de, -128
; EZ80-NEXT:    ld.sis bc, -1
; EZ80-NEXT:    call __llcmps
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 10), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 10)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    jp m, BB119_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    jr BB119_3
; EZ80-NEXT:  BB119_2:
; EZ80-NEXT:    ld a, 1
; EZ80-NEXT:  BB119_3:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    ld iy, (ix - 9)
; EZ80-NEXT:    jp z, BB119_9
; EZ80-NEXT:  ; %bb.4:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB119_10
; EZ80-NEXT:  BB119_5:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB119_7
; EZ80-NEXT:  BB119_6:
; EZ80-NEXT:    ld.sis hl, -1
; EZ80-NEXT:    ; kill: def $hl killed $hl def $uhl
; EZ80-NEXT:    ld (ix - 6), hl
; EZ80-NEXT:  BB119_7:
; EZ80-NEXT:    ld bc, -1
; EZ80-NEXT:    ld de, 127
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    push bc
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    lea de, iy
; EZ80-NEXT:    ld bc, (ix - 6)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llcmps
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 6), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 6)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    jp m, BB119_11
; EZ80-NEXT:  ; %bb.8:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr z, BB119_12
; EZ80-NEXT:    jr BB119_13
; EZ80-NEXT:  BB119_9:
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB119_5
; EZ80-NEXT:  BB119_10:
; EZ80-NEXT:    ld iy, -128
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB119_6
; EZ80-NEXT:    jp BB119_7
; EZ80-NEXT:  BB119_11:
; EZ80-NEXT:    ld a, 1
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB119_13
; EZ80-NEXT:  BB119_12:
; EZ80-NEXT:    scf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:  BB119_13:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB119_15
; EZ80-NEXT:  ; %bb.14:
; EZ80-NEXT:    ld iy, 127
; EZ80-NEXT:  BB119_15:
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i32 @llvm.smul.fix.sat.i32(i32 %0, i32 %1, i32 31)
  ret i32 %3
}
declare i64 @llvm.smul.fix.sat.i64(i64, i64, i32 immarg)
define i64 @smul.fix.sat.i64.31(i64, i64) {
; Z80-LABEL: smul.fix.sat.i64.31:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -44
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld a, 31
; Z80-NEXT:    call __lshrs
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    ld (ix - 10), e
; Z80-NEXT:    ld (ix - 9), d
; Z80-NEXT:    ld c, (ix + 16)
; Z80-NEXT:    ld b, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lshrs
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld (ix - 6), e
; Z80-NEXT:    ld (ix - 5), d
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 12)
; Z80-NEXT:    ld b, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 20), l
; Z80-NEXT:    ld (ix - 19), h
; Z80-NEXT:    ld (ix - 22), e
; Z80-NEXT:    ld (ix - 21), d
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    ld c, (ix + 12)
; Z80-NEXT:    ld b, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 12), l
; Z80-NEXT:    ld (ix - 11), h
; Z80-NEXT:    ld (ix - 2), e
; Z80-NEXT:    ld (ix - 1), d
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 16)
; Z80-NEXT:    ld b, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 16), l
; Z80-NEXT:    ld (ix - 15), h
; Z80-NEXT:    ld (ix - 14), e
; Z80-NEXT:    ld (ix - 13), d
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 18), l
; Z80-NEXT:    ld (ix - 17), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ld h, (ix - 17)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 24), l
; Z80-NEXT:    ld (ix - 23), h
; Z80-NEXT:    ld (ix - 18), e
; Z80-NEXT:    ld (ix - 17), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix - 12)
; Z80-NEXT:    ld h, (ix - 11)
; Z80-NEXT:    ld e, (ix - 16)
; Z80-NEXT:    ld d, (ix - 15)
; Z80-NEXT:    add hl, de
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld c, (ix - 14)
; Z80-NEXT:    ld b, (ix - 13)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    inc iy
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, (ix - 24)
; Z80-NEXT:    ld d, (ix - 23)
; Z80-NEXT:    add hl, de
; Z80-NEXT:    ld (ix - 12), l
; Z80-NEXT:    ld (ix - 11), h
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    ld e, (ix - 18)
; Z80-NEXT:    ld d, (ix - 17)
; Z80-NEXT:    adc hl, de
; Z80-NEXT:    ld (ix - 24), l
; Z80-NEXT:    ld (ix - 23), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    inc bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld (ix - 16), l
; Z80-NEXT:    ld (ix - 15), h
; Z80-NEXT:    ld (ix - 14), e
; Z80-NEXT:    ld (ix - 13), d
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    ld e, (ix - 10)
; Z80-NEXT:    ld d, (ix - 9)
; Z80-NEXT:    ld c, (ix + 12)
; Z80-NEXT:    ld b, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld (ix - 18), e
; Z80-NEXT:    ld (ix - 17), d
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    ld c, (ix + 16)
; Z80-NEXT:    ld b, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 30), l
; Z80-NEXT:    ld (ix - 29), h
; Z80-NEXT:    ld (ix - 26), e
; Z80-NEXT:    ld (ix - 25), d
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix - 4)
; Z80-NEXT:    ld b, (ix - 3)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 32), l
; Z80-NEXT:    ld (ix - 31), h
; Z80-NEXT:    ld (ix - 28), e
; Z80-NEXT:    ld (ix - 27), d
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 34), l
; Z80-NEXT:    ld (ix - 33), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 34)
; Z80-NEXT:    ld h, (ix - 33)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 36), l
; Z80-NEXT:    ld (ix - 35), h
; Z80-NEXT:    ld (ix - 34), e
; Z80-NEXT:    ld (ix - 33), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 16)
; Z80-NEXT:    ld h, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 38), l
; Z80-NEXT:    ld (ix - 37), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 38)
; Z80-NEXT:    ld h, (ix - 37)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 40), l
; Z80-NEXT:    ld (ix - 39), h
; Z80-NEXT:    ld (ix - 38), e
; Z80-NEXT:    ld (ix - 37), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld e, (ix - 30)
; Z80-NEXT:    ld d, (ix - 29)
; Z80-NEXT:    add iy, de
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ld h, (ix - 17)
; Z80-NEXT:    ld e, (ix - 26)
; Z80-NEXT:    ld d, (ix - 25)
; Z80-NEXT:    adc hl, de
; Z80-NEXT:    ld (ix - 18), l
; Z80-NEXT:    ld (ix - 17), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    inc de
; Z80-NEXT:    ld c, (ix - 32)
; Z80-NEXT:    ld b, (ix - 31)
; Z80-NEXT:    add iy, bc
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ld h, (ix - 17)
; Z80-NEXT:    ld c, (ix - 28)
; Z80-NEXT:    ld b, (ix - 27)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld (ix - 18), l
; Z80-NEXT:    ld (ix - 17), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    inc bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld c, (ix - 36)
; Z80-NEXT:    ld b, (ix - 35)
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ld h, (ix - 17)
; Z80-NEXT:    ld c, (ix - 34)
; Z80-NEXT:    ld b, (ix - 33)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld (ix - 18), l
; Z80-NEXT:    ld (ix - 17), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    inc bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld c, (ix - 40)
; Z80-NEXT:    ld b, (ix - 39)
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ld h, (ix - 17)
; Z80-NEXT:    ld c, (ix - 38)
; Z80-NEXT:    ld b, (ix - 37)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld (ix - 18), l
; Z80-NEXT:    ld (ix - 17), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    inc bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld c, (ix - 16)
; Z80-NEXT:    ld b, (ix - 15)
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ld h, (ix - 17)
; Z80-NEXT:    ld c, (ix - 14)
; Z80-NEXT:    ld b, (ix - 13)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld (ix - 14), l
; Z80-NEXT:    ld (ix - 13), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    inc bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld (ix - 16), l
; Z80-NEXT:    ld (ix - 15), h
; Z80-NEXT:    ld (ix - 18), e
; Z80-NEXT:    ld (ix - 17), d
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    ld e, (ix - 10)
; Z80-NEXT:    ld d, (ix - 9)
; Z80-NEXT:    ld c, (ix + 12)
; Z80-NEXT:    ld b, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 26), l
; Z80-NEXT:    ld (ix - 25), h
; Z80-NEXT:    ld (ix - 28), e
; Z80-NEXT:    ld (ix - 27), d
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    ld e, (ix - 10)
; Z80-NEXT:    ld d, (ix - 9)
; Z80-NEXT:    ld c, (ix + 16)
; Z80-NEXT:    ld b, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 38), l
; Z80-NEXT:    ld (ix - 37), h
; Z80-NEXT:    ld (ix - 40), e
; Z80-NEXT:    ld (ix - 39), d
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    ld c, (ix - 4)
; Z80-NEXT:    ld b, (ix - 3)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 34), l
; Z80-NEXT:    ld (ix - 33), h
; Z80-NEXT:    ld (ix - 36), e
; Z80-NEXT:    ld (ix - 35), d
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix - 4)
; Z80-NEXT:    ld b, (ix - 3)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 30), l
; Z80-NEXT:    ld (ix - 29), h
; Z80-NEXT:    ld (ix - 32), e
; Z80-NEXT:    ld (ix - 31), d
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    ld e, (ix - 10)
; Z80-NEXT:    ld d, (ix - 9)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    ld (ix - 10), e
; Z80-NEXT:    ld (ix - 9), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 16)
; Z80-NEXT:    ld h, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 42), l
; Z80-NEXT:    ld (ix - 41), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 42)
; Z80-NEXT:    ld h, (ix - 41)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 42), l
; Z80-NEXT:    ld (ix - 41), h
; Z80-NEXT:    ld (ix - 44), e
; Z80-NEXT:    ld (ix - 43), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld (ix - 6), e
; Z80-NEXT:    ld (ix - 5), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix - 26)
; Z80-NEXT:    ld h, (ix - 25)
; Z80-NEXT:    ld e, (ix - 28)
; Z80-NEXT:    ld d, (ix - 27)
; Z80-NEXT:    ld c, (ix - 38)
; Z80-NEXT:    ld b, (ix - 37)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 40)
; Z80-NEXT:    ld h, (ix - 39)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 34)
; Z80-NEXT:    ld b, (ix - 33)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 36)
; Z80-NEXT:    ld h, (ix - 35)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 30)
; Z80-NEXT:    ld b, (ix - 29)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 32)
; Z80-NEXT:    ld h, (ix - 31)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 8)
; Z80-NEXT:    ld b, (ix - 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 42)
; Z80-NEXT:    ld b, (ix - 41)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 44)
; Z80-NEXT:    ld h, (ix - 43)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 4)
; Z80-NEXT:    ld b, (ix - 3)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 16)
; Z80-NEXT:    ld b, (ix - 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ld h, (ix - 17)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld (ix - 16), l
; Z80-NEXT:    ld (ix - 15), h
; Z80-NEXT:    ld (ix - 18), e
; Z80-NEXT:    ld (ix - 17), d
; Z80-NEXT:    ld hl, 31
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 24)
; Z80-NEXT:    ld h, (ix - 23)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 20)
; Z80-NEXT:    ld h, (ix - 19)
; Z80-NEXT:    ld e, (ix - 22)
; Z80-NEXT:    ld d, (ix - 21)
; Z80-NEXT:    ld c, (ix - 12)
; Z80-NEXT:    ld b, (ix - 11)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld (ix - 6), e
; Z80-NEXT:    ld (ix - 5), d
; Z80-NEXT:    ld (ix - 8), c
; Z80-NEXT:    ld (ix - 7), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 33
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ld h, (ix - 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 14)
; Z80-NEXT:    ld d, (ix - 13)
; Z80-NEXT:    ld c, (ix - 16)
; Z80-NEXT:    ld b, (ix - 15)
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 12), l
; Z80-NEXT:    ld (ix - 11), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 12)
; Z80-NEXT:    ld h, (ix - 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    ld e, (ix - 6)
; Z80-NEXT:    ld d, (ix - 5)
; Z80-NEXT:    ld c, (ix - 8)
; Z80-NEXT:    ld b, (ix - 7)
; Z80-NEXT:    call __llor
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld (ix - 6), e
; Z80-NEXT:    ld (ix - 5), d
; Z80-NEXT:    ld (ix - 8), c
; Z80-NEXT:    ld (ix - 7), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 31
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ld h, (ix - 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 14)
; Z80-NEXT:    ld d, (ix - 13)
; Z80-NEXT:    ld c, (ix - 16)
; Z80-NEXT:    ld b, (ix - 15)
; Z80-NEXT:    call __llshrs
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 16), l
; Z80-NEXT:    ld (ix - 15), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld (ix - 14), c
; Z80-NEXT:    ld (ix - 13), b
; Z80-NEXT:    push bc
; Z80-NEXT:    ld (ix - 12), e
; Z80-NEXT:    ld (ix - 11), d
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    call __llcmps
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 18), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    ld l, 1
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    ld (ix - 18), l
; Z80-NEXT:    jp m, BB120_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld l, a
; Z80-NEXT:  BB120_2:
; Z80-NEXT:    ld (ix - 20), l
; Z80-NEXT:    push iy
; Z80-NEXT:    push iy
; Z80-NEXT:    push iy
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 16)
; Z80-NEXT:    ld h, (ix - 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 12)
; Z80-NEXT:    ld d, (ix - 11)
; Z80-NEXT:    ld c, (ix - 14)
; Z80-NEXT:    ld b, (ix - 13)
; Z80-NEXT:    call __llcmpu
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 22), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 22)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    jr z, BB120_4
; Z80-NEXT:  ; %bb.3:
; Z80-NEXT:    ld (ix - 18), a
; Z80-NEXT:  BB120_4:
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld hl, -32768
; Z80-NEXT:    push hl
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    ld e, c
; Z80-NEXT:    ld d, b
; Z80-NEXT:    call __llcmpu
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 22), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 22)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld l, a
; Z80-NEXT:    ld a, (ix - 20)
; Z80-NEXT:    rrc a
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld e, (ix - 18)
; Z80-NEXT:    bit 0, e
; Z80-NEXT:    jp z, BB120_25
; Z80-NEXT:  ; %bb.5:
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp z, BB120_26
; Z80-NEXT:  BB120_6:
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp z, BB120_27
; Z80-NEXT:  BB120_7:
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp z, BB120_28
; Z80-NEXT:  BB120_8:
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp z, BB120_29
; Z80-NEXT:  BB120_9:
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp z, BB120_30
; Z80-NEXT:  BB120_10:
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp z, BB120_31
; Z80-NEXT:  BB120_11:
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp z, BB120_32
; Z80-NEXT:  BB120_12:
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jr nz, BB120_14
; Z80-NEXT:  BB120_13:
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 16), l
; Z80-NEXT:    ld (ix - 15), h
; Z80-NEXT:    pop hl
; Z80-NEXT:  BB120_14:
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 16)
; Z80-NEXT:    ld h, (ix - 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 12)
; Z80-NEXT:    ld d, (ix - 11)
; Z80-NEXT:    ld c, (ix - 14)
; Z80-NEXT:    ld b, (ix - 13)
; Z80-NEXT:    call __llcmps
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 18), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    ld l, 1
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    ld (ix - 18), l
; Z80-NEXT:    jp m, BB120_16
; Z80-NEXT:  ; %bb.15:
; Z80-NEXT:    ld l, a
; Z80-NEXT:  BB120_16:
; Z80-NEXT:    ld (ix - 20), l
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 16)
; Z80-NEXT:    ld h, (ix - 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 12)
; Z80-NEXT:    ld d, (ix - 11)
; Z80-NEXT:    ld c, (ix - 14)
; Z80-NEXT:    ld b, (ix - 13)
; Z80-NEXT:    call __llcmpu
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    jr z, BB120_18
; Z80-NEXT:  ; %bb.17:
; Z80-NEXT:    ld (ix - 18), a
; Z80-NEXT:  BB120_18:
; Z80-NEXT:    ld hl, 32767
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push iy
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    ld e, (ix - 6)
; Z80-NEXT:    ld d, (ix - 5)
; Z80-NEXT:    ld c, (ix - 8)
; Z80-NEXT:    ld b, (ix - 7)
; Z80-NEXT:    call __llcmpu
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld l, a
; Z80-NEXT:    ld a, (ix - 20)
; Z80-NEXT:    rrc a
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld e, (ix - 18)
; Z80-NEXT:    bit 0, e
; Z80-NEXT:    jp z, BB120_33
; Z80-NEXT:  ; %bb.19:
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp z, BB120_34
; Z80-NEXT:  BB120_20:
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp z, BB120_35
; Z80-NEXT:  BB120_21:
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp z, BB120_36
; Z80-NEXT:  BB120_22:
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jr nz, BB120_24
; Z80-NEXT:  BB120_23:
; Z80-NEXT:    ld hl, 32767
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:  BB120_24:
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    ld e, (ix - 6)
; Z80-NEXT:    ld d, (ix - 5)
; Z80-NEXT:    ld c, (ix - 8)
; Z80-NEXT:    ld b, (ix - 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:  BB120_25:
; Z80-NEXT:    ld l, a
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp nz, BB120_6
; Z80-NEXT:  BB120_26:
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    ld (ix - 4), e
; Z80-NEXT:    ld (ix - 3), d
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp nz, BB120_7
; Z80-NEXT:  BB120_27:
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    ld (ix - 6), e
; Z80-NEXT:    ld (ix - 5), d
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp nz, BB120_8
; Z80-NEXT:  BB120_28:
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    ld (ix - 8), e
; Z80-NEXT:    ld (ix - 7), d
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp nz, BB120_9
; Z80-NEXT:  BB120_29:
; Z80-NEXT:    ld de, -32768
; Z80-NEXT:    ld (ix - 10), e
; Z80-NEXT:    ld (ix - 9), d
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp nz, BB120_10
; Z80-NEXT:  BB120_30:
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp nz, BB120_11
; Z80-NEXT:  BB120_31:
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 12), l
; Z80-NEXT:    ld (ix - 11), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp nz, BB120_12
; Z80-NEXT:  BB120_32:
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 14), l
; Z80-NEXT:    ld (ix - 13), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp z, BB120_13
; Z80-NEXT:    jp BB120_14
; Z80-NEXT:  BB120_33:
; Z80-NEXT:    ld l, a
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp nz, BB120_20
; Z80-NEXT:  BB120_34:
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp nz, BB120_21
; Z80-NEXT:  BB120_35:
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 6), l
; Z80-NEXT:    ld (ix - 5), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp nz, BB120_22
; Z80-NEXT:  BB120_36:
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    bit 0, l
; Z80-NEXT:    jp z, BB120_23
; Z80-NEXT:    jp BB120_24
;
; EZ80-CODE16-LABEL: smul.fix.sat.i64.31:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 44
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    ld iy, (ix + 10)
; EZ80-CODE16-NEXT:    ld a, 31
; EZ80-CODE16-NEXT:    call __lshrs
; EZ80-CODE16-NEXT:    ld (ix - 8), hl
; EZ80-CODE16-NEXT:    ld (ix - 10), de
; EZ80-CODE16-NEXT:    ld bc, (ix + 16)
; EZ80-CODE16-NEXT:    ld iy, (ix + 18)
; EZ80-CODE16-NEXT:    call __lshrs
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld (ix - 6), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 12)
; EZ80-CODE16-NEXT:    ld iy, (ix + 14)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 20), hl
; EZ80-CODE16-NEXT:    ld (ix - 22), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    ld bc, (ix + 12)
; EZ80-CODE16-NEXT:    ld iy, (ix + 14)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 12), hl
; EZ80-CODE16-NEXT:    ld (ix - 2), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 16)
; EZ80-CODE16-NEXT:    ld iy, (ix + 18)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 16), hl
; EZ80-CODE16-NEXT:    ld (ix - 14), de
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 14)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 18), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 18)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 24), hl
; EZ80-CODE16-NEXT:    ld (ix - 18), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 12)
; EZ80-CODE16-NEXT:    ld de, (ix - 16)
; EZ80-CODE16-NEXT:    add hl, de
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld bc, (ix - 14)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    inc iy
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld de, (ix - 24)
; EZ80-CODE16-NEXT:    add hl, de
; EZ80-CODE16-NEXT:    ld (ix - 12), hl
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    ld de, (ix - 18)
; EZ80-CODE16-NEXT:    adc hl, de
; EZ80-CODE16-NEXT:    ld (ix - 24), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld (ix - 16), hl
; EZ80-CODE16-NEXT:    ld (ix - 14), de
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    ld de, (ix - 10)
; EZ80-CODE16-NEXT:    ld bc, (ix + 12)
; EZ80-CODE16-NEXT:    ld iy, (ix + 14)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld (ix - 18), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    ld bc, (ix + 16)
; EZ80-CODE16-NEXT:    ld iy, (ix + 18)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 30), hl
; EZ80-CODE16-NEXT:    ld (ix - 26), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix - 4)
; EZ80-CODE16-NEXT:    ld iy, (ix - 6)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 32), hl
; EZ80-CODE16-NEXT:    ld (ix - 28), de
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 14)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 34), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 34)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 36), hl
; EZ80-CODE16-NEXT:    ld (ix - 34), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 16)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 38), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 38)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 40), hl
; EZ80-CODE16-NEXT:    ld (ix - 38), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld iy, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 30)
; EZ80-CODE16-NEXT:    add iy, de
; EZ80-CODE16-NEXT:    ld hl, (ix - 18)
; EZ80-CODE16-NEXT:    ld de, (ix - 26)
; EZ80-CODE16-NEXT:    adc hl, de
; EZ80-CODE16-NEXT:    ld (ix - 18), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    inc de
; EZ80-CODE16-NEXT:    ld bc, (ix - 32)
; EZ80-CODE16-NEXT:    add iy, bc
; EZ80-CODE16-NEXT:    ld (ix - 2), iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 18)
; EZ80-CODE16-NEXT:    ld bc, (ix - 28)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 18), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld bc, (ix - 36)
; EZ80-CODE16-NEXT:    add hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 18)
; EZ80-CODE16-NEXT:    ld bc, (ix - 34)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 18), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld bc, (ix - 40)
; EZ80-CODE16-NEXT:    add hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 18)
; EZ80-CODE16-NEXT:    ld bc, (ix - 38)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 18), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld bc, (ix - 16)
; EZ80-CODE16-NEXT:    add hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 18)
; EZ80-CODE16-NEXT:    ld bc, (ix - 14)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 14), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld (ix - 16), hl
; EZ80-CODE16-NEXT:    ld (ix - 18), de
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    ld de, (ix - 10)
; EZ80-CODE16-NEXT:    ld bc, (ix + 12)
; EZ80-CODE16-NEXT:    ld iy, (ix + 14)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 26), hl
; EZ80-CODE16-NEXT:    ld (ix - 28), de
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    ld de, (ix - 10)
; EZ80-CODE16-NEXT:    ld bc, (ix + 16)
; EZ80-CODE16-NEXT:    ld iy, (ix + 18)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 38), hl
; EZ80-CODE16-NEXT:    ld (ix - 40), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    ld bc, (ix - 4)
; EZ80-CODE16-NEXT:    ld iy, (ix - 6)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 34), hl
; EZ80-CODE16-NEXT:    ld (ix - 36), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix - 4)
; EZ80-CODE16-NEXT:    ld iy, (ix - 6)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 30), hl
; EZ80-CODE16-NEXT:    ld (ix - 32), de
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 14)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    ld de, (ix - 10)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 8), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 8), hl
; EZ80-CODE16-NEXT:    ld (ix - 10), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 16)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 42), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 42)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 42), hl
; EZ80-CODE16-NEXT:    ld (ix - 44), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix - 6)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld (ix - 6), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 26)
; EZ80-CODE16-NEXT:    ld de, (ix - 28)
; EZ80-CODE16-NEXT:    ld bc, (ix - 38)
; EZ80-CODE16-NEXT:    ld iy, (ix - 40)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 34)
; EZ80-CODE16-NEXT:    ld iy, (ix - 36)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 30)
; EZ80-CODE16-NEXT:    ld iy, (ix - 32)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 8)
; EZ80-CODE16-NEXT:    ld iy, (ix - 10)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 42)
; EZ80-CODE16-NEXT:    ld iy, (ix - 44)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 4)
; EZ80-CODE16-NEXT:    ld iy, (ix - 6)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 16)
; EZ80-CODE16-NEXT:    ld iy, (ix - 18)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld (ix - 16), hl
; EZ80-CODE16-NEXT:    ld (ix - 18), de
; EZ80-CODE16-NEXT:    ld hl, 31
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 24)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 20)
; EZ80-CODE16-NEXT:    ld de, (ix - 22)
; EZ80-CODE16-NEXT:    ld bc, (ix - 12)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld (ix - 6), de
; EZ80-CODE16-NEXT:    ld (ix - 8), bc
; EZ80-CODE16-NEXT:    ld (ix - 10), iy
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 33
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 14)
; EZ80-CODE16-NEXT:    ld bc, (ix - 16)
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 12), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    ld de, (ix - 6)
; EZ80-CODE16-NEXT:    ld bc, (ix - 8)
; EZ80-CODE16-NEXT:    call __llor
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld (ix - 6), de
; EZ80-CODE16-NEXT:    ld (ix - 8), bc
; EZ80-CODE16-NEXT:    ld (ix - 10), iy
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 31
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 14)
; EZ80-CODE16-NEXT:    ld bc, (ix - 16)
; EZ80-CODE16-NEXT:    call __llshrs
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:    ld (ix - 16), iy
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld (ix - 14), bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld (ix - 12), de
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    call __llcmps
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 18), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 18)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    ld l, 1
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    ld (ix - 18), l
; EZ80-CODE16-NEXT:    jp m, BB120_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:  BB120_2:
; EZ80-CODE16-NEXT:    ld (ix - 20), l
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 16)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 12)
; EZ80-CODE16-NEXT:    ld bc, (ix - 14)
; EZ80-CODE16-NEXT:    call __llcmpu
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 22), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 22)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    jr z, BB120_4
; EZ80-CODE16-NEXT:  ; %bb.3:
; EZ80-CODE16-NEXT:    ld (ix - 18), a
; EZ80-CODE16-NEXT:  BB120_4:
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 6)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, -32768
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    ld e, c
; EZ80-CODE16-NEXT:    ld d, b
; EZ80-CODE16-NEXT:    call __llcmpu
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 22), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 22)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    ld a, (ix - 20)
; EZ80-CODE16-NEXT:    rrc a
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld e, (ix - 18)
; EZ80-CODE16-NEXT:    bit 0, e
; EZ80-CODE16-NEXT:    jp z, BB120_25
; EZ80-CODE16-NEXT:  ; %bb.5:
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp z, BB120_26
; EZ80-CODE16-NEXT:  BB120_6:
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp z, BB120_27
; EZ80-CODE16-NEXT:  BB120_7:
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp z, BB120_28
; EZ80-CODE16-NEXT:  BB120_8:
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp z, BB120_29
; EZ80-CODE16-NEXT:  BB120_9:
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp z, BB120_30
; EZ80-CODE16-NEXT:  BB120_10:
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp z, BB120_31
; EZ80-CODE16-NEXT:  BB120_11:
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp z, BB120_32
; EZ80-CODE16-NEXT:  BB120_12:
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jr nz, BB120_14
; EZ80-CODE16-NEXT:  BB120_13:
; EZ80-CODE16-NEXT:    ld (ix - 16), iy
; EZ80-CODE16-NEXT:  BB120_14:
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 16)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 12)
; EZ80-CODE16-NEXT:    ld bc, (ix - 14)
; EZ80-CODE16-NEXT:    call __llcmps
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 18), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 18)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    ld l, 1
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    ld (ix - 18), l
; EZ80-CODE16-NEXT:    jp m, BB120_16
; EZ80-CODE16-NEXT:  ; %bb.15:
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:  BB120_16:
; EZ80-CODE16-NEXT:    ld (ix - 20), l
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 16)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 12)
; EZ80-CODE16-NEXT:    ld bc, (ix - 14)
; EZ80-CODE16-NEXT:    call __llcmpu
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 2), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 2)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    jr z, BB120_18
; EZ80-CODE16-NEXT:  ; %bb.17:
; EZ80-CODE16-NEXT:    ld (ix - 18), a
; EZ80-CODE16-NEXT:  BB120_18:
; EZ80-CODE16-NEXT:    ld hl, 32767
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    ld de, (ix - 6)
; EZ80-CODE16-NEXT:    ld bc, (ix - 8)
; EZ80-CODE16-NEXT:    call __llcmpu
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 2), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 2)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    ld a, (ix - 20)
; EZ80-CODE16-NEXT:    rrc a
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld e, (ix - 18)
; EZ80-CODE16-NEXT:    bit 0, e
; EZ80-CODE16-NEXT:    jp z, BB120_33
; EZ80-CODE16-NEXT:  ; %bb.19:
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp z, BB120_34
; EZ80-CODE16-NEXT:  BB120_20:
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp z, BB120_35
; EZ80-CODE16-NEXT:  BB120_21:
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp z, BB120_36
; EZ80-CODE16-NEXT:  BB120_22:
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jr nz, BB120_24
; EZ80-CODE16-NEXT:  BB120_23:
; EZ80-CODE16-NEXT:    ld hl, 32767
; EZ80-CODE16-NEXT:    ld (ix - 10), hl
; EZ80-CODE16-NEXT:  BB120_24:
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    ld de, (ix - 6)
; EZ80-CODE16-NEXT:    ld bc, (ix - 8)
; EZ80-CODE16-NEXT:    ld iy, (ix - 10)
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
; EZ80-CODE16-NEXT:  BB120_25:
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp nz, BB120_6
; EZ80-CODE16-NEXT:  BB120_26:
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    ld (ix - 4), de
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp nz, BB120_7
; EZ80-CODE16-NEXT:  BB120_27:
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    ld (ix - 6), de
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp nz, BB120_8
; EZ80-CODE16-NEXT:  BB120_28:
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    ld (ix - 8), de
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp nz, BB120_9
; EZ80-CODE16-NEXT:  BB120_29:
; EZ80-CODE16-NEXT:    ld de, -32768
; EZ80-CODE16-NEXT:    ld (ix - 10), de
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp nz, BB120_10
; EZ80-CODE16-NEXT:  BB120_30:
; EZ80-CODE16-NEXT:    ld (ix - 2), iy
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp nz, BB120_11
; EZ80-CODE16-NEXT:  BB120_31:
; EZ80-CODE16-NEXT:    ld (ix - 12), iy
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp nz, BB120_12
; EZ80-CODE16-NEXT:  BB120_32:
; EZ80-CODE16-NEXT:    ld (ix - 14), iy
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp z, BB120_13
; EZ80-CODE16-NEXT:    jp BB120_14
; EZ80-CODE16-NEXT:  BB120_33:
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp nz, BB120_20
; EZ80-CODE16-NEXT:  BB120_34:
; EZ80-CODE16-NEXT:    ld (ix - 4), iy
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp nz, BB120_21
; EZ80-CODE16-NEXT:  BB120_35:
; EZ80-CODE16-NEXT:    ld (ix - 6), iy
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp nz, BB120_22
; EZ80-CODE16-NEXT:  BB120_36:
; EZ80-CODE16-NEXT:    ld (ix - 8), iy
; EZ80-CODE16-NEXT:    bit 0, l
; EZ80-CODE16-NEXT:    jp z, BB120_23
; EZ80-CODE16-NEXT:    jp BB120_24
;
; EZ80-LABEL: smul.fix.sat.i64.31:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, -329
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld bc, -225
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld bc, -237
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    ld de, (ix + 12)
; EZ80-NEXT:    ld bc, (ix + 21)
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld h, a
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -246
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld de, -249
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    ld a, b
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld h, a
; EZ80-NEXT:    ld l, c
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -243
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld de, -271
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    ld bc, (ix + 9)
; EZ80-NEXT:    ld a, c
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -234
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), a
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -237
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld iy, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (iy), bc
; EZ80-NEXT:    ld.sis hl, (iy + 1)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -291
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (iy + 3), bc
; EZ80-NEXT:    ld.sis bc, (iy + 4)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld l, 31
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -294
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), a
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (iy + 6), bc
; EZ80-NEXT:    ld (iy + 8), a
; EZ80-NEXT:    ld bc, (iy + 6)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -304
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), a
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    call __lshrs
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -287
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    dec de
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), a ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix + 18)
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -231
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), a
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (iy + 9), de
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld.sis bc, (iy + 10)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -268
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld (iy + 12), de
; EZ80-NEXT:    ld.sis de, (iy + 13)
; EZ80-NEXT:    ld hl, (ix + 21)
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -300
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), a
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (iy + 15), de
; EZ80-NEXT:    ld (iy + 17), a
; EZ80-NEXT:    ld bc, (iy + 15)
; EZ80-NEXT:    ld a, h
; EZ80-NEXT:    ld de, -301
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    ld l, 31
; EZ80-NEXT:    call __lshrs
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -283
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    dec de
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), a ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -234
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld e, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (ix + 15)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -231
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -274
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ; kill: def $e killed $e def $ude
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -277
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ld (iy + 18), hl
; EZ80-NEXT:    ld.sis hl, (iy + 19)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -246
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -258
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), a
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (iy + 21), hl
; EZ80-NEXT:    ld (iy + 23), a
; EZ80-NEXT:    ld hl, (iy + 21)
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -255
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), a
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -231
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -240
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -228
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 18)
; EZ80-NEXT:    ld (iy + 24), hl
; EZ80-NEXT:    ld.sis hl, (iy + 25)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -243
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -264
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), a
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (iy + 27), hl
; EZ80-NEXT:    ld (iy + 29), a
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (iy + 27)
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    ld de, -265
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, -234
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    push af
; EZ80-NEXT:    ld a, (iy)
; EZ80-NEXT:    ld iyl, a
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -297
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -280
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -252
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -231
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld iyl, a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -261
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), iy
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld bc, -307
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld bc, -310
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -240
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld iy, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -297
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -228
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -280
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld l, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    adc a, l
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    inc de
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -307
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -240
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), iy
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, -310
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    push af
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld l, (iy)
; EZ80-NEXT:    adc a, l
; EZ80-NEXT:    ld h, a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -280
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld iyh, 0
; EZ80-NEXT:    ld e, iyh
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ld bc, -314
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -311
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -237
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld iy, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -246
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (iy + 30), hl
; EZ80-NEXT:    ld l, (iy + 32)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -249
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld c, e
; EZ80-NEXT:    ld b, d
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -297
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (iy + 33), hl
; EZ80-NEXT:    ld.sis (iy + 34), bc
; EZ80-NEXT:    ld hl, (iy + 33)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld (iy + 36), de
; EZ80-NEXT:    ld e, (iy + 38)
; EZ80-NEXT:    ld bc, (ix + 15)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -231
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -228
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -317
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ld (iy + 39), hl
; EZ80-NEXT:    ld.sis hl, (iy + 40)
; EZ80-NEXT:    ld (iy + 42), hl
; EZ80-NEXT:    ld bc, -258
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld a, (hl)
; EZ80-NEXT:    ld (iy + 44), a
; EZ80-NEXT:    ld hl, (iy + 42)
; EZ80-NEXT:    ld de, (ix + 18)
; EZ80-NEXT:    ld (iy + 45), de
; EZ80-NEXT:    ld.sis de, (iy + 46)
; EZ80-NEXT:    ld (iy + 48), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -264
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (iy + 50), a
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (iy + 48)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -255
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld e, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -265
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -321
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -318
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -243
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (iy + 51), hl
; EZ80-NEXT:    ld l, (iy + 53)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -271
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld c, e
; EZ80-NEXT:    ld b, d
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -310
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (iy + 54), hl
; EZ80-NEXT:    ld.sis (iy + 55), bc
; EZ80-NEXT:    ld bc, (iy + 54)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld (iy + 57), de
; EZ80-NEXT:    ld a, (iy + 59)
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -234
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld e, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -325
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -322
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -291
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (iy + 60), hl
; EZ80-NEXT:    ld bc, -294
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld a, (hl)
; EZ80-NEXT:    ld (iy + 62), a
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (iy + 60)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld de, -294
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld (iy), bc
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -304
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -291
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -261
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld bc, -328
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    dec bc
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -268
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -237
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld iy, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (iy + 63), hl
; EZ80-NEXT:    ld bc, -300
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld a, (hl)
; EZ80-NEXT:    ld (iy + 65), a
; EZ80-NEXT:    ld de, (iy + 63)
; EZ80-NEXT:    ld bc, -304
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), de
; EZ80-NEXT:    ld bc, 0
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -301
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -307
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -252
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld bc, -268
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld bc, -300
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -228
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld iy, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -321
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -317
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    dec bc
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld l, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    adc a, l
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    inc de
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -325
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -228
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), iy
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, -322
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    push af
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld l, (iy)
; EZ80-NEXT:    adc a, l
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -301
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), a ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld d, 0
; EZ80-NEXT:    ld e, d
; EZ80-NEXT:    ld iyh, 0
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld de, -317
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -328
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -228
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -228
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, -301
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    push af
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld a, (hl) ; 1-byte Folded Reload
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -329
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld l, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    adc a, l
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld d, a
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -317
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld iyh, 0
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -268
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -228
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -228
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    ld bc, -300
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    push af
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld l, (hl)
; EZ80-NEXT:    adc a, l
; EZ80-NEXT:    ld d, a
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld iyh, 0
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -314
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -228
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -228
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    ld bc, -311
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    push af
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld l, (hl)
; EZ80-NEXT:    adc a, l
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -268
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld iyh, 0
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ld bc, -300
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    push ix
; EZ80-NEXT:    dec bc
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -249
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ; kill: def $e killed $e killed $ude
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (ix + 15)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -231
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -231
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -311
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -237
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld iy, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -246
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (iy + 66), hl
; EZ80-NEXT:    ld l, (iy + 68)
; EZ80-NEXT:    ld (iy + 69), hl
; EZ80-NEXT:    ld bc, -297
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld.sis (iy + 70), hl
; EZ80-NEXT:    ld hl, (iy + 69)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -249
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (iy + 72), de
; EZ80-NEXT:    ld e, (iy + 74)
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (ix + 18)
; EZ80-NEXT:    ld (iy + 75), bc
; EZ80-NEXT:    ld.sis bc, (iy + 76)
; EZ80-NEXT:    ld (iy + 78), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -264
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (iy + 80), a
; EZ80-NEXT:    ld bc, (iy + 78)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -265
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -246
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -249
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ld (iy + 81), hl
; EZ80-NEXT:    ld.sis hl, (iy + 82)
; EZ80-NEXT:    ld (iy + 84), hl
; EZ80-NEXT:    ld bc, -258
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld a, (hl)
; EZ80-NEXT:    ld (iy + 86), a
; EZ80-NEXT:    ld hl, (iy + 84)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -243
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (iy + 87), de
; EZ80-NEXT:    ld e, (iy + 89)
; EZ80-NEXT:    ld (iy + 90), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -310
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -134
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld.sis (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (iy + 90)
; EZ80-NEXT:    ld de, -271
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld iy, (iy)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -132
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), iy
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -130
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -255
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld e, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -243
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -255
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -234
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld e, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    ld a, iyl
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ld bc, -234
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -237
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -288
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -261
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -287
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld bc, -258
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld bc, -261
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -307
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -304
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -294
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -291
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld bc, -264
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    dec bc
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -284
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -252
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld d, e
; EZ80-NEXT:    ld bc, -231
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -311
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld e, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -246
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -249
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -243
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -255
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -234
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -237
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -258
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -261
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -264
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    dec de
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld de, -300
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld bc, (iy)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    dec de
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld h, e
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -234
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, -240
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld bc, (hl)
; EZ80-NEXT:    ld l, c
; EZ80-NEXT:    ld h, b
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -277
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -129
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld.sis (ix - 128), hl
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld de, (hl)
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld (ix - 126), bc
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -280
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld c, (ix - 124)
; EZ80-NEXT:    ld hl, 31
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld de, -274
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -231
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -237
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -246
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld de, -243
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld (hl), iy
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld d, iyh
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -240
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -268
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 123), hl
; EZ80-NEXT:    ld.sis (ix - 122), de
; EZ80-NEXT:    ld de, (ix - 123)
; EZ80-NEXT:    ld (ix - 120), iy
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld de, -234
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld bc, (hl)
; EZ80-NEXT:    ld c, (ix - 118)
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld (iy), bc
; EZ80-NEXT:    ld hl, 33
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld de, -228
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -231
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld bc, -237
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld de, (iy)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -246
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __llor
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -237
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -231
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -249
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld bc, -268
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld (ix - 117), hl
; EZ80-NEXT:    ld bc, -240
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld.sis (ix - 116), hl
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld de, (ix - 117)
; EZ80-NEXT:    ld bc, -243
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld (ix - 114), hl
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld de, -234
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld bc, (hl)
; EZ80-NEXT:    ld c, (ix - 112)
; EZ80-NEXT:    ld hl, 31
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld de, -228
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __llshrs
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -243
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -240
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -234
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, -32768
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld de, -1
; EZ80-NEXT:    ld b, -1
; EZ80-NEXT:    ld (ix - 111), hl
; EZ80-NEXT:    ld l, (ix - 109)
; EZ80-NEXT:    ld iyl, e
; EZ80-NEXT:    ld iyh, d
; EZ80-NEXT:    ld (ix - 108), hl
; EZ80-NEXT:    ld.sis (ix - 107), iy
; EZ80-NEXT:    ld hl, (ix - 108)
; EZ80-NEXT:    ld (ix - 105), de
; EZ80-NEXT:    ld e, (ix - 103)
; EZ80-NEXT:    ld (ix - 102), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -255
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), iy
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld.sis (ix - 101), iy
; EZ80-NEXT:    ld de, (ix - 102)
; EZ80-NEXT:    ld iy, -1
; EZ80-NEXT:    ld (ix - 99), iy
; EZ80-NEXT:    ld c, (ix - 97)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld de, -234
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld iy, (iy)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld de, -240
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld iy, (iy)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld de, -243
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld iy, (iy)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld de, -246
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld (iy), bc
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __llcmps
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -228
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), l
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld l, (hl)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    ld l, 1
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    push ix
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), l
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    jp m, BB120_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:  BB120_2:
; EZ80-NEXT:    ld de, -252
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld (iy), l
; EZ80-NEXT:    ld hl, -32768
; EZ80-NEXT:    ld (ix - 96), hl
; EZ80-NEXT:    ld l, (ix - 94)
; EZ80-NEXT:    ld (ix - 93), hl
; EZ80-NEXT:    ld de, -255
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld bc, (hl)
; EZ80-NEXT:    ld.sis (ix - 92), bc
; EZ80-NEXT:    ld hl, (ix - 93)
; EZ80-NEXT:    ld de, -1
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld (ix - 90), iy
; EZ80-NEXT:    ld e, (ix - 88)
; EZ80-NEXT:    ld (ix - 87), de
; EZ80-NEXT:    ld.sis (ix - 86), bc
; EZ80-NEXT:    ld de, (ix - 87)
; EZ80-NEXT:    ld (ix - 84), iy
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld de, -246
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld bc, (iy)
; EZ80-NEXT:    ld c, (ix - 82)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push bc
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -243
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -240
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -234
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __llcmpu
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -255
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), l
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld l, (hl)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    jr z, BB120_4
; EZ80-NEXT:  ; %bb.3:
; EZ80-NEXT:    ld bc, -228
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:  BB120_4:
; EZ80-NEXT:    ld hl, -32768
; EZ80-NEXT:    ld c, l
; EZ80-NEXT:    ld b, h
; EZ80-NEXT:    ld de, -249
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld de, -231
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld de, -237
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld iy, (hl)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    call __llcmpu
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -255
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), l
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld l, (hl)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -252
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    rrc a
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -228
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld e, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    bit 0, e
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    jr nz, BB120_6
; EZ80-NEXT:  ; %bb.5:
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:  BB120_6:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -243
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld a, c
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -249
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 81), de
; EZ80-NEXT:    ld (ix - 79), a
; EZ80-NEXT:    ld de, (ix - 81)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -228
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld (ix - 78), bc
; EZ80-NEXT:    ld.sis de, (ix - 77)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -240
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld a, c
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld (ix - 75), de
; EZ80-NEXT:    ld (ix - 73), a
; EZ80-NEXT:    ld de, (ix - 75)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -243
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld (ix - 72), bc
; EZ80-NEXT:    ld.sis de, (ix - 71)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -234
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld a, c
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld (ix - 69), de
; EZ80-NEXT:    ld (ix - 67), a
; EZ80-NEXT:    ld de, (ix - 69)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -240
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    bit 0, l
; EZ80-NEXT:    jr z, BB120_14
; EZ80-NEXT:  ; %bb.7:
; EZ80-NEXT:    bit 0, l
; EZ80-NEXT:    jr z, BB120_15
; EZ80-NEXT:  BB120_8:
; EZ80-NEXT:    bit 0, l
; EZ80-NEXT:    jr z, BB120_16
; EZ80-NEXT:  BB120_9:
; EZ80-NEXT:    bit 0, l
; EZ80-NEXT:    jr z, BB120_17
; EZ80-NEXT:  BB120_10:
; EZ80-NEXT:    bit 0, l
; EZ80-NEXT:    jr nz, BB120_12
; EZ80-NEXT:  BB120_11:
; EZ80-NEXT:    ld de, -1
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -240
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:  BB120_12:
; EZ80-NEXT:    bit 0, l
; EZ80-NEXT:    ld bc, -237
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    push af
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (hl), iy
; EZ80-NEXT:    jr nz, BB120_18
; EZ80-NEXT:  ; %bb.13:
; EZ80-NEXT:    ld de, -246
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld bc, (hl)
; EZ80-NEXT:    jr BB120_19
; EZ80-NEXT:  BB120_14:
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    bit 0, l
; EZ80-NEXT:    jr nz, BB120_8
; EZ80-NEXT:  BB120_15:
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -231
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    bit 0, l
; EZ80-NEXT:    jr nz, BB120_9
; EZ80-NEXT:  BB120_16:
; EZ80-NEXT:    ld de, -32768
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -228
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    bit 0, l
; EZ80-NEXT:    jr nz, BB120_10
; EZ80-NEXT:  BB120_17:
; EZ80-NEXT:    ld de, -1
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -243
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    bit 0, l
; EZ80-NEXT:    jr z, BB120_11
; EZ80-NEXT:    jr BB120_12
; EZ80-NEXT:  BB120_18:
; EZ80-NEXT:    ld de, -234
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld b, h
; EZ80-NEXT:  BB120_19:
; EZ80-NEXT:    ld de, -228
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld (ix - 66), hl
; EZ80-NEXT:    push af
; EZ80-NEXT:    ld a, (ix - 64)
; EZ80-NEXT:    ld iyl, a
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ld bc, -243
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld de, (hl)
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:    ld (ix - 63), iy
; EZ80-NEXT:    ld bc, -255
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    ld.sis (ix - 62), hl
; EZ80-NEXT:    ld hl, (ix - 63)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -234
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 60), de
; EZ80-NEXT:    push af
; EZ80-NEXT:    ld a, (ix - 58)
; EZ80-NEXT:    ld iyl, a
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld bc, -240
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld e, l
; EZ80-NEXT:    ld d, h
; EZ80-NEXT:    ld (ix - 57), iy
; EZ80-NEXT:    ld bc, -258
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), de
; EZ80-NEXT:    ld.sis (ix - 56), de
; EZ80-NEXT:    ld de, (ix - 57)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -249
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 54), hl
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld c, (ix - 52)
; EZ80-NEXT:    ld hl, 32767
; EZ80-NEXT:    ld (ix - 51), hl
; EZ80-NEXT:    ld e, (ix - 49)
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld d, iyh
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld (ix - 48), de
; EZ80-NEXT:    ld.sis (ix - 47), hl
; EZ80-NEXT:    ld de, (ix - 48)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -261
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 45), iy
; EZ80-NEXT:    ld e, (ix - 43)
; EZ80-NEXT:    ld (ix - 42), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -252
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld.sis (ix - 41), hl
; EZ80-NEXT:    ld de, (ix - 42)
; EZ80-NEXT:    ld (ix - 39), iy
; EZ80-NEXT:    ld h, 0
; EZ80-NEXT:    ld l, (ix - 37)
; EZ80-NEXT:    ld bc, -246
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld bc, -261
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -234
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -249
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llcmps
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -234
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), l
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld l, (hl)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    ld l, 1
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    push ix
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), l
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    jp m, BB120_21
; EZ80-NEXT:  ; %bb.20:
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:  BB120_21:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -249
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), l
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, -228
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld (ix - 36), hl
; EZ80-NEXT:    ld l, (ix - 34)
; EZ80-NEXT:    ld (ix - 33), hl
; EZ80-NEXT:    ld bc, -255
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld.sis (ix - 32), hl
; EZ80-NEXT:    ld hl, (ix - 33)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, -243
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld (ix - 30), hl
; EZ80-NEXT:    ld e, (ix - 28)
; EZ80-NEXT:    ld (ix - 27), de
; EZ80-NEXT:    ld de, -258
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld.sis (ix - 26), hl
; EZ80-NEXT:    ld hl, (ix - 27)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -243
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, -240
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld (ix - 24), hl
; EZ80-NEXT:    push af
; EZ80-NEXT:    ld a, (ix - 22)
; EZ80-NEXT:    ld iyl, a
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld hl, 32767
; EZ80-NEXT:    ld (ix - 21), hl
; EZ80-NEXT:    ld c, (ix - 19)
; EZ80-NEXT:    ld (ix - 18), bc
; EZ80-NEXT:    ld bc, -252
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld de, (hl)
; EZ80-NEXT:    ld.sis (ix - 17), de
; EZ80-NEXT:    ld hl, (ix - 18)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -240
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, 0
; EZ80-NEXT:    ld (ix - 15), hl
; EZ80-NEXT:    ld c, (ix - 13)
; EZ80-NEXT:    ld (ix - 12), bc
; EZ80-NEXT:    ld.sis (ix - 11), de
; EZ80-NEXT:    ld bc, (ix - 12)
; EZ80-NEXT:    ld (ix - 9), hl
; EZ80-NEXT:    ld de, -246
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld l, (ix - 7)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    ld bc, -240
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -255
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -243
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld c, iyl
; EZ80-NEXT:    ld b, iyh
; EZ80-NEXT:    call __llcmpu
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ld bc, -240
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    push af
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (iy), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld l, (hl)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    jr z, BB120_23
; EZ80-NEXT:  ; %bb.22:
; EZ80-NEXT:    ld bc, -234
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:  BB120_23:
; EZ80-NEXT:    ld de, -228
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld c, l
; EZ80-NEXT:    ld b, h
; EZ80-NEXT:    ld hl, 32767
; EZ80-NEXT:    push hl
; EZ80-NEXT:    scf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld de, -237
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ld bc, -231
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld de, (iy)
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __llcmpu
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -240
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), l
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld l, (iy)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -249
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    rrc a
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -234
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld c, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    bit 0, c
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    jp z, BB120_29
; EZ80-NEXT:  ; %bb.24:
; EZ80-NEXT:    bit 0, e
; EZ80-NEXT:    jp z, BB120_30
; EZ80-NEXT:  BB120_25:
; EZ80-NEXT:    bit 0, e
; EZ80-NEXT:    jp z, BB120_31
; EZ80-NEXT:  BB120_26:
; EZ80-NEXT:    bit 0, e
; EZ80-NEXT:    jr nz, BB120_28
; EZ80-NEXT:  BB120_27:
; EZ80-NEXT:    ld de, 32767
; EZ80-NEXT:    ld bc, -228
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), de
; EZ80-NEXT:  BB120_28:
; EZ80-NEXT:    ld bc, -228
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld de, (iy)
; EZ80-NEXT:    ld c, e
; EZ80-NEXT:    ld b, d
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -231
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB120_29:
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    bit 0, e
; EZ80-NEXT:    jp nz, BB120_25
; EZ80-NEXT:  BB120_30:
; EZ80-NEXT:    scf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    bit 0, e
; EZ80-NEXT:    jp nz, BB120_26
; EZ80-NEXT:  BB120_31:
; EZ80-NEXT:    ld bc, -1
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld de, -231
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld (iy), bc
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    bit 0, e
; EZ80-NEXT:    jp z, BB120_27
; EZ80-NEXT:    jp BB120_28
  call i64 @llvm.smul.fix.sat.i64(i64 %0, i64 %1, i32 31)
  ret i64 %3
}

declare i8 @llvm.umul.fix.sat.i8(i8, i8, i32 immarg)
define i8 @umul.fix.sat.i8.8(i8, i8) {
; Z80-LABEL: umul.fix.sat.i8.8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld a, (iy + 2)
; Z80-NEXT:    ld l, (iy + 4)
; Z80-NEXT:    ld d, 0
; Z80-NEXT:    ld e, a
; Z80-NEXT:    ld b, d
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld l, e
; Z80-NEXT:    ld h, d
; Z80-NEXT:    call __smulu
; Z80-NEXT:    ld e, h
; Z80-NEXT:    ld bc, 255
; Z80-NEXT:    ld l, e
; Z80-NEXT:    ld h, d
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    jr c, BB121_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld de, 255
; Z80-NEXT:  BB121_2:
; Z80-NEXT:    ld a, e
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: umul.fix.sat.i8.8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld a, (iy + 2)
; EZ80-CODE16-NEXT:    ld l, (iy + 4)
; EZ80-CODE16-NEXT:    ld d, 0
; EZ80-CODE16-NEXT:    ld e, a
; EZ80-CODE16-NEXT:    ld b, d
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld l, e
; EZ80-CODE16-NEXT:    ld h, d
; EZ80-CODE16-NEXT:    call __smulu
; EZ80-CODE16-NEXT:    ld e, h
; EZ80-CODE16-NEXT:    ld bc, 255
; EZ80-CODE16-NEXT:    ld l, e
; EZ80-CODE16-NEXT:    ld h, d
; EZ80-CODE16-NEXT:    or a, a
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    jr c, BB121_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld de, 255
; EZ80-CODE16-NEXT:  BB121_2:
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: umul.fix.sat.i8.8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld a, (iy + 3)
; EZ80-NEXT:    ld l, (iy + 6)
; EZ80-NEXT:    ld d, 0
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld b, d
; EZ80-NEXT:    ld c, l
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:    call __smulu
; EZ80-NEXT:    ld e, h
; EZ80-NEXT:    ld.sis bc, 255
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, bc
; EZ80-NEXT:    jr c, BB121_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld.sis de, 255
; EZ80-NEXT:  BB121_2:
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ret
  call i8 @llvm.umul.fix.sat.i8(i8 %0, i8 %1, i32 8)
  ret i8 %3
}
declare i16 @llvm.umul.fix.sat.i16(i16, i16, i32 immarg)
define i16 @umul.fix.sat.i16.8(i16, i16) {
; Z80-LABEL: umul.fix.sat.i16.8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld c, (iy + 4)
; Z80-NEXT:    ld b, (iy + 5)
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld a, 8
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    call __lshru
; Z80-NEXT:    ld bc, -1
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __lcmpu
; Z80-NEXT:    jr c, BB122_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:  BB122_2:
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: umul.fix.sat.i16.8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld bc, (iy + 4)
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld a, 8
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    call __lshru
; EZ80-CODE16-NEXT:    ld bc, -1
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __lcmpu
; EZ80-CODE16-NEXT:    jr c, BB122_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:  BB122_2:
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: umul.fix.sat.i16.8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld de, (iy + 3)
; EZ80-NEXT:    ld iy, (iy + 6)
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:    ld d, 0
; EZ80-NEXT:    ld bc, 0
; EZ80-NEXT:    ld c, iyl
; EZ80-NEXT:    ld b, iyh
; EZ80-NEXT:    ld e, d
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld l, 8
; EZ80-NEXT:    call __lshru
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld bc, 65535
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __lcmpu
; EZ80-NEXT:    jr c, BB122_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:  BB122_2:
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    ret
  call i16 @llvm.umul.fix.sat.i16(i16 %0, i16 %1, i32 8)
  ret i16 %3
}
define i16 @umul.fix.sat.i16.16(i16, i16) {
; Z80-LABEL: umul.fix.sat.i16.16:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld c, (iy + 4)
; Z80-NEXT:    ld b, (iy + 5)
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld a, 16
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    call __lshru
; Z80-NEXT:    ld bc, -1
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __lcmpu
; Z80-NEXT:    jr c, BB123_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:  BB123_2:
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: umul.fix.sat.i16.16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld bc, (iy + 4)
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld a, 16
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    call __lshru
; EZ80-CODE16-NEXT:    ld bc, -1
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __lcmpu
; EZ80-CODE16-NEXT:    jr c, BB123_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:  BB123_2:
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: umul.fix.sat.i16.16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld de, (iy + 3)
; EZ80-NEXT:    ld iy, (iy + 6)
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:    ld d, 0
; EZ80-NEXT:    ld bc, 0
; EZ80-NEXT:    ld c, iyl
; EZ80-NEXT:    ld b, iyh
; EZ80-NEXT:    ld e, d
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld l, 16
; EZ80-NEXT:    call __lshru
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld bc, 65535
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __lcmpu
; EZ80-NEXT:    jr c, BB123_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:  BB123_2:
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    ret
  call i16 @llvm.umul.fix.sat.i16(i16 %0, i16 %1, i32 16)
  ret i16 %3
}
declare i32 @llvm.umul.fix.sat.i32(i32, i32, i32 immarg)
define i32 @umul.fix.sat.i32.16(i32, i32) {
; Z80-LABEL: umul.fix.sat.i32.16:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -6
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 16
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 6), c
; Z80-NEXT:    ld (ix - 5), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop bc
; Z80-NEXT:    pop bc
; Z80-NEXT:    ld iy, -1
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    push iy
; Z80-NEXT:    push iy
; Z80-NEXT:    ld c, (ix - 2)
; Z80-NEXT:    ld b, (ix - 1)
; Z80-NEXT:    push bc
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld (ix - 4), e
; Z80-NEXT:    ld (ix - 3), d
; Z80-NEXT:    ld c, (ix - 6)
; Z80-NEXT:    ld b, (ix - 5)
; Z80-NEXT:    call __llcmpu
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 6), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld iy, 10
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld sp, iy
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    ccf
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    inc a
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB124_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:  BB124_2:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    jr nz, BB124_4
; Z80-NEXT:  ; %bb.3:
; Z80-NEXT:    ld de, -1
; Z80-NEXT:  BB124_4:
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: umul.fix.sat.i32.16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 4
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld iy, (ix + 8)
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 16
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld (ix - 2), bc
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    ld bc, (ix - 2)
; EZ80-CODE16-NEXT:    call __llcmpu
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 2), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld iy, 10
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld sp, iy
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 2)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    inc a
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB124_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:  BB124_2:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB124_4
; EZ80-CODE16-NEXT:  ; %bb.3:
; EZ80-CODE16-NEXT:    ld de, -1
; EZ80-CODE16-NEXT:  BB124_4:
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: umul.fix.sat.i32.16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    dec sp
; EZ80-NEXT:    ld a, (ix + 9)
; EZ80-NEXT:    ld l, (ix + 15)
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld iyl, e
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld bc, 0
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 12)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 16
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld iy, 255
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld iy, -1
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llcmpu
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 1), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 1)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ccf
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    inc a
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB124_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    scf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:  BB124_2:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB124_4
; EZ80-NEXT:  ; %bb.3:
; EZ80-NEXT:    ld de, 255
; EZ80-NEXT:  BB124_4:
; EZ80-NEXT:    inc sp
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i32 @llvm.umul.fix.sat.i32(i32 %0, i32 %1, i32 16)
  ret i32 %3
}
define i32 @umul.fix.sat.i32.32(i32, i32) {
; Z80-LABEL: umul.fix.sat.i32.32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -6
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 6), c
; Z80-NEXT:    ld (ix - 5), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop bc
; Z80-NEXT:    pop bc
; Z80-NEXT:    ld iy, -1
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    push iy
; Z80-NEXT:    push iy
; Z80-NEXT:    ld c, (ix - 2)
; Z80-NEXT:    ld b, (ix - 1)
; Z80-NEXT:    push bc
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld (ix - 4), e
; Z80-NEXT:    ld (ix - 3), d
; Z80-NEXT:    ld c, (ix - 6)
; Z80-NEXT:    ld b, (ix - 5)
; Z80-NEXT:    call __llcmpu
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 6), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld iy, 10
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld sp, iy
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    ccf
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    inc a
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB125_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:  BB125_2:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    jr nz, BB125_4
; Z80-NEXT:  ; %bb.3:
; Z80-NEXT:    ld de, -1
; Z80-NEXT:  BB125_4:
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: umul.fix.sat.i32.32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 4
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld iy, (ix + 8)
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld (ix - 2), bc
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    ld bc, (ix - 2)
; EZ80-CODE16-NEXT:    call __llcmpu
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 2), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld iy, 10
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld sp, iy
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 2)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    inc a
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB125_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:  BB125_2:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB125_4
; EZ80-CODE16-NEXT:  ; %bb.3:
; EZ80-CODE16-NEXT:    ld de, -1
; EZ80-CODE16-NEXT:  BB125_4:
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: umul.fix.sat.i32.32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    dec sp
; EZ80-NEXT:    ld a, (ix + 9)
; EZ80-NEXT:    ld l, (ix + 15)
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld iyl, e
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld bc, 0
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 12)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld iy, 255
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld iy, -1
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llcmpu
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 1), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 1)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ccf
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    inc a
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB125_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    scf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:  BB125_2:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB125_4
; EZ80-NEXT:  ; %bb.3:
; EZ80-NEXT:    ld de, 255
; EZ80-NEXT:  BB125_4:
; EZ80-NEXT:    inc sp
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i32 @llvm.umul.fix.sat.i32(i32 %0, i32 %1, i32 32)
  ret i32 %3
}
declare i64 @llvm.umul.fix.sat.i64(i64, i64, i32 immarg)
define i64 @umul.fix.sat.i64.32(i64, i64) {
; Z80-LABEL: umul.fix.sat.i64.32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -44
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 12)
; Z80-NEXT:    ld b, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 6), l
; Z80-NEXT:    ld (ix - 5), h
; Z80-NEXT:    ld (ix - 8), e
; Z80-NEXT:    ld (ix - 7), d
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    ld c, (ix + 12)
; Z80-NEXT:    ld b, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld (ix - 2), e
; Z80-NEXT:    ld (ix - 1), d
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 16)
; Z80-NEXT:    ld b, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 12), l
; Z80-NEXT:    ld (ix - 11), h
; Z80-NEXT:    ld (ix - 10), e
; Z80-NEXT:    ld (ix - 9), d
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 14), l
; Z80-NEXT:    ld (ix - 13), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 14)
; Z80-NEXT:    ld h, (ix - 13)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 16), l
; Z80-NEXT:    ld (ix - 15), h
; Z80-NEXT:    ld (ix - 14), e
; Z80-NEXT:    ld (ix - 13), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    ld e, (ix - 12)
; Z80-NEXT:    ld d, (ix - 11)
; Z80-NEXT:    add hl, de
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld c, (ix - 10)
; Z80-NEXT:    ld b, (ix - 9)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    inc iy
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, (ix - 16)
; Z80-NEXT:    ld d, (ix - 15)
; Z80-NEXT:    add hl, de
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    ld e, (ix - 14)
; Z80-NEXT:    ld d, (ix - 13)
; Z80-NEXT:    adc hl, de
; Z80-NEXT:    ld (ix - 16), l
; Z80-NEXT:    ld (ix - 15), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    inc bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld (ix - 12), l
; Z80-NEXT:    ld (ix - 11), h
; Z80-NEXT:    ld (ix - 10), e
; Z80-NEXT:    ld (ix - 9), d
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    ld l, e
; Z80-NEXT:    ld h, d
; Z80-NEXT:    ld c, (ix + 12)
; Z80-NEXT:    ld b, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld (ix - 14), e
; Z80-NEXT:    ld (ix - 13), d
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    ld c, (ix + 16)
; Z80-NEXT:    ld b, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 22), l
; Z80-NEXT:    ld (ix - 21), h
; Z80-NEXT:    ld (ix - 18), e
; Z80-NEXT:    ld (ix - 17), d
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 24), l
; Z80-NEXT:    ld (ix - 23), h
; Z80-NEXT:    ld (ix - 20), e
; Z80-NEXT:    ld (ix - 19), d
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 26), l
; Z80-NEXT:    ld (ix - 25), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 26)
; Z80-NEXT:    ld h, (ix - 25)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 28), l
; Z80-NEXT:    ld (ix - 27), h
; Z80-NEXT:    ld (ix - 26), e
; Z80-NEXT:    ld (ix - 25), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 16)
; Z80-NEXT:    ld h, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 30), l
; Z80-NEXT:    ld (ix - 29), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 30)
; Z80-NEXT:    ld h, (ix - 29)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 32), l
; Z80-NEXT:    ld (ix - 31), h
; Z80-NEXT:    ld (ix - 30), e
; Z80-NEXT:    ld (ix - 29), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld e, (ix - 22)
; Z80-NEXT:    ld d, (ix - 21)
; Z80-NEXT:    add iy, de
; Z80-NEXT:    ld l, (ix - 14)
; Z80-NEXT:    ld h, (ix - 13)
; Z80-NEXT:    ld e, (ix - 18)
; Z80-NEXT:    ld d, (ix - 17)
; Z80-NEXT:    adc hl, de
; Z80-NEXT:    ld (ix - 14), l
; Z80-NEXT:    ld (ix - 13), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    inc de
; Z80-NEXT:    ld c, (ix - 24)
; Z80-NEXT:    ld b, (ix - 23)
; Z80-NEXT:    add iy, bc
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix - 14)
; Z80-NEXT:    ld h, (ix - 13)
; Z80-NEXT:    ld c, (ix - 20)
; Z80-NEXT:    ld b, (ix - 19)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld (ix - 14), l
; Z80-NEXT:    ld (ix - 13), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    inc bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld c, (ix - 28)
; Z80-NEXT:    ld b, (ix - 27)
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld l, (ix - 14)
; Z80-NEXT:    ld h, (ix - 13)
; Z80-NEXT:    ld c, (ix - 26)
; Z80-NEXT:    ld b, (ix - 25)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld (ix - 14), l
; Z80-NEXT:    ld (ix - 13), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    inc bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld c, (ix - 32)
; Z80-NEXT:    ld b, (ix - 31)
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld l, (ix - 14)
; Z80-NEXT:    ld h, (ix - 13)
; Z80-NEXT:    ld c, (ix - 30)
; Z80-NEXT:    ld b, (ix - 29)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld (ix - 14), l
; Z80-NEXT:    ld (ix - 13), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    inc bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld c, (ix - 12)
; Z80-NEXT:    ld b, (ix - 11)
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld l, (ix - 14)
; Z80-NEXT:    ld h, (ix - 13)
; Z80-NEXT:    ld c, (ix - 10)
; Z80-NEXT:    ld b, (ix - 9)
; Z80-NEXT:    adc hl, bc
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:    ccf
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    inc bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld (ix - 12), l
; Z80-NEXT:    ld (ix - 11), h
; Z80-NEXT:    ld (ix - 14), e
; Z80-NEXT:    ld (ix - 13), d
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    ld l, e
; Z80-NEXT:    ld h, d
; Z80-NEXT:    ld c, (ix + 12)
; Z80-NEXT:    ld b, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 18), l
; Z80-NEXT:    ld (ix - 17), h
; Z80-NEXT:    ld (ix - 20), e
; Z80-NEXT:    ld (ix - 19), d
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    ld l, e
; Z80-NEXT:    ld h, d
; Z80-NEXT:    ld c, (ix + 16)
; Z80-NEXT:    ld b, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 30), l
; Z80-NEXT:    ld (ix - 29), h
; Z80-NEXT:    ld (ix - 32), e
; Z80-NEXT:    ld (ix - 31), d
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 26), l
; Z80-NEXT:    ld (ix - 25), h
; Z80-NEXT:    ld (ix - 28), e
; Z80-NEXT:    ld (ix - 27), d
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    call __lmulu
; Z80-NEXT:    ld (ix - 22), l
; Z80-NEXT:    ld (ix - 21), h
; Z80-NEXT:    ld (ix - 24), e
; Z80-NEXT:    ld (ix - 23), d
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    ld e, c
; Z80-NEXT:    ld d, b
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 34), l
; Z80-NEXT:    ld (ix - 33), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 34)
; Z80-NEXT:    ld h, (ix - 33)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 34), l
; Z80-NEXT:    ld (ix - 33), h
; Z80-NEXT:    ld (ix - 36), e
; Z80-NEXT:    ld (ix - 35), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 16)
; Z80-NEXT:    ld h, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    ld e, (ix + 10)
; Z80-NEXT:    ld d, (ix + 11)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 38), l
; Z80-NEXT:    ld (ix - 37), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 38)
; Z80-NEXT:    ld h, (ix - 37)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 38), l
; Z80-NEXT:    ld (ix - 37), h
; Z80-NEXT:    ld (ix - 40), e
; Z80-NEXT:    ld (ix - 39), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    call __llmulu
; Z80-NEXT:    ld (ix - 42), l
; Z80-NEXT:    ld (ix - 41), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 42)
; Z80-NEXT:    ld h, (ix - 41)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 42), l
; Z80-NEXT:    ld (ix - 41), h
; Z80-NEXT:    ld (ix - 44), e
; Z80-NEXT:    ld (ix - 43), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ld h, (ix - 17)
; Z80-NEXT:    ld e, (ix - 20)
; Z80-NEXT:    ld d, (ix - 19)
; Z80-NEXT:    ld c, (ix - 30)
; Z80-NEXT:    ld b, (ix - 29)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 32)
; Z80-NEXT:    ld h, (ix - 31)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 26)
; Z80-NEXT:    ld b, (ix - 25)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 28)
; Z80-NEXT:    ld h, (ix - 27)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 22)
; Z80-NEXT:    ld b, (ix - 21)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 24)
; Z80-NEXT:    ld h, (ix - 23)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 34)
; Z80-NEXT:    ld b, (ix - 33)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 36)
; Z80-NEXT:    ld h, (ix - 35)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 38)
; Z80-NEXT:    ld b, (ix - 37)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 40)
; Z80-NEXT:    ld h, (ix - 39)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 42)
; Z80-NEXT:    ld b, (ix - 41)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 44)
; Z80-NEXT:    ld h, (ix - 43)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld c, (ix - 12)
; Z80-NEXT:    ld b, (ix - 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 14)
; Z80-NEXT:    ld h, (ix - 13)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    call __ladd
; Z80-NEXT:    ld (ix - 12), l
; Z80-NEXT:    ld (ix - 11), h
; Z80-NEXT:    ld (ix - 14), e
; Z80-NEXT:    ld (ix - 13), d
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 16)
; Z80-NEXT:    ld h, (ix - 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    ld e, (ix - 8)
; Z80-NEXT:    ld d, (ix - 7)
; Z80-NEXT:    ld c, (ix - 4)
; Z80-NEXT:    ld b, (ix - 3)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld (ix - 6), e
; Z80-NEXT:    ld (ix - 5), d
; Z80-NEXT:    ld (ix - 8), c
; Z80-NEXT:    ld (ix - 7), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 16), l
; Z80-NEXT:    ld (ix - 15), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 14)
; Z80-NEXT:    ld h, (ix - 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 10)
; Z80-NEXT:    ld d, (ix - 9)
; Z80-NEXT:    ld c, (ix - 12)
; Z80-NEXT:    ld b, (ix - 11)
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 18), l
; Z80-NEXT:    ld (ix - 17), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ld h, (ix - 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 16)
; Z80-NEXT:    ld h, (ix - 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    ld e, (ix - 6)
; Z80-NEXT:    ld d, (ix - 5)
; Z80-NEXT:    ld c, (ix - 8)
; Z80-NEXT:    ld b, (ix - 7)
; Z80-NEXT:    call __llor
; Z80-NEXT:    ld (ix - 16), l
; Z80-NEXT:    ld (ix - 15), h
; Z80-NEXT:    ld (ix - 4), e
; Z80-NEXT:    ld (ix - 3), d
; Z80-NEXT:    ld (ix - 6), c
; Z80-NEXT:    ld (ix - 5), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 14)
; Z80-NEXT:    ld h, (ix - 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 10)
; Z80-NEXT:    ld d, (ix - 9)
; Z80-NEXT:    ld c, (ix - 12)
; Z80-NEXT:    ld b, (ix - 11)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 14), l
; Z80-NEXT:    ld (ix - 13), h
; Z80-NEXT:    ld (ix - 2), e
; Z80-NEXT:    ld (ix - 1), d
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ld (ix - 12), e
; Z80-NEXT:    ld (ix - 11), d
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 14)
; Z80-NEXT:    ld h, (ix - 13)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, (ix - 2)
; Z80-NEXT:    ld d, (ix - 1)
; Z80-NEXT:    call __llcmpu
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    ccf
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    inc a
; Z80-NEXT:    ld (ix - 10), a
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 12)
; Z80-NEXT:    ld h, (ix - 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, (ix - 2)
; Z80-NEXT:    ld d, (ix - 1)
; Z80-NEXT:    call __llcmpu
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    jr z, BB126_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    jr BB126_3
; Z80-NEXT:  BB126_2:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:  BB126_3:
; Z80-NEXT:    ld (ix - 2), a
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 16)
; Z80-NEXT:    ld h, (ix - 15)
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    ld c, (ix - 6)
; Z80-NEXT:    ld b, (ix - 5)
; Z80-NEXT:    call __llcmpu
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 12), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld iy, 10
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld sp, iy
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 12)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld e, a
; Z80-NEXT:    ld a, (ix - 10)
; Z80-NEXT:    rrc a
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld c, (ix - 2)
; Z80-NEXT:    bit 0, c
; Z80-NEXT:    jp z, BB126_10
; Z80-NEXT:  ; %bb.4:
; Z80-NEXT:    bit 0, e
; Z80-NEXT:    jp z, BB126_11
; Z80-NEXT:  BB126_5:
; Z80-NEXT:    bit 0, e
; Z80-NEXT:    jp z, BB126_12
; Z80-NEXT:  BB126_6:
; Z80-NEXT:    bit 0, e
; Z80-NEXT:    jp z, BB126_13
; Z80-NEXT:  BB126_7:
; Z80-NEXT:    bit 0, e
; Z80-NEXT:    jr nz, BB126_9
; Z80-NEXT:  BB126_8:
; Z80-NEXT:    ld de, -1
; Z80-NEXT:    ld (ix - 8), e
; Z80-NEXT:    ld (ix - 7), d
; Z80-NEXT:  BB126_9:
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    ld c, (ix - 6)
; Z80-NEXT:    ld b, (ix - 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:  BB126_10:
; Z80-NEXT:    ld e, a
; Z80-NEXT:    bit 0, e
; Z80-NEXT:    jp nz, BB126_5
; Z80-NEXT:  BB126_11:
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:    bit 0, e
; Z80-NEXT:    jp nz, BB126_6
; Z80-NEXT:  BB126_12:
; Z80-NEXT:    ld bc, -1
; Z80-NEXT:    ld (ix - 4), c
; Z80-NEXT:    ld (ix - 3), b
; Z80-NEXT:    bit 0, e
; Z80-NEXT:    jp nz, BB126_7
; Z80-NEXT:  BB126_13:
; Z80-NEXT:    ld bc, -1
; Z80-NEXT:    ld (ix - 6), c
; Z80-NEXT:    ld (ix - 5), b
; Z80-NEXT:    bit 0, e
; Z80-NEXT:    jp z, BB126_8
; Z80-NEXT:    jp BB126_9
;
; EZ80-CODE16-LABEL: umul.fix.sat.i64.32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 44
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 12)
; EZ80-CODE16-NEXT:    ld iy, (ix + 14)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 6), hl
; EZ80-CODE16-NEXT:    ld (ix - 8), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    ld bc, (ix + 12)
; EZ80-CODE16-NEXT:    ld iy, (ix + 14)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld (ix - 2), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 16)
; EZ80-CODE16-NEXT:    ld iy, (ix + 18)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 12), hl
; EZ80-CODE16-NEXT:    ld (ix - 10), de
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 14)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 14), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 14)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 16), hl
; EZ80-CODE16-NEXT:    ld (ix - 14), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    ld de, (ix - 12)
; EZ80-CODE16-NEXT:    add hl, de
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld bc, (ix - 10)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    inc iy
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld de, (ix - 16)
; EZ80-CODE16-NEXT:    add hl, de
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    ld de, (ix - 14)
; EZ80-CODE16-NEXT:    adc hl, de
; EZ80-CODE16-NEXT:    ld (ix - 16), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld (ix - 12), hl
; EZ80-CODE16-NEXT:    ld (ix - 10), de
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    ld l, e
; EZ80-CODE16-NEXT:    ld h, d
; EZ80-CODE16-NEXT:    ld bc, (ix + 12)
; EZ80-CODE16-NEXT:    ld iy, (ix + 14)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld (ix - 14), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    ld bc, (ix + 16)
; EZ80-CODE16-NEXT:    ld iy, (ix + 18)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 22), hl
; EZ80-CODE16-NEXT:    ld (ix - 18), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 24), hl
; EZ80-CODE16-NEXT:    ld (ix - 20), de
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 14)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 26), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 26)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 28), hl
; EZ80-CODE16-NEXT:    ld (ix - 26), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 16)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 30), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 30)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 32), hl
; EZ80-CODE16-NEXT:    ld (ix - 30), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld iy, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 22)
; EZ80-CODE16-NEXT:    add iy, de
; EZ80-CODE16-NEXT:    ld hl, (ix - 14)
; EZ80-CODE16-NEXT:    ld de, (ix - 18)
; EZ80-CODE16-NEXT:    adc hl, de
; EZ80-CODE16-NEXT:    ld (ix - 14), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    inc de
; EZ80-CODE16-NEXT:    ld bc, (ix - 24)
; EZ80-CODE16-NEXT:    add iy, bc
; EZ80-CODE16-NEXT:    ld (ix - 2), iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 14)
; EZ80-CODE16-NEXT:    ld bc, (ix - 20)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 14), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld bc, (ix - 28)
; EZ80-CODE16-NEXT:    add hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 14)
; EZ80-CODE16-NEXT:    ld bc, (ix - 26)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 14), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld bc, (ix - 32)
; EZ80-CODE16-NEXT:    add hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 14)
; EZ80-CODE16-NEXT:    ld bc, (ix - 30)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 14), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld bc, (ix - 12)
; EZ80-CODE16-NEXT:    add hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 14)
; EZ80-CODE16-NEXT:    ld bc, (ix - 10)
; EZ80-CODE16-NEXT:    adc hl, bc
; EZ80-CODE16-NEXT:    ld (ix - 10), hl
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    inc bc
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld (ix - 12), hl
; EZ80-CODE16-NEXT:    ld (ix - 14), de
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    ld l, e
; EZ80-CODE16-NEXT:    ld h, d
; EZ80-CODE16-NEXT:    ld bc, (ix + 12)
; EZ80-CODE16-NEXT:    ld iy, (ix + 14)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 18), hl
; EZ80-CODE16-NEXT:    ld (ix - 20), de
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    ld l, e
; EZ80-CODE16-NEXT:    ld h, d
; EZ80-CODE16-NEXT:    ld bc, (ix + 16)
; EZ80-CODE16-NEXT:    ld iy, (ix + 18)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 30), hl
; EZ80-CODE16-NEXT:    ld (ix - 32), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 26), hl
; EZ80-CODE16-NEXT:    ld (ix - 28), de
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    call __lmulu
; EZ80-CODE16-NEXT:    ld (ix - 22), hl
; EZ80-CODE16-NEXT:    ld (ix - 24), de
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 14)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    ld e, c
; EZ80-CODE16-NEXT:    ld d, b
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 34), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 34)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 34), hl
; EZ80-CODE16-NEXT:    ld (ix - 36), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 16)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    ld de, (ix + 10)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 38), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 38)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 38), hl
; EZ80-CODE16-NEXT:    ld (ix - 40), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    call __llmulu
; EZ80-CODE16-NEXT:    ld (ix - 42), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 42)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 42), hl
; EZ80-CODE16-NEXT:    ld (ix - 44), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 18)
; EZ80-CODE16-NEXT:    ld de, (ix - 20)
; EZ80-CODE16-NEXT:    ld bc, (ix - 30)
; EZ80-CODE16-NEXT:    ld iy, (ix - 32)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 26)
; EZ80-CODE16-NEXT:    ld iy, (ix - 28)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 22)
; EZ80-CODE16-NEXT:    ld iy, (ix - 24)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 34)
; EZ80-CODE16-NEXT:    ld iy, (ix - 36)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 38)
; EZ80-CODE16-NEXT:    ld iy, (ix - 40)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 42)
; EZ80-CODE16-NEXT:    ld iy, (ix - 44)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld bc, (ix - 12)
; EZ80-CODE16-NEXT:    ld iy, (ix - 14)
; EZ80-CODE16-NEXT:    call __ladd
; EZ80-CODE16-NEXT:    ld (ix - 12), hl
; EZ80-CODE16-NEXT:    ld (ix - 14), de
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 16)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 6)
; EZ80-CODE16-NEXT:    ld de, (ix - 8)
; EZ80-CODE16-NEXT:    ld bc, (ix - 4)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld (ix - 6), de
; EZ80-CODE16-NEXT:    ld (ix - 8), bc
; EZ80-CODE16-NEXT:    ld (ix - 16), iy
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 14)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 10)
; EZ80-CODE16-NEXT:    ld bc, (ix - 12)
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 18), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 16)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    ld de, (ix - 6)
; EZ80-CODE16-NEXT:    ld bc, (ix - 8)
; EZ80-CODE16-NEXT:    call __llor
; EZ80-CODE16-NEXT:    ld (ix - 16), hl
; EZ80-CODE16-NEXT:    ld (ix - 4), de
; EZ80-CODE16-NEXT:    ld (ix - 6), bc
; EZ80-CODE16-NEXT:    ld (ix - 8), iy
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 14)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 10)
; EZ80-CODE16-NEXT:    ld bc, (ix - 12)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 14), hl
; EZ80-CODE16-NEXT:    ld (ix - 2), de
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    ld (ix - 12), de
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld iy, (ix - 14)
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld de, (ix - 2)
; EZ80-CODE16-NEXT:    call __llcmpu
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 10), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 10)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    inc a
; EZ80-CODE16-NEXT:    ld (ix - 10), a
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld de, (ix - 2)
; EZ80-CODE16-NEXT:    call __llcmpu
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 2), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 2)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    jr z, BB126_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    jr BB126_3
; EZ80-CODE16-NEXT:  BB126_2:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:  BB126_3:
; EZ80-CODE16-NEXT:    ld (ix - 2), a
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 16)
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    ld bc, (ix - 6)
; EZ80-CODE16-NEXT:    call __llcmpu
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 12), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld iy, 10
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld sp, iy
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 12)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld e, a
; EZ80-CODE16-NEXT:    ld a, (ix - 10)
; EZ80-CODE16-NEXT:    rrc a
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld c, (ix - 2)
; EZ80-CODE16-NEXT:    bit 0, c
; EZ80-CODE16-NEXT:    jp z, BB126_10
; EZ80-CODE16-NEXT:  ; %bb.4:
; EZ80-CODE16-NEXT:    bit 0, e
; EZ80-CODE16-NEXT:    jp z, BB126_11
; EZ80-CODE16-NEXT:  BB126_5:
; EZ80-CODE16-NEXT:    bit 0, e
; EZ80-CODE16-NEXT:    jp z, BB126_12
; EZ80-CODE16-NEXT:  BB126_6:
; EZ80-CODE16-NEXT:    bit 0, e
; EZ80-CODE16-NEXT:    jp z, BB126_13
; EZ80-CODE16-NEXT:  BB126_7:
; EZ80-CODE16-NEXT:    bit 0, e
; EZ80-CODE16-NEXT:    jr nz, BB126_9
; EZ80-CODE16-NEXT:  BB126_8:
; EZ80-CODE16-NEXT:    ld de, -1
; EZ80-CODE16-NEXT:    ld (ix - 8), de
; EZ80-CODE16-NEXT:  BB126_9:
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    ld bc, (ix - 6)
; EZ80-CODE16-NEXT:    ld iy, (ix - 8)
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
; EZ80-CODE16-NEXT:  BB126_10:
; EZ80-CODE16-NEXT:    ld e, a
; EZ80-CODE16-NEXT:    bit 0, e
; EZ80-CODE16-NEXT:    jp nz, BB126_5
; EZ80-CODE16-NEXT:  BB126_11:
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:    bit 0, e
; EZ80-CODE16-NEXT:    jp nz, BB126_6
; EZ80-CODE16-NEXT:  BB126_12:
; EZ80-CODE16-NEXT:    ld bc, -1
; EZ80-CODE16-NEXT:    ld (ix - 4), bc
; EZ80-CODE16-NEXT:    bit 0, e
; EZ80-CODE16-NEXT:    jp nz, BB126_7
; EZ80-CODE16-NEXT:  BB126_13:
; EZ80-CODE16-NEXT:    ld bc, -1
; EZ80-CODE16-NEXT:    ld (ix - 6), bc
; EZ80-CODE16-NEXT:    bit 0, e
; EZ80-CODE16-NEXT:    jp z, BB126_8
; EZ80-CODE16-NEXT:    jp BB126_9
;
; EZ80-LABEL: umul.fix.sat.i64.32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, -203
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld de, (ix + 12)
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    ld iyl, e
; EZ80-NEXT:    ld iyh, d
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld de, (ix + 21)
; EZ80-NEXT:    ld c, e
; EZ80-NEXT:    ld b, d
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -144
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix + 9)
; EZ80-NEXT:    ld l, c
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ld bc, -135
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), de
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -129
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld.sis hl, (ix - 128)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -172
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 18)
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -138
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), a
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 126), hl
; EZ80-NEXT:    ld.sis hl, (ix - 125)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -160
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ; kill: def $e killed $e killed $ude
; EZ80-NEXT:    ld bc, (ix + 15)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -138
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -163
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ; kill: def $e killed $e def $ude
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -166
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ld (ix - 123), hl
; EZ80-NEXT:    ld.sis hl, (ix - 122)
; EZ80-NEXT:    ld a, iyl
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -150
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), a
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 120), hl
; EZ80-NEXT:    ld (ix - 118), a
; EZ80-NEXT:    ld hl, (ix - 120)
; EZ80-NEXT:    ld e, iyh
; EZ80-NEXT:    ld bc, -147
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), e
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (ix + 15)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -138
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld d, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -141
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -132
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 18)
; EZ80-NEXT:    ld (ix - 117), hl
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld.sis bc, (ix - 116)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld de, -144
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -156
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), a
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 114), bc
; EZ80-NEXT:    ld (ix - 112), a
; EZ80-NEXT:    ld bc, (ix - 114)
; EZ80-NEXT:    ld a, h
; EZ80-NEXT:    dec de
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -135
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld iy, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -169
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -144
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld l, d
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -153
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    lea de, iy
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld bc, -175
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld bc, -178
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -141
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld iy, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -169
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -132
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -144
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld l, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    adc a, l
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    inc de
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -175
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -141
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), iy
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, -178
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    push af
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld l, (iy)
; EZ80-NEXT:    adc a, l
; EZ80-NEXT:    ld h, a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -169
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld iyh, 0
; EZ80-NEXT:    ld e, iyh
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ld bc, -181
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -178
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld l, 0
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, 0
; EZ80-NEXT:    ld iyl, c
; EZ80-NEXT:    ld iyh, b
; EZ80-NEXT:    ld (ix - 111), hl
; EZ80-NEXT:    ld.sis (ix - 110), iy
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld de, -144
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld (hl), iy
; EZ80-NEXT:    ld hl, (ix - 111)
; EZ80-NEXT:    ld (ix - 108), bc
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld e, (ix - 106)
; EZ80-NEXT:    ld bc, (ix + 15)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -138
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -132
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -188
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ld (ix - 105), hl
; EZ80-NEXT:    ld.sis hl, (ix - 104)
; EZ80-NEXT:    ld (ix - 102), hl
; EZ80-NEXT:    ld bc, -150
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld a, (hl)
; EZ80-NEXT:    ld (ix - 100), a
; EZ80-NEXT:    ld hl, (ix - 102)
; EZ80-NEXT:    ld de, (ix + 18)
; EZ80-NEXT:    ld (ix - 99), de
; EZ80-NEXT:    ld.sis de, (ix - 98)
; EZ80-NEXT:    ld (ix - 96), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -156
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 94), a
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (ix - 96)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -147
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld e, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -157
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -194
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -191
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld l, 0
; EZ80-NEXT:    ld (ix - 93), hl
; EZ80-NEXT:    ld.sis (ix - 92), iy
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (ix - 93)
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    ld (ix - 90), iy
; EZ80-NEXT:    ld a, (ix - 88)
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -135
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ; kill: def $e killed $e killed $ude
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -198
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -195
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 12)
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -172
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 87), de
; EZ80-NEXT:    ld (ix - 85), a
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (ix - 87)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -175
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld a, h
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ld bc, -172
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), de
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld bc, -153
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld hl, (iy)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld bc, -201
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    dec bc
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    ld hl, (ix + 21)
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -160
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 84), de
; EZ80-NEXT:    ld (ix - 82), a
; EZ80-NEXT:    ld de, (ix - 84)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -184
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld a, h
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -187
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, 0
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -135
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld bc, -160
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld bc, -203
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -132
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld iy, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -194
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -188
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -191
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld l, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    adc a, l
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    inc de
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -198
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -132
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), iy
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, -195
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    push af
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld l, (iy)
; EZ80-NEXT:    adc a, l
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -188
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), a ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld iyh, 0
; EZ80-NEXT:    ld e, iyh
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -201
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -132
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -132
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, -188
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    push af
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld a, (hl) ; 1-byte Folded Reload
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -202
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld l, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    adc a, l
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld d, a
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld iyh, 0
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -160
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -132
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -132
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    ld bc, -203
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    push af
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld l, (hl)
; EZ80-NEXT:    adc a, l
; EZ80-NEXT:    ld d, a
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld iyh, 0
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -181
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -132
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -132
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    ld bc, -178
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    push af
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld l, (hl)
; EZ80-NEXT:    adc a, l
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -160
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ccf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    inc bc
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld iyh, 0
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -178
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -181
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld e, iyh
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (ix + 15)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ld bc, -138
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld a, (iy) ; 1-byte Folded Reload
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -138
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -188
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld l, 0
; EZ80-NEXT:    ld (ix - 81), hl
; EZ80-NEXT:    ld bc, -144
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld iy, (hl)
; EZ80-NEXT:    ld.sis (ix - 80), iy
; EZ80-NEXT:    ld hl, (ix - 81)
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    ld (ix - 78), de
; EZ80-NEXT:    ld e, (ix - 76)
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (ix + 18)
; EZ80-NEXT:    ld (ix - 75), bc
; EZ80-NEXT:    ld.sis bc, (ix - 74)
; EZ80-NEXT:    ld (ix - 72), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -156
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 70), a
; EZ80-NEXT:    ld bc, (ix - 72)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -157
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -156
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    dec bc
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ld (ix - 69), hl
; EZ80-NEXT:    ld.sis hl, (ix - 68)
; EZ80-NEXT:    ld (ix - 66), hl
; EZ80-NEXT:    ld bc, -150
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld a, (hl)
; EZ80-NEXT:    ld (ix - 64), a
; EZ80-NEXT:    ld hl, (ix - 66)
; EZ80-NEXT:    ld e, 0
; EZ80-NEXT:    ld (ix - 63), de
; EZ80-NEXT:    ld.sis (ix - 62), iy
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld bc, (ix - 63)
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    ld (ix - 60), iy
; EZ80-NEXT:    ld a, (ix - 58)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -147
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld e, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -191
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -194
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -135
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ; kill: def $e killed $e killed $ude
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    ld iyh, 0
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    call __lmulu
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ld bc, -147
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -150
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), e ; 1-byte Folded Spill
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    push de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -153
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld bc, -153
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld bc, -195
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -187
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -184
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -175
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -172
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld bc, -172
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld (iy), hl
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld bc, -175
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -135
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llmulu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld d, e
; EZ80-NEXT:    ld bc, -138
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -188
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld e, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -156
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    dec de
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -191
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -194
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -147
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -150
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -153
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -195
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -172
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -175
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld de, -178
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld bc, (iy)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -181
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix) ; 1-byte Folded Reload
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __ladd
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld h, e
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -135
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, -141
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld bc, (hl)
; EZ80-NEXT:    ld l, c
; EZ80-NEXT:    ld h, b
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -166
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 57), de
; EZ80-NEXT:    ld.sis (ix - 56), hl
; EZ80-NEXT:    ld de, (ix - 57)
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld (ix - 54), bc
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld de, -169
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld bc, (hl)
; EZ80-NEXT:    ld c, (ix - 52)
; EZ80-NEXT:    ld hl, 32
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld de, -163
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -138
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -141
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -150
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld de, -147
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld (hl), iy
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld d, iyh
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -153
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -160
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld hl, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 51), hl
; EZ80-NEXT:    ld.sis (ix - 50), de
; EZ80-NEXT:    ld de, (ix - 51)
; EZ80-NEXT:    ld (ix - 48), iy
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld de, -135
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld bc, (hl)
; EZ80-NEXT:    ld c, (ix - 46)
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld (iy), bc
; EZ80-NEXT:    ld hl, 32
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld de, -132
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -138
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld bc, -141
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld de, (iy)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -150
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __llor
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -150
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -138
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -141
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld bc, -160
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld (ix - 45), hl
; EZ80-NEXT:    ld bc, -153
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld.sis (ix - 44), hl
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld de, (ix - 45)
; EZ80-NEXT:    ld bc, -147
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld (ix - 42), hl
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld de, -135
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld bc, (hl)
; EZ80-NEXT:    ld c, (ix - 40)
; EZ80-NEXT:    ld hl, 32
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld de, -132
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -132
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -135
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -147
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), bc
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 65535
; EZ80-NEXT:    ld (ix - 39), hl
; EZ80-NEXT:    ld l, (ix - 37)
; EZ80-NEXT:    ld (ix - 36), hl
; EZ80-NEXT:    ld de, -144
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld.sis (ix - 35), hl
; EZ80-NEXT:    ld bc, (ix - 36)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    ld (ix - 33), de
; EZ80-NEXT:    push af
; EZ80-NEXT:    ld a, (ix - 31)
; EZ80-NEXT:    ld iyl, a
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix - 30), iy
; EZ80-NEXT:    ld.sis (ix - 29), hl
; EZ80-NEXT:    ld hl, (ix - 30)
; EZ80-NEXT:    ld (ix - 27), de
; EZ80-NEXT:    ld iyh, 0
; EZ80-NEXT:    push af
; EZ80-NEXT:    ld a, (ix - 25)
; EZ80-NEXT:    ld iyl, a
; EZ80-NEXT:    pop af
; EZ80-NEXT:    push iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    ld bc, -132
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -135
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -147
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __llcmpu
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -153
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), l
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld l, (hl)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ccf
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    inc a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld (ix), a
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld hl, 65535
; EZ80-NEXT:    ld (ix - 24), hl
; EZ80-NEXT:    ld l, (ix - 22)
; EZ80-NEXT:    ld (ix - 21), hl
; EZ80-NEXT:    ld de, -144
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld bc, (hl)
; EZ80-NEXT:    ld.sis (ix - 20), bc
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld de, (ix - 21)
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld (ix - 18), hl
; EZ80-NEXT:    ld l, (ix - 16)
; EZ80-NEXT:    ld (ix - 15), hl
; EZ80-NEXT:    ld.sis (ix - 14), bc
; EZ80-NEXT:    ld hl, (ix - 15)
; EZ80-NEXT:    ld bc, 0
; EZ80-NEXT:    ld (ix - 12), bc
; EZ80-NEXT:    push af
; EZ80-NEXT:    ld a, (ix - 10)
; EZ80-NEXT:    ld iyl, a
; EZ80-NEXT:    pop af
; EZ80-NEXT:    push iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld bc, -132
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld bc, -135
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld de, (iy)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -147
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __llcmpu
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -135
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), l
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld l, (hl)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    jr z, BB126_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    jr BB126_3
; EZ80-NEXT:  BB126_2:
; EZ80-NEXT:    ld a, 1
; EZ80-NEXT:  BB126_3:
; EZ80-NEXT:    ld bc, -135
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld (hl), a
; EZ80-NEXT:    ld hl, 65535
; EZ80-NEXT:    push hl
; EZ80-NEXT:    scf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld bc, -150
; EZ80-NEXT:    lea hl, ix
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    ld hl, (hl)
; EZ80-NEXT:    ld bc, -138
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld de, (iy)
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -141
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld bc, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    call __llcmpu
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -144
; EZ80-NEXT:    push af
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ld (ix), l
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    ld l, (iy)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld de, -153
; EZ80-NEXT:    add ix, de
; EZ80-NEXT:    ld a, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    rrc a
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -135
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld e, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    bit 0, e
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    jr nz, BB126_5
; EZ80-NEXT:  ; %bb.4:
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:  BB126_5:
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ld bc, -132
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld de, (iy)
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -141
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld de, (ix)
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld (ix - 9), de
; EZ80-NEXT:    ld (ix - 7), a
; EZ80-NEXT:    ld iy, (ix - 9)
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    bit 0, c
; EZ80-NEXT:    jp z, BB126_10
; EZ80-NEXT:  ; %bb.6:
; EZ80-NEXT:    bit 0, c
; EZ80-NEXT:    jp z, BB126_11
; EZ80-NEXT:  BB126_7:
; EZ80-NEXT:    bit 0, c
; EZ80-NEXT:    jr nz, BB126_9
; EZ80-NEXT:  BB126_8:
; EZ80-NEXT:    ld de, 65535
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop iy
; EZ80-NEXT:  BB126_9:
; EZ80-NEXT:    ld c, iyl
; EZ80-NEXT:    ld b, iyh
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ld bc, -138
; EZ80-NEXT:    lea iy, ix
; EZ80-NEXT:    add iy, bc
; EZ80-NEXT:    ld de, (iy)
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    ret
; EZ80-NEXT:  BB126_10:
; EZ80-NEXT:    scf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    bit 0, c
; EZ80-NEXT:    jp nz, BB126_7
; EZ80-NEXT:  BB126_11:
; EZ80-NEXT:    ld de, -1
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld bc, -138
; EZ80-NEXT:    add ix, bc
; EZ80-NEXT:    ld (ix), de
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ld bc, (ix - 3)
; EZ80-NEXT:    bit 0, c
; EZ80-NEXT:    jp z, BB126_8
; EZ80-NEXT:    jp BB126_9
  call i64 @llvm.umul.fix.sat.i64(i64 %0, i64 %1, i32 32)
  ret i64 %3
}

declare i8 @llvm.sdiv.fix.i8(i8, i8, i32 immarg)
define i8 @sdiv.fix.i8.7(i8, i8) {
; Z80-LABEL: sdiv.fix.i8.7:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld d, (iy + 2)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld c, 7
; Z80-NEXT:    ld a, d
; Z80-NEXT:    rlc a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld h, a
; Z80-NEXT:    ld l, d
; Z80-NEXT:    call __sshl
; Z80-NEXT:    ld a, e
; Z80-NEXT:    rlc a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld b, a
; Z80-NEXT:    ld c, e
; Z80-NEXT:    call __sdivs
; Z80-NEXT:    ld a, l
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: sdiv.fix.i8.7:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld d, (iy + 2)
; EZ80-CODE16-NEXT:    ld e, (iy + 4)
; EZ80-CODE16-NEXT:    ld c, 7
; EZ80-CODE16-NEXT:    ld a, d
; EZ80-CODE16-NEXT:    rlc a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld h, a
; EZ80-CODE16-NEXT:    ld l, d
; EZ80-CODE16-NEXT:    call __sshl
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    rlc a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld b, a
; EZ80-CODE16-NEXT:    ld c, e
; EZ80-CODE16-NEXT:    call __sdivs
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: sdiv.fix.i8.7:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld d, (iy + 3)
; EZ80-NEXT:    ld e, (iy + 6)
; EZ80-NEXT:    ld c, 7
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    rlc a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ld h, a
; EZ80-NEXT:    ld l, d
; EZ80-NEXT:    call __sshl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    rlc a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ld b, a
; EZ80-NEXT:    ld c, e
; EZ80-NEXT:    call __sdivs
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    ret
  call i8 @llvm.sdiv.fix.i8(i8 %0, i8 %1, i32 7)
  ret i8 %3
}
declare i16 @llvm.sdiv.fix.i16(i16, i16, i32 immarg)
define i16 @sdiv.fix.i16.7(i16, i16) {
; Z80-LABEL: sdiv.fix.i16.7:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld a, 7
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld iyl, c
; Z80-NEXT:    ld iyh, b
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    call __lshl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    ld c, (ix + 6)
; Z80-NEXT:    ld b, (ix + 7)
; Z80-NEXT:    call __ldivs
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: sdiv.fix.i16.7:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld a, 7
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld iyl, c
; EZ80-CODE16-NEXT:    ld iyh, b
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    call __lshl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    ld iy, (ix + 6)
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    ld bc, (ix + 6)
; EZ80-CODE16-NEXT:    call __ldivs
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: sdiv.fix.i16.7:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld iy, (ix + 6)
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    ld e, 7
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld b, a
; EZ80-NEXT:    ld c, iyl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    call __lshl
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld iy, (ix + 9)
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld b, a
; EZ80-NEXT:    ld c, iyl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    ld a, iyl
; EZ80-NEXT:    call __ldivs
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i16 @llvm.sdiv.fix.i16(i16 %0, i16 %1, i32 7)
  ret i16 %3
}
define i16 @sdiv.fix.i16.15(i16, i16) {
; Z80-LABEL: sdiv.fix.i16.15:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld a, 15
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld iyl, c
; Z80-NEXT:    ld iyh, b
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    call __lshl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    ld c, (ix + 6)
; Z80-NEXT:    ld b, (ix + 7)
; Z80-NEXT:    call __ldivs
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: sdiv.fix.i16.15:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld a, 15
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld iyl, c
; EZ80-CODE16-NEXT:    ld iyh, b
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    call __lshl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    ld iy, (ix + 6)
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    ld bc, (ix + 6)
; EZ80-CODE16-NEXT:    call __ldivs
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: sdiv.fix.i16.15:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld de, (ix + 6)
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld b, a
; EZ80-NEXT:    ld c, e
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld e, 15
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    call __lshl
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ld iy, (ix + 9)
; EZ80-NEXT:    ld e, iyh
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld b, e
; EZ80-NEXT:    ld c, iyl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld a, iyl
; EZ80-NEXT:    call __ldivs
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i16 @llvm.sdiv.fix.i16(i16 %0, i16 %1, i32 15)
  ret i16 %3
}
declare i32 @llvm.sdiv.fix.i32(i32, i32, i32 immarg)
define i32 @sdiv.fix.i32.15(i32, i32) {
; Z80-LABEL: sdiv.fix.i32.15:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld hl, 15
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld (ix - 4), e
; Z80-NEXT:    ld (ix - 3), d
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    call __lldivs
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: sdiv.fix.i32.15:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 4
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld hl, 15
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld (ix - 4), de
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    call __lldivs
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: sdiv.fix.i32.15:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 6
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld c, (ix + 9)
; EZ80-NEXT:    ld a, (ix + 15)
; EZ80-NEXT:    ld l, c
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld e, c
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld hl, 15
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    ld (ix - 6), de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld hl, (ix + 12)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    ld de, (ix - 6)
; EZ80-NEXT:    call __lldivs
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i32 @llvm.sdiv.fix.i32(i32 %0, i32 %1, i32 15)
  ret i32 %3
}
define i32 @sdiv.fix.i32.31(i32, i32) {
; Z80-LABEL: sdiv.fix.i32.31:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld hl, 31
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld (ix - 4), e
; Z80-NEXT:    ld (ix - 3), d
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    call __lldivs
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: sdiv.fix.i32.31:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 4
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld hl, 31
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld (ix - 4), de
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    call __lldivs
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: sdiv.fix.i32.31:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 6
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld c, (ix + 9)
; EZ80-NEXT:    ld a, (ix + 15)
; EZ80-NEXT:    ld l, c
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld e, c
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld hl, 31
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    ld (ix - 6), de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld hl, (ix + 12)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    ld de, (ix - 6)
; EZ80-NEXT:    call __lldivs
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i32 @llvm.sdiv.fix.i32(i32 %0, i32 %1, i32 31)
  ret i32 %3
}
declare i64 @llvm.sdiv.fix.i64(i64, i64, i32 immarg)
define i64 @sdiv.fix.i64.31(i64, i64) {
; Z80-LABEL: sdiv.fix.i64.31:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -23
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld c, (ix + 14)
; Z80-NEXT:    ld b, (ix + 15)
; Z80-NEXT:    ld e, (ix + 16)
; Z80-NEXT:    ld d, (ix + 17)
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    push bc
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    call __lldivs
; Z80-NEXT:    ld (ix - 14), l
; Z80-NEXT:    ld (ix - 13), h
; Z80-NEXT:    ld (ix - 16), e
; Z80-NEXT:    ld (ix - 15), d
; Z80-NEXT:    ld (ix - 18), c
; Z80-NEXT:    ld (ix - 17), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 20), l
; Z80-NEXT:    ld (ix - 19), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 16)
; Z80-NEXT:    ld h, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    call __llrems
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld (ix - 4), e
; Z80-NEXT:    ld (ix - 3), d
; Z80-NEXT:    ld (ix - 6), c
; Z80-NEXT:    ld (ix - 5), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 63
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    ld c, (ix - 6)
; Z80-NEXT:    ld b, (ix - 5)
; Z80-NEXT:    call __llshrs
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    ld c, (ix - 6)
; Z80-NEXT:    ld b, (ix - 5)
; Z80-NEXT:    call __llxor
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    ld (ix - 12), e
; Z80-NEXT:    ld (ix - 11), d
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 22), l
; Z80-NEXT:    ld (ix - 21), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    push de
; Z80-NEXT:    push de
; Z80-NEXT:    ld hl, 16384
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    ld e, (ix - 12)
; Z80-NEXT:    ld d, (ix - 11)
; Z80-NEXT:    call __llcmpu
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 23), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 23)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    ccf
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld iyl, a
; Z80-NEXT:    inc iyl
; Z80-NEXT:    ld l, (ix - 22)
; Z80-NEXT:    ld h, (ix - 21)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    ld e, (ix - 12)
; Z80-NEXT:    ld d, (ix - 11)
; Z80-NEXT:    call __llctlz
; Z80-NEXT:    ld l, a
; Z80-NEXT:    ld a, iyl
; Z80-NEXT:    pop de
; Z80-NEXT:    ld h, 0
; Z80-NEXT:    ld de, -1
; Z80-NEXT:    push de
; Z80-NEXT:    push de
; Z80-NEXT:    push de
; Z80-NEXT:    push de
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    ld e, c
; Z80-NEXT:    ld d, b
; Z80-NEXT:    call __lladd
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr z, BB132_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld hl, 30
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:  BB132_2:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    jr nz, BB132_4
; Z80-NEXT:  ; %bb.3:
; Z80-NEXT:    ex de, hl
; Z80-NEXT:  BB132_4:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    jr nz, BB132_6
; Z80-NEXT:  ; %bb.5:
; Z80-NEXT:    ld e, c
; Z80-NEXT:    ld d, b
; Z80-NEXT:  BB132_6:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    jr nz, BB132_8
; Z80-NEXT:  ; %bb.7:
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:  BB132_8:
; Z80-NEXT:    ld iy, 31
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    push bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, c
; Z80-NEXT:    ld d, b
; Z80-NEXT:    call __llsub
; Z80-NEXT:    ld (ix - 12), l
; Z80-NEXT:    ld (ix - 11), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 31
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 20)
; Z80-NEXT:    ld h, (ix - 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 14)
; Z80-NEXT:    ld h, (ix - 13)
; Z80-NEXT:    ld e, (ix - 16)
; Z80-NEXT:    ld d, (ix - 15)
; Z80-NEXT:    ld c, (ix - 18)
; Z80-NEXT:    ld b, (ix - 17)
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 14), l
; Z80-NEXT:    ld (ix - 13), h
; Z80-NEXT:    ld (ix - 16), e
; Z80-NEXT:    ld (ix - 15), d
; Z80-NEXT:    ld (ix - 18), c
; Z80-NEXT:    ld (ix - 17), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 20), l
; Z80-NEXT:    ld (ix - 19), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    ld c, (ix - 6)
; Z80-NEXT:    ld b, (ix - 5)
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld (ix - 4), e
; Z80-NEXT:    ld (ix - 3), d
; Z80-NEXT:    ld (ix - 6), c
; Z80-NEXT:    ld (ix - 5), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix - 12)
; Z80-NEXT:    ld h, (ix - 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    ld hl, 1
; Z80-NEXT:    ld e, c
; Z80-NEXT:    ld d, b
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 1
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    ld e, (ix + 14)
; Z80-NEXT:    ld d, (ix + 15)
; Z80-NEXT:    ld c, (ix + 16)
; Z80-NEXT:    ld b, (ix + 17)
; Z80-NEXT:    call __lladd
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    ld c, (ix - 6)
; Z80-NEXT:    ld b, (ix - 5)
; Z80-NEXT:    call __lldivs
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix - 12)
; Z80-NEXT:    ld h, (ix - 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    call __llshrs
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 20)
; Z80-NEXT:    ld h, (ix - 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 14)
; Z80-NEXT:    ld h, (ix - 13)
; Z80-NEXT:    ld e, (ix - 16)
; Z80-NEXT:    ld d, (ix - 15)
; Z80-NEXT:    ld c, (ix - 18)
; Z80-NEXT:    ld b, (ix - 17)
; Z80-NEXT:    call __lladd
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: sdiv.fix.i64.31:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 23
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld iy, (ix + 12)
; EZ80-CODE16-NEXT:    ld bc, (ix + 14)
; EZ80-CODE16-NEXT:    ld de, (ix + 16)
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    call __lldivs
; EZ80-CODE16-NEXT:    ld (ix - 14), hl
; EZ80-CODE16-NEXT:    ld (ix - 16), de
; EZ80-CODE16-NEXT:    ld (ix - 18), bc
; EZ80-CODE16-NEXT:    ld (ix - 20), iy
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 16)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 14)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    call __llrems
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld (ix - 4), de
; EZ80-CODE16-NEXT:    ld (ix - 6), bc
; EZ80-CODE16-NEXT:    ld (ix - 10), iy
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 63
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    ld bc, (ix - 6)
; EZ80-CODE16-NEXT:    call __llshrs
; EZ80-CODE16-NEXT:    ld (ix - 8), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    ld bc, (ix - 6)
; EZ80-CODE16-NEXT:    call __llxor
; EZ80-CODE16-NEXT:    ld (ix - 8), hl
; EZ80-CODE16-NEXT:    ld (ix - 12), de
; EZ80-CODE16-NEXT:    ld (ix - 22), iy
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, 16384
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    ld de, (ix - 12)
; EZ80-CODE16-NEXT:    call __llcmpu
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 23), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 23)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld iyl, a
; EZ80-CODE16-NEXT:    inc iyl
; EZ80-CODE16-NEXT:    ld hl, (ix - 22)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    ld de, (ix - 12)
; EZ80-CODE16-NEXT:    call __llctlz
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    ld a, iyl
; EZ80-CODE16-NEXT:    pop de
; EZ80-CODE16-NEXT:    ld h, 0
; EZ80-CODE16-NEXT:    ld de, -1
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld e, c
; EZ80-CODE16-NEXT:    ld d, b
; EZ80-CODE16-NEXT:    call __lladd
; EZ80-CODE16-NEXT:    ld (ix - 8), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr z, BB132_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld hl, 30
; EZ80-CODE16-NEXT:    ld (ix - 8), hl
; EZ80-CODE16-NEXT:  BB132_2:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    jr nz, BB132_4
; EZ80-CODE16-NEXT:  ; %bb.3:
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:  BB132_4:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    jr nz, BB132_6
; EZ80-CODE16-NEXT:  ; %bb.5:
; EZ80-CODE16-NEXT:    ld e, c
; EZ80-CODE16-NEXT:    ld d, b
; EZ80-CODE16-NEXT:  BB132_6:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    jr nz, BB132_8
; EZ80-CODE16-NEXT:  ; %bb.7:
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:  BB132_8:
; EZ80-CODE16-NEXT:    ld iy, 31
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld e, c
; EZ80-CODE16-NEXT:    ld d, b
; EZ80-CODE16-NEXT:    call __llsub
; EZ80-CODE16-NEXT:    ld (ix - 12), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 31
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 20)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 14)
; EZ80-CODE16-NEXT:    ld de, (ix - 16)
; EZ80-CODE16-NEXT:    ld bc, (ix - 18)
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 14), hl
; EZ80-CODE16-NEXT:    ld (ix - 16), de
; EZ80-CODE16-NEXT:    ld (ix - 18), bc
; EZ80-CODE16-NEXT:    ld (ix - 20), iy
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    ld bc, (ix - 6)
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld (ix - 4), de
; EZ80-CODE16-NEXT:    ld (ix - 6), bc
; EZ80-CODE16-NEXT:    ld (ix - 8), iy
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, 1
; EZ80-CODE16-NEXT:    ld e, c
; EZ80-CODE16-NEXT:    ld d, b
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 10), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 1
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 10), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    ld de, (ix + 14)
; EZ80-CODE16-NEXT:    ld bc, (ix + 16)
; EZ80-CODE16-NEXT:    call __lladd
; EZ80-CODE16-NEXT:    ld (ix - 10), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    ld bc, (ix - 6)
; EZ80-CODE16-NEXT:    call __lldivs
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    call __llshrs
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 20)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 14)
; EZ80-CODE16-NEXT:    ld de, (ix - 16)
; EZ80-CODE16-NEXT:    ld bc, (ix - 18)
; EZ80-CODE16-NEXT:    call __lladd
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: sdiv.fix.i64.31:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 24
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld bc, (ix + 12)
; EZ80-NEXT:    ld de, (ix + 15)
; EZ80-NEXT:    ld hl, (ix + 18)
; EZ80-NEXT:    ld iy, (ix + 21)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __lldivs
; EZ80-NEXT:    ld (ix - 15), hl
; EZ80-NEXT:    ld (ix - 18), de
; EZ80-NEXT:    ld (ix - 21), bc
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld hl, (ix + 18)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ld bc, (ix + 12)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llrems
; EZ80-NEXT:    ld (ix - 12), hl
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld (ix - 6), bc
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld de, 63
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld bc, (ix - 6)
; EZ80-NEXT:    call __llshrs
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 12)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld bc, (ix - 6)
; EZ80-NEXT:    call __llxor
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld iy, 64
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llcmpu
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 9), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 9)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ccf
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ld iyl, a
; EZ80-NEXT:    inc iyl
; EZ80-NEXT:    call __llctlz
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    ld a, iyl
; EZ80-NEXT:    ld de, -1
; EZ80-NEXT:    push de
; EZ80-NEXT:    push de
; EZ80-NEXT:    push de
; EZ80-NEXT:    inc de
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __lladd
; EZ80-NEXT:    ld (ix - 9), hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr z, BB132_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld hl, 30
; EZ80-NEXT:    ld (ix - 9), hl
; EZ80-NEXT:  BB132_2:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    jr nz, BB132_4
; EZ80-NEXT:  ; %bb.3:
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop iy
; EZ80-NEXT:  BB132_4:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    ld.sis de, 0
; EZ80-NEXT:    ; kill: def $de killed $de def $ude
; EZ80-NEXT:    jr nz, BB132_6
; EZ80-NEXT:  ; %bb.5:
; EZ80-NEXT:    ld e, c
; EZ80-NEXT:    ld d, b
; EZ80-NEXT:  BB132_6:
; EZ80-NEXT:    ld hl, 31
; EZ80-NEXT:    push de
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld de, (ix - 9)
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llsub
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld (ix - 24), iy
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld hl, 31
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 15)
; EZ80-NEXT:    ld de, (ix - 18)
; EZ80-NEXT:    ld bc, (ix - 21)
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    ld (ix - 15), hl
; EZ80-NEXT:    ld (ix - 18), de
; EZ80-NEXT:    ld (ix - 21), bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, (ix - 9)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 12)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld bc, (ix - 6)
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    ld (ix - 6), de
; EZ80-NEXT:    ld (ix - 9), bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld hl, 1
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld iy, 1
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    ld de, (ix + 18)
; EZ80-NEXT:    ld bc, (ix + 21)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __lladd
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    ld de, (ix - 6)
; EZ80-NEXT:    ld bc, (ix - 9)
; EZ80-NEXT:    call __lldivs
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, (ix - 24)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshrs
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 15)
; EZ80-NEXT:    ld de, (ix - 18)
; EZ80-NEXT:    ld bc, (ix - 21)
; EZ80-NEXT:    call __lladd
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i64 @llvm.sdiv.fix.i64(i64 %0, i64 %1, i32 31)
  ret i64 %3
}

declare i8 @llvm.udiv.fix.i8(i8, i8, i32 immarg)
define i8 @udiv.fix.i8.8(i8, i8) {
; Z80-LABEL: udiv.fix.i8.8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld a, (iy + 2)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld b, 0
; Z80-NEXT:    ld c, a
; Z80-NEXT:    ld h, c
; Z80-NEXT:    ld l, b
; Z80-NEXT:    ld c, e
; Z80-NEXT:    call __sdivu
; Z80-NEXT:    ld a, l
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: udiv.fix.i8.8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld a, (iy + 2)
; EZ80-CODE16-NEXT:    ld e, (iy + 4)
; EZ80-CODE16-NEXT:    ld b, 0
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    ld h, c
; EZ80-CODE16-NEXT:    ld l, b
; EZ80-CODE16-NEXT:    ld c, e
; EZ80-CODE16-NEXT:    call __sdivu
; EZ80-CODE16-NEXT:    ld a, l
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: udiv.fix.i8.8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld a, (iy + 3)
; EZ80-NEXT:    ld e, (iy + 6)
; EZ80-NEXT:    ld b, 0
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    ld h, c
; EZ80-NEXT:    ld l, b
; EZ80-NEXT:    ld c, e
; EZ80-NEXT:    call __sdivu
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    ret
  call i8 @llvm.udiv.fix.i8(i8 %0, i8 %1, i32 8)
  ret i8 %3
}
declare i16 @llvm.udiv.fix.i16(i16, i16, i32 immarg)
define i16 @udiv.fix.i16.8(i16, i16) {
; Z80-LABEL: udiv.fix.i16.8:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld c, (ix + 4)
; Z80-NEXT:    ld b, (ix + 5)
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    ld a, 8
; Z80-NEXT:    call __lshl
; Z80-NEXT:    ld c, (ix + 6)
; Z80-NEXT:    ld b, (ix + 7)
; Z80-NEXT:    call __ldivu
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: udiv.fix.i16.8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld bc, (ix + 4)
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    ld a, 8
; EZ80-CODE16-NEXT:    call __lshl
; EZ80-CODE16-NEXT:    ld bc, (ix + 6)
; EZ80-CODE16-NEXT:    call __ldivu
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: udiv.fix.i16.8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld bc, 0
; EZ80-NEXT:    ld c, l
; EZ80-NEXT:    ld b, h
; EZ80-NEXT:    ld d, 0
; EZ80-NEXT:    ld l, 8
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __lshl
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld iyl, e
; EZ80-NEXT:    ld iyh, d
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __ldivu
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i16 @llvm.udiv.fix.i16(i16 %0, i16 %1, i32 8)
  ret i16 %3
}
define i16 @udiv.fix.i16.16(i16, i16) {
; Z80-LABEL: udiv.fix.i16.16:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld c, (ix + 4)
; Z80-NEXT:    ld b, (ix + 5)
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    ld a, 16
; Z80-NEXT:    call __lshl
; Z80-NEXT:    ld c, (ix + 6)
; Z80-NEXT:    ld b, (ix + 7)
; Z80-NEXT:    call __ldivu
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: udiv.fix.i16.16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld bc, (ix + 4)
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    ld a, 16
; EZ80-CODE16-NEXT:    call __lshl
; EZ80-CODE16-NEXT:    ld bc, (ix + 6)
; EZ80-CODE16-NEXT:    call __ldivu
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: udiv.fix.i16.16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld bc, 0
; EZ80-NEXT:    ld c, l
; EZ80-NEXT:    ld b, h
; EZ80-NEXT:    ld d, 0
; EZ80-NEXT:    ld l, 16
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __lshl
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld iyl, e
; EZ80-NEXT:    ld iyh, d
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __ldivu
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i16 @llvm.udiv.fix.i16(i16 %0, i16 %1, i32 16)
  ret i16 %3
}
declare i32 @llvm.udiv.fix.i32(i32, i32, i32 immarg)
define i32 @udiv.fix.i32.16(i32, i32) {
; Z80-LABEL: udiv.fix.i32.16:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld iy, 16
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    call __lldivu
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: udiv.fix.i32.16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld iy, 16
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    call __lldivu
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: udiv.fix.i32.16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld iy, (ix + 6)
; EZ80-NEXT:    ld c, (ix + 9)
; EZ80-NEXT:    ld a, (ix + 15)
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    ld e, c
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    ld hl, 16
; EZ80-NEXT:    push hl
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    push iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld iy, (ix + 12)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    call __lldivu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i32 @llvm.udiv.fix.i32(i32 %0, i32 %1, i32 16)
  ret i32 %3
}
define i32 @udiv.fix.i32.32(i32, i32) {
; Z80-LABEL: udiv.fix.i32.32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld iy, 32
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    call __lldivu
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: udiv.fix.i32.32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld iy, 32
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    call __lldivu
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: udiv.fix.i32.32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld iy, (ix + 6)
; EZ80-NEXT:    ld c, (ix + 9)
; EZ80-NEXT:    ld a, (ix + 15)
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    ld e, c
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    ld hl, 32
; EZ80-NEXT:    push hl
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    push iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld iy, (ix + 12)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    call __lldivu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i32 @llvm.udiv.fix.i32(i32 %0, i32 %1, i32 32)
  ret i32 %3
}
declare i64 @llvm.udiv.fix.i64(i64, i64, i32 immarg)
define i64 @udiv.fix.i64.32(i64, i64) {
; Z80-LABEL: udiv.fix.i64.32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -20
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld c, (ix + 14)
; Z80-NEXT:    ld b, (ix + 15)
; Z80-NEXT:    ld e, (ix + 16)
; Z80-NEXT:    ld d, (ix + 17)
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    push bc
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    call __lldivu
; Z80-NEXT:    ld (ix - 12), l
; Z80-NEXT:    ld (ix - 11), h
; Z80-NEXT:    ld (ix - 14), e
; Z80-NEXT:    ld (ix - 13), d
; Z80-NEXT:    ld (ix - 16), c
; Z80-NEXT:    ld (ix - 15), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 20), l
; Z80-NEXT:    ld (ix - 19), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 16)
; Z80-NEXT:    ld h, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    call __llremu
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld (ix - 4), e
; Z80-NEXT:    ld (ix - 3), d
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 6), l
; Z80-NEXT:    ld (ix - 5), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    push de
; Z80-NEXT:    ld hl, 1
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    push de
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    call __llcmpu
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    ccf
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld iyl, a
; Z80-NEXT:    inc iyl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    ld (ix - 18), c
; Z80-NEXT:    ld (ix - 17), b
; Z80-NEXT:    call __llctlz
; Z80-NEXT:    ld l, a
; Z80-NEXT:    ld a, iyl
; Z80-NEXT:    pop de
; Z80-NEXT:    ld h, 0
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld e, c
; Z80-NEXT:    ld d, b
; Z80-NEXT:    call __lladd
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld iy, 10
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld sp, iy
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld iy, 32
; Z80-NEXT:    jr nz, BB138_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:  BB138_2:
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    jr nz, BB138_4
; Z80-NEXT:  ; %bb.3:
; Z80-NEXT:    ex de, hl
; Z80-NEXT:  BB138_4:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    jr nz, BB138_6
; Z80-NEXT:  ; %bb.5:
; Z80-NEXT:    ld e, c
; Z80-NEXT:    ld d, b
; Z80-NEXT:  BB138_6:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    jr nz, BB138_8
; Z80-NEXT:  ; %bb.7:
; Z80-NEXT:    ld c, (ix - 8)
; Z80-NEXT:    ld b, (ix - 7)
; Z80-NEXT:  BB138_8:
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    call __llsub
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 20)
; Z80-NEXT:    ld h, (ix - 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 12)
; Z80-NEXT:    ld h, (ix - 11)
; Z80-NEXT:    ld e, (ix - 14)
; Z80-NEXT:    ld d, (ix - 13)
; Z80-NEXT:    ld c, (ix - 16)
; Z80-NEXT:    ld b, (ix - 15)
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 12), l
; Z80-NEXT:    ld (ix - 11), h
; Z80-NEXT:    ld (ix - 14), e
; Z80-NEXT:    ld (ix - 13), d
; Z80-NEXT:    ld (ix - 16), c
; Z80-NEXT:    ld (ix - 15), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 20), l
; Z80-NEXT:    ld (ix - 19), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    ld c, (ix - 18)
; Z80-NEXT:    ld b, (ix - 17)
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld (ix - 4), e
; Z80-NEXT:    ld (ix - 3), d
; Z80-NEXT:    ld (ix - 6), c
; Z80-NEXT:    ld (ix - 5), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    ld hl, 1
; Z80-NEXT:    ld e, c
; Z80-NEXT:    ld d, b
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 18), l
; Z80-NEXT:    ld (ix - 17), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 1
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ld h, (ix - 17)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 18), l
; Z80-NEXT:    ld (ix - 17), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ld h, (ix - 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    ld e, (ix + 14)
; Z80-NEXT:    ld d, (ix + 15)
; Z80-NEXT:    ld c, (ix + 16)
; Z80-NEXT:    ld b, (ix + 17)
; Z80-NEXT:    call __lladd
; Z80-NEXT:    ld (ix - 18), l
; Z80-NEXT:    ld (ix - 17), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ld h, (ix - 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    ld c, (ix - 6)
; Z80-NEXT:    ld b, (ix - 5)
; Z80-NEXT:    call __lldivu
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 20)
; Z80-NEXT:    ld h, (ix - 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 12)
; Z80-NEXT:    ld h, (ix - 11)
; Z80-NEXT:    ld e, (ix - 14)
; Z80-NEXT:    ld d, (ix - 13)
; Z80-NEXT:    ld c, (ix - 16)
; Z80-NEXT:    ld b, (ix - 15)
; Z80-NEXT:    call __lladd
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: udiv.fix.i64.32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 20
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld iy, (ix + 12)
; EZ80-CODE16-NEXT:    ld bc, (ix + 14)
; EZ80-CODE16-NEXT:    ld de, (ix + 16)
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    call __lldivu
; EZ80-CODE16-NEXT:    ld (ix - 12), hl
; EZ80-CODE16-NEXT:    ld (ix - 14), de
; EZ80-CODE16-NEXT:    ld (ix - 16), bc
; EZ80-CODE16-NEXT:    ld (ix - 20), iy
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 16)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 14)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    call __llremu
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld (ix - 4), de
; EZ80-CODE16-NEXT:    ld (ix - 6), iy
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, 1
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    call __llcmpu
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 8), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 8)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld iyl, a
; EZ80-CODE16-NEXT:    inc iyl
; EZ80-CODE16-NEXT:    ld hl, (ix - 6)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    ld (ix - 18), bc
; EZ80-CODE16-NEXT:    call __llctlz
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    ld a, iyl
; EZ80-CODE16-NEXT:    pop de
; EZ80-CODE16-NEXT:    ld h, 0
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld e, c
; EZ80-CODE16-NEXT:    ld d, b
; EZ80-CODE16-NEXT:    call __lladd
; EZ80-CODE16-NEXT:    ld (ix - 8), iy
; EZ80-CODE16-NEXT:    ld iy, 10
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld sp, iy
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld iy, 32
; EZ80-CODE16-NEXT:    jr nz, BB138_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:  BB138_2:
; EZ80-CODE16-NEXT:    ld (ix - 10), iy
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    jr nz, BB138_4
; EZ80-CODE16-NEXT:  ; %bb.3:
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:  BB138_4:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    jr nz, BB138_6
; EZ80-CODE16-NEXT:  ; %bb.5:
; EZ80-CODE16-NEXT:    ld e, c
; EZ80-CODE16-NEXT:    ld d, b
; EZ80-CODE16-NEXT:  BB138_6:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    jr nz, BB138_8
; EZ80-CODE16-NEXT:  ; %bb.7:
; EZ80-CODE16-NEXT:    ld bc, (ix - 8)
; EZ80-CODE16-NEXT:  BB138_8:
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    call __llsub
; EZ80-CODE16-NEXT:    ld (ix - 8), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 20)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 12)
; EZ80-CODE16-NEXT:    ld de, (ix - 14)
; EZ80-CODE16-NEXT:    ld bc, (ix - 16)
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 12), hl
; EZ80-CODE16-NEXT:    ld (ix - 14), de
; EZ80-CODE16-NEXT:    ld (ix - 16), bc
; EZ80-CODE16-NEXT:    ld (ix - 20), iy
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 6)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    ld bc, (ix - 18)
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld (ix - 4), de
; EZ80-CODE16-NEXT:    ld (ix - 6), bc
; EZ80-CODE16-NEXT:    ld (ix - 10), iy
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, 1
; EZ80-CODE16-NEXT:    ld e, c
; EZ80-CODE16-NEXT:    ld d, b
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 18), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 1
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 18)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 18), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    ld de, (ix + 14)
; EZ80-CODE16-NEXT:    ld bc, (ix + 16)
; EZ80-CODE16-NEXT:    call __lladd
; EZ80-CODE16-NEXT:    ld (ix - 18), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    ld bc, (ix - 6)
; EZ80-CODE16-NEXT:    call __lldivu
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 20)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 12)
; EZ80-CODE16-NEXT:    ld de, (ix - 14)
; EZ80-CODE16-NEXT:    ld bc, (ix - 16)
; EZ80-CODE16-NEXT:    call __lladd
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: udiv.fix.i64.32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 21
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld bc, (ix + 12)
; EZ80-NEXT:    ld de, (ix + 15)
; EZ80-NEXT:    ld hl, (ix + 18)
; EZ80-NEXT:    ld iy, (ix + 21)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __lldivu
; EZ80-NEXT:    ld (ix - 9), hl
; EZ80-NEXT:    ld (ix - 12), de
; EZ80-NEXT:    ld (ix - 15), bc
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld hl, (ix + 18)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ld bc, (ix + 12)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llremu
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld (ix - 3), iy
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, 256
; EZ80-NEXT:    push hl
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    call __llcmpu
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 6), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 6)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ccf
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ld iyl, a
; EZ80-NEXT:    inc iyl
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    ld (ix - 18), de
; EZ80-NEXT:    ld (ix - 21), bc
; EZ80-NEXT:    call __llctlz
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    ld a, iyl
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    push de
; EZ80-NEXT:    push de
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __lladd
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    jr nz, BB138_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:  BB138_2:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    ld hl, 0
; EZ80-NEXT:    jr nz, BB138_4
; EZ80-NEXT:  ; %bb.3:
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:  BB138_4:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    ld.sis de, 0
; EZ80-NEXT:    ; kill: def $de killed $de def $ude
; EZ80-NEXT:    jr nz, BB138_6
; EZ80-NEXT:  ; %bb.5:
; EZ80-NEXT:    ld e, c
; EZ80-NEXT:    ld d, b
; EZ80-NEXT:  BB138_6:
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld hl, 32
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llsub
; EZ80-NEXT:    ld (ix - 6), hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld hl, 32
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 9)
; EZ80-NEXT:    ld de, (ix - 12)
; EZ80-NEXT:    ld bc, (ix - 15)
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    ld (ix - 9), hl
; EZ80-NEXT:    ld (ix - 12), de
; EZ80-NEXT:    ld (ix - 15), bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    ld de, (ix - 18)
; EZ80-NEXT:    ld bc, (ix - 21)
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    ld (ix - 18), de
; EZ80-NEXT:    ld (ix - 21), bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, (ix - 6)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, 1
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld iy, 1
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    ld de, (ix + 18)
; EZ80-NEXT:    ld bc, (ix + 21)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __lladd
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    ld de, (ix - 18)
; EZ80-NEXT:    ld bc, (ix - 21)
; EZ80-NEXT:    call __lldivu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, (ix - 6)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 9)
; EZ80-NEXT:    ld de, (ix - 12)
; EZ80-NEXT:    ld bc, (ix - 15)
; EZ80-NEXT:    call __lladd
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i64 @llvm.udiv.fix.i64(i64 %0, i64 %1, i32 32)
  ret i64 %3
}

declare i8 @llvm.sdiv.fix.sat.i8(i8, i8, i32 immarg)
define i8 @sdiv.fix.sat.i8.7(i8, i8) {
; Z80-LABEL: sdiv.fix.sat.i8.7:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld d, (iy + 2)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld c, 7
; Z80-NEXT:    ld a, d
; Z80-NEXT:    rlc a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld h, a
; Z80-NEXT:    ld l, d
; Z80-NEXT:    call __sshl
; Z80-NEXT:    ld a, e
; Z80-NEXT:    rlc a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld b, a
; Z80-NEXT:    ld c, e
; Z80-NEXT:    call __sdivs
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    ld bc, -32768
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld bc, 32641
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    jr nc, BB139_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld de, -128
; Z80-NEXT:  BB139_2:
; Z80-NEXT:    ld l, e
; Z80-NEXT:    ld h, d
; Z80-NEXT:    ld bc, -32768
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld bc, -32641
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    jr c, BB139_4
; Z80-NEXT:  ; %bb.3:
; Z80-NEXT:    ld de, 127
; Z80-NEXT:  BB139_4:
; Z80-NEXT:    ld a, e
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: sdiv.fix.sat.i8.7:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld d, (iy + 2)
; EZ80-CODE16-NEXT:    ld e, (iy + 4)
; EZ80-CODE16-NEXT:    ld c, 7
; EZ80-CODE16-NEXT:    ld a, d
; EZ80-CODE16-NEXT:    rlc a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld h, a
; EZ80-CODE16-NEXT:    ld l, d
; EZ80-CODE16-NEXT:    call __sshl
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    rlc a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld b, a
; EZ80-CODE16-NEXT:    ld c, e
; EZ80-CODE16-NEXT:    call __sdivs
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    ld bc, -32768
; EZ80-CODE16-NEXT:    add hl, bc
; EZ80-CODE16-NEXT:    ld bc, 32641
; EZ80-CODE16-NEXT:    or a, a
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    jr nc, BB139_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld de, -128
; EZ80-CODE16-NEXT:  BB139_2:
; EZ80-CODE16-NEXT:    ld l, e
; EZ80-CODE16-NEXT:    ld h, d
; EZ80-CODE16-NEXT:    ld bc, -32768
; EZ80-CODE16-NEXT:    add hl, bc
; EZ80-CODE16-NEXT:    ld bc, -32641
; EZ80-CODE16-NEXT:    or a, a
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    jr c, BB139_4
; EZ80-CODE16-NEXT:  ; %bb.3:
; EZ80-CODE16-NEXT:    ld de, 127
; EZ80-CODE16-NEXT:  BB139_4:
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: sdiv.fix.sat.i8.7:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld d, (iy + 3)
; EZ80-NEXT:    ld e, (iy + 6)
; EZ80-NEXT:    ld c, 7
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    rlc a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ld h, a
; EZ80-NEXT:    ld l, d
; EZ80-NEXT:    call __sshl
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    rlc a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ld b, a
; EZ80-NEXT:    ld c, e
; EZ80-NEXT:    call __sdivs
; EZ80-NEXT:    ld e, l
; EZ80-NEXT:    ld d, h
; EZ80-NEXT:    ld.sis bc, -32768
; EZ80-NEXT:    add.sis hl, bc
; EZ80-NEXT:    ld.sis bc, 32641
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, bc
; EZ80-NEXT:    jr nc, BB139_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld.sis de, -128
; EZ80-NEXT:  BB139_2:
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    ld h, d
; EZ80-NEXT:    ld.sis bc, -32768
; EZ80-NEXT:    add.sis hl, bc
; EZ80-NEXT:    ld.sis bc, -32641
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, bc
; EZ80-NEXT:    jr c, BB139_4
; EZ80-NEXT:  ; %bb.3:
; EZ80-NEXT:    ld.sis de, 127
; EZ80-NEXT:  BB139_4:
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ret
  call i8 @llvm.sdiv.fix.sat.i8(i8 %0, i8 %1, i32 7)
  ret i8 %3
}
declare i16 @llvm.sdiv.fix.sat.i16(i16, i16, i32 immarg)
define i16 @sdiv.fix.sat.i16.7(i16, i16) {
; Z80-LABEL: sdiv.fix.sat.i16.7:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld a, 7
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld iyl, c
; Z80-NEXT:    ld iyh, b
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    call __lshl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    ld c, (ix + 6)
; Z80-NEXT:    ld b, (ix + 7)
; Z80-NEXT:    call __ldivs
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ld hl, -32768
; Z80-NEXT:    ld de, -1
; Z80-NEXT:    ld (ix - 2), c
; Z80-NEXT:    ld (ix - 1), b
; Z80-NEXT:    call __lcmps
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    jp m, BB140_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr z, BB140_3
; Z80-NEXT:    jr BB140_4
; Z80-NEXT:  BB140_2:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB140_4
; Z80-NEXT:  BB140_3:
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:  BB140_4:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB140_6
; Z80-NEXT:  ; %bb.5:
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:  BB140_6:
; Z80-NEXT:    ld bc, 32767
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __lcmps
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    jp m, BB140_8
; Z80-NEXT:  ; %bb.7:
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:  BB140_8:
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: sdiv.fix.sat.i16.7:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld a, 7
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld iyl, c
; EZ80-CODE16-NEXT:    ld iyh, b
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    call __lshl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    ld iy, (ix + 6)
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    ld bc, (ix + 6)
; EZ80-CODE16-NEXT:    call __ldivs
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ld hl, -32768
; EZ80-CODE16-NEXT:    ld de, -1
; EZ80-CODE16-NEXT:    ld (ix - 2), bc
; EZ80-CODE16-NEXT:    call __lcmps
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    jp m, BB140_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr z, BB140_3
; EZ80-CODE16-NEXT:    jr BB140_4
; EZ80-CODE16-NEXT:  BB140_2:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB140_4
; EZ80-CODE16-NEXT:  BB140_3:
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:  BB140_4:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB140_6
; EZ80-CODE16-NEXT:  ; %bb.5:
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:  BB140_6:
; EZ80-CODE16-NEXT:    ld bc, 32767
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __lcmps
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    jp m, BB140_8
; EZ80-CODE16-NEXT:  ; %bb.7:
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:  BB140_8:
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: sdiv.fix.sat.i16.7:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld iy, (ix + 6)
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    ld e, 7
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld b, a
; EZ80-NEXT:    ld c, iyl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld d, 0
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    call __lshl
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld iy, (ix + 9)
; EZ80-NEXT:    ld a, iyh
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld b, a
; EZ80-NEXT:    ld c, iyl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    ld a, iyl
; EZ80-NEXT:    call __ldivs
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld hl, -32768
; EZ80-NEXT:    ld e, -1
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    call __lcmps
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    jp m, BB140_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld c, 0
; EZ80-NEXT:    bit 0, c
; EZ80-NEXT:    jr z, BB140_3
; EZ80-NEXT:    jr BB140_4
; EZ80-NEXT:  BB140_2:
; EZ80-NEXT:    ld c, 1
; EZ80-NEXT:    bit 0, c
; EZ80-NEXT:    jr nz, BB140_4
; EZ80-NEXT:  BB140_3:
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:  BB140_4:
; EZ80-NEXT:    bit 0, c
; EZ80-NEXT:    jr nz, BB140_6
; EZ80-NEXT:  ; %bb.5:
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:  BB140_6:
; EZ80-NEXT:    ld bc, 32767
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __lcmps
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    jp m, BB140_8
; EZ80-NEXT:  ; %bb.7:
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:  BB140_8:
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld d, iyh
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i16 @llvm.sdiv.fix.sat.i16(i16 %0, i16 %1, i32 7)
  ret i16 %3
}
define i16 @sdiv.fix.sat.i16.15(i16, i16) {
; Z80-LABEL: sdiv.fix.sat.i16.15:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld a, 15
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld iyl, c
; Z80-NEXT:    ld iyh, b
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    call __lshl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:    ld c, (ix + 6)
; Z80-NEXT:    ld b, (ix + 7)
; Z80-NEXT:    call __ldivs
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ld hl, -32768
; Z80-NEXT:    ld de, -1
; Z80-NEXT:    ld (ix - 2), c
; Z80-NEXT:    ld (ix - 1), b
; Z80-NEXT:    call __lcmps
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    jp m, BB141_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr z, BB141_3
; Z80-NEXT:    jr BB141_4
; Z80-NEXT:  BB141_2:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB141_4
; Z80-NEXT:  BB141_3:
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:  BB141_4:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB141_6
; Z80-NEXT:  ; %bb.5:
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:  BB141_6:
; Z80-NEXT:    ld bc, 32767
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    call __lcmps
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    jp m, BB141_8
; Z80-NEXT:  ; %bb.7:
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:  BB141_8:
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: sdiv.fix.sat.i16.15:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld a, 15
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld iyl, c
; EZ80-CODE16-NEXT:    ld iyh, b
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    call __lshl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    ld iy, (ix + 6)
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:    ld bc, (ix + 6)
; EZ80-CODE16-NEXT:    call __ldivs
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ld hl, -32768
; EZ80-CODE16-NEXT:    ld de, -1
; EZ80-CODE16-NEXT:    ld (ix - 2), bc
; EZ80-CODE16-NEXT:    call __lcmps
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    jp m, BB141_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr z, BB141_3
; EZ80-CODE16-NEXT:    jr BB141_4
; EZ80-CODE16-NEXT:  BB141_2:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB141_4
; EZ80-CODE16-NEXT:  BB141_3:
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:  BB141_4:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB141_6
; EZ80-CODE16-NEXT:  ; %bb.5:
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:  BB141_6:
; EZ80-CODE16-NEXT:    ld bc, 32767
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    call __lcmps
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    jp m, BB141_8
; EZ80-CODE16-NEXT:  ; %bb.7:
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:  BB141_8:
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: sdiv.fix.sat.i16.15:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld de, (ix + 6)
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld b, a
; EZ80-NEXT:    ld c, e
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld d, 0
; EZ80-NEXT:    ld e, 15
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    call __lshl
; EZ80-NEXT:    ld (ix - 3), bc
; EZ80-NEXT:    ld iy, (ix + 9)
; EZ80-NEXT:    ld e, iyh
; EZ80-NEXT:    ld l, e
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld b, e
; EZ80-NEXT:    ld c, iyl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld a, iyl
; EZ80-NEXT:    call __ldivs
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ld hl, -32768
; EZ80-NEXT:    ld e, -1
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    call __lcmps
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    jp m, BB141_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld c, 0
; EZ80-NEXT:    bit 0, c
; EZ80-NEXT:    jr z, BB141_3
; EZ80-NEXT:    jr BB141_4
; EZ80-NEXT:  BB141_2:
; EZ80-NEXT:    ld c, 1
; EZ80-NEXT:    bit 0, c
; EZ80-NEXT:    jr nz, BB141_4
; EZ80-NEXT:  BB141_3:
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:  BB141_4:
; EZ80-NEXT:    bit 0, c
; EZ80-NEXT:    jr nz, BB141_6
; EZ80-NEXT:  ; %bb.5:
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:  BB141_6:
; EZ80-NEXT:    ld bc, 32767
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __lcmps
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    jp m, BB141_8
; EZ80-NEXT:  ; %bb.7:
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:  BB141_8:
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld d, iyh
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i16 @llvm.sdiv.fix.sat.i16(i16 %0, i16 %1, i32 15)
  ret i16 %3
}
declare i32 @llvm.sdiv.fix.sat.i32(i32, i32, i32 immarg)
define i32 @sdiv.fix.sat.i32.15(i32, i32) {
; Z80-LABEL: sdiv.fix.sat.i32.15:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -9
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld hl, 15
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld (ix - 4), e
; Z80-NEXT:    ld (ix - 3), d
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    call __lldivs
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld (ix - 6), c
; Z80-NEXT:    ld (ix - 5), b
; Z80-NEXT:    push bc
; Z80-NEXT:    ld (ix - 2), e
; Z80-NEXT:    ld (ix - 1), d
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld bc, -1
; Z80-NEXT:    push bc
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    ld de, -32768
; Z80-NEXT:    call __llcmps
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 9), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 9)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    jp m, BB142_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    jr BB142_3
; Z80-NEXT:  BB142_2:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:  BB142_3:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    ld c, (ix - 6)
; Z80-NEXT:    ld b, (ix - 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    jp z, BB142_10
; Z80-NEXT:  ; %bb.4:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB142_11
; Z80-NEXT:  BB142_5:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB142_12
; Z80-NEXT:  BB142_6:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB142_8
; Z80-NEXT:  BB142_7:
; Z80-NEXT:    ld iy, -1
; Z80-NEXT:  BB142_8:
; Z80-NEXT:    ld de, 32767
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    ld e, (ix - 2)
; Z80-NEXT:    ld d, (ix - 1)
; Z80-NEXT:    call __llcmps
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 6), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld iy, 10
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld sp, iy
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    jp m, BB142_13
; Z80-NEXT:  ; %bb.9:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr z, BB142_14
; Z80-NEXT:    jr BB142_15
; Z80-NEXT:  BB142_10:
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp nz, BB142_5
; Z80-NEXT:  BB142_11:
; Z80-NEXT:    ld de, -32768
; Z80-NEXT:    ld (ix - 2), e
; Z80-NEXT:    ld (ix - 1), d
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp nz, BB142_6
; Z80-NEXT:  BB142_12:
; Z80-NEXT:    ld de, -1
; Z80-NEXT:    ld c, e
; Z80-NEXT:    ld b, d
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB142_7
; Z80-NEXT:    jp BB142_8
; Z80-NEXT:  BB142_13:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB142_15
; Z80-NEXT:  BB142_14:
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:  BB142_15:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB142_17
; Z80-NEXT:  ; %bb.16:
; Z80-NEXT:    ld de, 32767
; Z80-NEXT:    ld (ix - 2), e
; Z80-NEXT:    ld (ix - 1), d
; Z80-NEXT:  BB142_17:
; Z80-NEXT:    ld e, (ix - 2)
; Z80-NEXT:    ld d, (ix - 1)
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: sdiv.fix.sat.i32.15:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 9
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld hl, 15
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld (ix - 4), de
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    call __lldivs
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld (ix - 8), iy
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld (ix - 6), bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld (ix - 2), de
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld bc, -1
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    ld de, -32768
; EZ80-CODE16-NEXT:    call __llcmps
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 9), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 9)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    jp m, BB142_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    jr BB142_3
; EZ80-CODE16-NEXT:  BB142_2:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:  BB142_3:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    ld bc, (ix - 6)
; EZ80-CODE16-NEXT:    ld iy, (ix - 8)
; EZ80-CODE16-NEXT:    jp z, BB142_10
; EZ80-CODE16-NEXT:  ; %bb.4:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB142_11
; EZ80-CODE16-NEXT:  BB142_5:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB142_12
; EZ80-CODE16-NEXT:  BB142_6:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB142_8
; EZ80-CODE16-NEXT:  BB142_7:
; EZ80-CODE16-NEXT:    ld iy, -1
; EZ80-CODE16-NEXT:  BB142_8:
; EZ80-CODE16-NEXT:    ld de, 32767
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    ld de, (ix - 2)
; EZ80-CODE16-NEXT:    call __llcmps
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 6), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld iy, 10
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld sp, iy
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 6)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    jp m, BB142_13
; EZ80-CODE16-NEXT:  ; %bb.9:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr z, BB142_14
; EZ80-CODE16-NEXT:    jr BB142_15
; EZ80-CODE16-NEXT:  BB142_10:
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp nz, BB142_5
; EZ80-CODE16-NEXT:  BB142_11:
; EZ80-CODE16-NEXT:    ld de, -32768
; EZ80-CODE16-NEXT:    ld (ix - 2), de
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp nz, BB142_6
; EZ80-CODE16-NEXT:  BB142_12:
; EZ80-CODE16-NEXT:    ld de, -1
; EZ80-CODE16-NEXT:    ld c, e
; EZ80-CODE16-NEXT:    ld b, d
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB142_7
; EZ80-CODE16-NEXT:    jp BB142_8
; EZ80-CODE16-NEXT:  BB142_13:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB142_15
; EZ80-CODE16-NEXT:  BB142_14:
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:  BB142_15:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB142_17
; EZ80-CODE16-NEXT:  ; %bb.16:
; EZ80-CODE16-NEXT:    ld de, 32767
; EZ80-CODE16-NEXT:    ld (ix - 2), de
; EZ80-CODE16-NEXT:  BB142_17:
; EZ80-CODE16-NEXT:    ld de, (ix - 2)
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: sdiv.fix.sat.i32.15:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 10
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld c, (ix + 9)
; EZ80-NEXT:    ld a, (ix + 15)
; EZ80-NEXT:    ld l, c
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld e, c
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld hl, 15
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    ld (ix - 6), de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld hl, (ix + 12)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    ld de, (ix - 6)
; EZ80-NEXT:    call __lldivs
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld (ix - 6), bc
; EZ80-NEXT:    push bc
; EZ80-NEXT:    ld (ix - 9), de
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld (ix - 3), iy
; EZ80-NEXT:    push iy
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld de, -128
; EZ80-NEXT:    ld.sis bc, -1
; EZ80-NEXT:    call __llcmps
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 10), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 10)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    jp m, BB142_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    jr BB142_3
; EZ80-NEXT:  BB142_2:
; EZ80-NEXT:    ld a, 1
; EZ80-NEXT:  BB142_3:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    ld iy, (ix - 9)
; EZ80-NEXT:    jp z, BB142_9
; EZ80-NEXT:  ; %bb.4:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB142_10
; EZ80-NEXT:  BB142_5:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB142_7
; EZ80-NEXT:  BB142_6:
; EZ80-NEXT:    ld.sis hl, -1
; EZ80-NEXT:    ; kill: def $hl killed $hl def $uhl
; EZ80-NEXT:    ld (ix - 6), hl
; EZ80-NEXT:  BB142_7:
; EZ80-NEXT:    ld bc, -1
; EZ80-NEXT:    ld de, 127
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    push bc
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    lea de, iy
; EZ80-NEXT:    ld bc, (ix - 6)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llcmps
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 6), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 6)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    jp m, BB142_11
; EZ80-NEXT:  ; %bb.8:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr z, BB142_12
; EZ80-NEXT:    jr BB142_13
; EZ80-NEXT:  BB142_9:
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB142_5
; EZ80-NEXT:  BB142_10:
; EZ80-NEXT:    ld iy, -128
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB142_6
; EZ80-NEXT:    jp BB142_7
; EZ80-NEXT:  BB142_11:
; EZ80-NEXT:    ld a, 1
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB142_13
; EZ80-NEXT:  BB142_12:
; EZ80-NEXT:    scf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:  BB142_13:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB142_15
; EZ80-NEXT:  ; %bb.14:
; EZ80-NEXT:    ld iy, 127
; EZ80-NEXT:  BB142_15:
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i32 @llvm.sdiv.fix.sat.i32(i32 %0, i32 %1, i32 15)
  ret i32 %3
}
define i32 @sdiv.fix.sat.i32.31(i32, i32) {
; Z80-LABEL: sdiv.fix.sat.i32.31:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -9
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    ld hl, 31
; Z80-NEXT:    push hl
; Z80-NEXT:    push bc
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld (ix - 4), e
; Z80-NEXT:    ld (ix - 3), d
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add iy, iy
; Z80-NEXT:    sbc hl, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    call __lldivs
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld (ix - 6), c
; Z80-NEXT:    ld (ix - 5), b
; Z80-NEXT:    push bc
; Z80-NEXT:    ld (ix - 2), e
; Z80-NEXT:    ld (ix - 1), d
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld bc, -1
; Z80-NEXT:    push bc
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    ld de, -32768
; Z80-NEXT:    call __llcmps
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 9), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 9)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    jp m, BB143_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    jr BB143_3
; Z80-NEXT:  BB143_2:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:  BB143_3:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    ld c, (ix - 6)
; Z80-NEXT:    ld b, (ix - 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    jp z, BB143_10
; Z80-NEXT:  ; %bb.4:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB143_11
; Z80-NEXT:  BB143_5:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB143_12
; Z80-NEXT:  BB143_6:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB143_8
; Z80-NEXT:  BB143_7:
; Z80-NEXT:    ld iy, -1
; Z80-NEXT:  BB143_8:
; Z80-NEXT:    ld de, 32767
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    ld e, (ix - 2)
; Z80-NEXT:    ld d, (ix - 1)
; Z80-NEXT:    call __llcmps
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 6), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld iy, 10
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld sp, iy
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    call pe, __setflag
; Z80-NEXT:    jp m, BB143_13
; Z80-NEXT:  ; %bb.9:
; Z80-NEXT:    ld a, 0
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr z, BB143_14
; Z80-NEXT:    jr BB143_15
; Z80-NEXT:  BB143_10:
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp nz, BB143_5
; Z80-NEXT:  BB143_11:
; Z80-NEXT:    ld de, -32768
; Z80-NEXT:    ld (ix - 2), e
; Z80-NEXT:    ld (ix - 1), d
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp nz, BB143_6
; Z80-NEXT:  BB143_12:
; Z80-NEXT:    ld de, -1
; Z80-NEXT:    ld c, e
; Z80-NEXT:    ld b, d
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jp z, BB143_7
; Z80-NEXT:    jp BB143_8
; Z80-NEXT:  BB143_13:
; Z80-NEXT:    ld a, 1
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB143_15
; Z80-NEXT:  BB143_14:
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:  BB143_15:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB143_17
; Z80-NEXT:  ; %bb.16:
; Z80-NEXT:    ld de, 32767
; Z80-NEXT:    ld (ix - 2), e
; Z80-NEXT:    ld (ix - 1), d
; Z80-NEXT:  BB143_17:
; Z80-NEXT:    ld e, (ix - 2)
; Z80-NEXT:    ld d, (ix - 1)
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: sdiv.fix.sat.i32.31:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 9
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 6)
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    ld hl, 31
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld (ix - 4), de
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    add iy, iy
; EZ80-CODE16-NEXT:    sbc hl, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    call __lldivs
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld (ix - 8), iy
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld (ix - 6), bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld (ix - 2), de
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld bc, -1
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    ld de, -32768
; EZ80-CODE16-NEXT:    call __llcmps
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 9), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 9)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    jp m, BB143_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    jr BB143_3
; EZ80-CODE16-NEXT:  BB143_2:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:  BB143_3:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    ld bc, (ix - 6)
; EZ80-CODE16-NEXT:    ld iy, (ix - 8)
; EZ80-CODE16-NEXT:    jp z, BB143_10
; EZ80-CODE16-NEXT:  ; %bb.4:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB143_11
; EZ80-CODE16-NEXT:  BB143_5:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB143_12
; EZ80-CODE16-NEXT:  BB143_6:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB143_8
; EZ80-CODE16-NEXT:  BB143_7:
; EZ80-CODE16-NEXT:    ld iy, -1
; EZ80-CODE16-NEXT:  BB143_8:
; EZ80-CODE16-NEXT:    ld de, 32767
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    ld de, (ix - 2)
; EZ80-CODE16-NEXT:    call __llcmps
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 6), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld iy, 10
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld sp, iy
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 6)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    call pe, __setflag
; EZ80-CODE16-NEXT:    jp m, BB143_13
; EZ80-CODE16-NEXT:  ; %bb.9:
; EZ80-CODE16-NEXT:    ld a, 0
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr z, BB143_14
; EZ80-CODE16-NEXT:    jr BB143_15
; EZ80-CODE16-NEXT:  BB143_10:
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp nz, BB143_5
; EZ80-CODE16-NEXT:  BB143_11:
; EZ80-CODE16-NEXT:    ld de, -32768
; EZ80-CODE16-NEXT:    ld (ix - 2), de
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp nz, BB143_6
; EZ80-CODE16-NEXT:  BB143_12:
; EZ80-CODE16-NEXT:    ld de, -1
; EZ80-CODE16-NEXT:    ld c, e
; EZ80-CODE16-NEXT:    ld b, d
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jp z, BB143_7
; EZ80-CODE16-NEXT:    jp BB143_8
; EZ80-CODE16-NEXT:  BB143_13:
; EZ80-CODE16-NEXT:    ld a, 1
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB143_15
; EZ80-CODE16-NEXT:  BB143_14:
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:  BB143_15:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB143_17
; EZ80-CODE16-NEXT:  ; %bb.16:
; EZ80-CODE16-NEXT:    ld de, 32767
; EZ80-CODE16-NEXT:    ld (ix - 2), de
; EZ80-CODE16-NEXT:  BB143_17:
; EZ80-CODE16-NEXT:    ld de, (ix - 2)
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: sdiv.fix.sat.i32.31:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 10
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld c, (ix + 9)
; EZ80-NEXT:    ld a, (ix + 15)
; EZ80-NEXT:    ld l, c
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld e, c
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop bc
; EZ80-NEXT:    ld hl, 31
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    ld (ix - 6), de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    rlc l
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop de
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    add iy, iy
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld hl, (ix + 12)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    ld de, (ix - 6)
; EZ80-NEXT:    call __lldivs
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld (ix - 6), bc
; EZ80-NEXT:    push bc
; EZ80-NEXT:    ld (ix - 9), de
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld (ix - 3), iy
; EZ80-NEXT:    push iy
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld de, -128
; EZ80-NEXT:    ld.sis bc, -1
; EZ80-NEXT:    call __llcmps
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 10), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 10)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    jp m, BB143_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    jr BB143_3
; EZ80-NEXT:  BB143_2:
; EZ80-NEXT:    ld a, 1
; EZ80-NEXT:  BB143_3:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    ld iy, (ix - 9)
; EZ80-NEXT:    jp z, BB143_9
; EZ80-NEXT:  ; %bb.4:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB143_10
; EZ80-NEXT:  BB143_5:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB143_7
; EZ80-NEXT:  BB143_6:
; EZ80-NEXT:    ld.sis hl, -1
; EZ80-NEXT:    ; kill: def $hl killed $hl def $uhl
; EZ80-NEXT:    ld (ix - 6), hl
; EZ80-NEXT:  BB143_7:
; EZ80-NEXT:    ld bc, -1
; EZ80-NEXT:    ld de, 127
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    push bc
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    lea de, iy
; EZ80-NEXT:    ld bc, (ix - 6)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llcmps
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 6), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 6)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    call pe, __setflag
; EZ80-NEXT:    jp m, BB143_11
; EZ80-NEXT:  ; %bb.8:
; EZ80-NEXT:    ld a, 0
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr z, BB143_12
; EZ80-NEXT:    jr BB143_13
; EZ80-NEXT:  BB143_9:
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp nz, BB143_5
; EZ80-NEXT:  BB143_10:
; EZ80-NEXT:    ld iy, -128
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jp z, BB143_6
; EZ80-NEXT:    jp BB143_7
; EZ80-NEXT:  BB143_11:
; EZ80-NEXT:    ld a, 1
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB143_13
; EZ80-NEXT:  BB143_12:
; EZ80-NEXT:    scf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:  BB143_13:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB143_15
; EZ80-NEXT:  ; %bb.14:
; EZ80-NEXT:    ld iy, 127
; EZ80-NEXT:  BB143_15:
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i32 @llvm.sdiv.fix.sat.i32(i32 %0, i32 %1, i32 31)
  ret i32 %3
}
declare i64 @llvm.sdiv.fix.sat.i64(i64, i64, i32 immarg)
define i64 @sdiv.fix.sat.i64.31(i64, i64) {
; Z80-LABEL: sdiv.fix.sat.i64.31:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -23
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld c, (ix + 14)
; Z80-NEXT:    ld b, (ix + 15)
; Z80-NEXT:    ld e, (ix + 16)
; Z80-NEXT:    ld d, (ix + 17)
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    push bc
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    call __lldivs
; Z80-NEXT:    ld (ix - 14), l
; Z80-NEXT:    ld (ix - 13), h
; Z80-NEXT:    ld (ix - 16), e
; Z80-NEXT:    ld (ix - 15), d
; Z80-NEXT:    ld (ix - 18), c
; Z80-NEXT:    ld (ix - 17), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 20), l
; Z80-NEXT:    ld (ix - 19), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 16)
; Z80-NEXT:    ld h, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    call __llrems
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld (ix - 4), e
; Z80-NEXT:    ld (ix - 3), d
; Z80-NEXT:    ld (ix - 6), c
; Z80-NEXT:    ld (ix - 5), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 63
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    ld c, (ix - 6)
; Z80-NEXT:    ld b, (ix - 5)
; Z80-NEXT:    call __llshrs
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    ld c, (ix - 6)
; Z80-NEXT:    ld b, (ix - 5)
; Z80-NEXT:    call __llxor
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    ld (ix - 12), e
; Z80-NEXT:    ld (ix - 11), d
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 22), l
; Z80-NEXT:    ld (ix - 21), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    push de
; Z80-NEXT:    push de
; Z80-NEXT:    ld hl, 16384
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    ld e, (ix - 12)
; Z80-NEXT:    ld d, (ix - 11)
; Z80-NEXT:    call __llcmpu
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 23), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 23)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    ccf
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld iyl, a
; Z80-NEXT:    inc iyl
; Z80-NEXT:    ld l, (ix - 22)
; Z80-NEXT:    ld h, (ix - 21)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    ld e, (ix - 12)
; Z80-NEXT:    ld d, (ix - 11)
; Z80-NEXT:    call __llctlz
; Z80-NEXT:    ld l, a
; Z80-NEXT:    ld a, iyl
; Z80-NEXT:    pop de
; Z80-NEXT:    ld h, 0
; Z80-NEXT:    ld de, -1
; Z80-NEXT:    push de
; Z80-NEXT:    push de
; Z80-NEXT:    push de
; Z80-NEXT:    push de
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    ld e, c
; Z80-NEXT:    ld d, b
; Z80-NEXT:    call __lladd
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr z, BB144_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld hl, 30
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:  BB144_2:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    jr nz, BB144_4
; Z80-NEXT:  ; %bb.3:
; Z80-NEXT:    ex de, hl
; Z80-NEXT:  BB144_4:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    jr nz, BB144_6
; Z80-NEXT:  ; %bb.5:
; Z80-NEXT:    ld e, c
; Z80-NEXT:    ld d, b
; Z80-NEXT:  BB144_6:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    jr nz, BB144_8
; Z80-NEXT:  ; %bb.7:
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:  BB144_8:
; Z80-NEXT:    ld iy, 31
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    ld c, l
; Z80-NEXT:    ld b, h
; Z80-NEXT:    push bc
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, c
; Z80-NEXT:    ld d, b
; Z80-NEXT:    call __llsub
; Z80-NEXT:    ld (ix - 12), l
; Z80-NEXT:    ld (ix - 11), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 31
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 20)
; Z80-NEXT:    ld h, (ix - 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 14)
; Z80-NEXT:    ld h, (ix - 13)
; Z80-NEXT:    ld e, (ix - 16)
; Z80-NEXT:    ld d, (ix - 15)
; Z80-NEXT:    ld c, (ix - 18)
; Z80-NEXT:    ld b, (ix - 17)
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 14), l
; Z80-NEXT:    ld (ix - 13), h
; Z80-NEXT:    ld (ix - 16), e
; Z80-NEXT:    ld (ix - 15), d
; Z80-NEXT:    ld (ix - 18), c
; Z80-NEXT:    ld (ix - 17), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 20), l
; Z80-NEXT:    ld (ix - 19), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    ld c, (ix - 6)
; Z80-NEXT:    ld b, (ix - 5)
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld (ix - 4), e
; Z80-NEXT:    ld (ix - 3), d
; Z80-NEXT:    ld (ix - 6), c
; Z80-NEXT:    ld (ix - 5), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix - 12)
; Z80-NEXT:    ld h, (ix - 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    ld hl, 1
; Z80-NEXT:    ld e, c
; Z80-NEXT:    ld d, b
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 1
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    ld e, (ix + 14)
; Z80-NEXT:    ld d, (ix + 15)
; Z80-NEXT:    ld c, (ix + 16)
; Z80-NEXT:    ld b, (ix + 17)
; Z80-NEXT:    call __lladd
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    ld c, (ix - 6)
; Z80-NEXT:    ld b, (ix - 5)
; Z80-NEXT:    call __lldivs
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix - 12)
; Z80-NEXT:    ld h, (ix - 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    call __llshrs
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 20)
; Z80-NEXT:    ld h, (ix - 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 14)
; Z80-NEXT:    ld h, (ix - 13)
; Z80-NEXT:    ld e, (ix - 16)
; Z80-NEXT:    ld d, (ix - 15)
; Z80-NEXT:    ld c, (ix - 18)
; Z80-NEXT:    ld b, (ix - 17)
; Z80-NEXT:    call __lladd
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: sdiv.fix.sat.i64.31:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 23
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld iy, (ix + 12)
; EZ80-CODE16-NEXT:    ld bc, (ix + 14)
; EZ80-CODE16-NEXT:    ld de, (ix + 16)
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    call __lldivs
; EZ80-CODE16-NEXT:    ld (ix - 14), hl
; EZ80-CODE16-NEXT:    ld (ix - 16), de
; EZ80-CODE16-NEXT:    ld (ix - 18), bc
; EZ80-CODE16-NEXT:    ld (ix - 20), iy
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 16)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 14)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    call __llrems
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld (ix - 4), de
; EZ80-CODE16-NEXT:    ld (ix - 6), bc
; EZ80-CODE16-NEXT:    ld (ix - 10), iy
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 63
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    ld bc, (ix - 6)
; EZ80-CODE16-NEXT:    call __llshrs
; EZ80-CODE16-NEXT:    ld (ix - 8), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    ld bc, (ix - 6)
; EZ80-CODE16-NEXT:    call __llxor
; EZ80-CODE16-NEXT:    ld (ix - 8), hl
; EZ80-CODE16-NEXT:    ld (ix - 12), de
; EZ80-CODE16-NEXT:    ld (ix - 22), iy
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, 16384
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    ld de, (ix - 12)
; EZ80-CODE16-NEXT:    call __llcmpu
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 23), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 23)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld iyl, a
; EZ80-CODE16-NEXT:    inc iyl
; EZ80-CODE16-NEXT:    ld hl, (ix - 22)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    ld de, (ix - 12)
; EZ80-CODE16-NEXT:    call __llctlz
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    ld a, iyl
; EZ80-CODE16-NEXT:    pop de
; EZ80-CODE16-NEXT:    ld h, 0
; EZ80-CODE16-NEXT:    ld de, -1
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld e, c
; EZ80-CODE16-NEXT:    ld d, b
; EZ80-CODE16-NEXT:    call __lladd
; EZ80-CODE16-NEXT:    ld (ix - 8), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr z, BB144_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld hl, 30
; EZ80-CODE16-NEXT:    ld (ix - 8), hl
; EZ80-CODE16-NEXT:  BB144_2:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    jr nz, BB144_4
; EZ80-CODE16-NEXT:  ; %bb.3:
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:  BB144_4:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    jr nz, BB144_6
; EZ80-CODE16-NEXT:  ; %bb.5:
; EZ80-CODE16-NEXT:    ld e, c
; EZ80-CODE16-NEXT:    ld d, b
; EZ80-CODE16-NEXT:  BB144_6:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    jr nz, BB144_8
; EZ80-CODE16-NEXT:  ; %bb.7:
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:  BB144_8:
; EZ80-CODE16-NEXT:    ld iy, 31
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    ld c, l
; EZ80-CODE16-NEXT:    ld b, h
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    ld e, c
; EZ80-CODE16-NEXT:    ld d, b
; EZ80-CODE16-NEXT:    call __llsub
; EZ80-CODE16-NEXT:    ld (ix - 12), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 31
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 20)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 14)
; EZ80-CODE16-NEXT:    ld de, (ix - 16)
; EZ80-CODE16-NEXT:    ld bc, (ix - 18)
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 14), hl
; EZ80-CODE16-NEXT:    ld (ix - 16), de
; EZ80-CODE16-NEXT:    ld (ix - 18), bc
; EZ80-CODE16-NEXT:    ld (ix - 20), iy
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    ld bc, (ix - 6)
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld (ix - 4), de
; EZ80-CODE16-NEXT:    ld (ix - 6), bc
; EZ80-CODE16-NEXT:    ld (ix - 8), iy
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, 1
; EZ80-CODE16-NEXT:    ld e, c
; EZ80-CODE16-NEXT:    ld d, b
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 10), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 1
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 10), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    ld de, (ix + 14)
; EZ80-CODE16-NEXT:    ld bc, (ix + 16)
; EZ80-CODE16-NEXT:    call __lladd
; EZ80-CODE16-NEXT:    ld (ix - 10), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    ld bc, (ix - 6)
; EZ80-CODE16-NEXT:    call __lldivs
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    call __llshrs
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 20)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 14)
; EZ80-CODE16-NEXT:    ld de, (ix - 16)
; EZ80-CODE16-NEXT:    ld bc, (ix - 18)
; EZ80-CODE16-NEXT:    call __lladd
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: sdiv.fix.sat.i64.31:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 24
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld bc, (ix + 12)
; EZ80-NEXT:    ld de, (ix + 15)
; EZ80-NEXT:    ld hl, (ix + 18)
; EZ80-NEXT:    ld iy, (ix + 21)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __lldivs
; EZ80-NEXT:    ld (ix - 15), hl
; EZ80-NEXT:    ld (ix - 18), de
; EZ80-NEXT:    ld (ix - 21), bc
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld hl, (ix + 18)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ld bc, (ix + 12)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llrems
; EZ80-NEXT:    ld (ix - 12), hl
; EZ80-NEXT:    ld (ix - 3), de
; EZ80-NEXT:    ld (ix - 6), bc
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld de, 63
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld bc, (ix - 6)
; EZ80-NEXT:    call __llshrs
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 12)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld bc, (ix - 6)
; EZ80-NEXT:    call __llxor
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld iy, 64
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llcmpu
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 9), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 9)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ccf
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ld iyl, a
; EZ80-NEXT:    inc iyl
; EZ80-NEXT:    call __llctlz
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    ld a, iyl
; EZ80-NEXT:    ld de, -1
; EZ80-NEXT:    push de
; EZ80-NEXT:    push de
; EZ80-NEXT:    push de
; EZ80-NEXT:    inc de
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __lladd
; EZ80-NEXT:    ld (ix - 9), hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr z, BB144_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld hl, 30
; EZ80-NEXT:    ld (ix - 9), hl
; EZ80-NEXT:  BB144_2:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    jr nz, BB144_4
; EZ80-NEXT:  ; %bb.3:
; EZ80-NEXT:    push de
; EZ80-NEXT:    pop iy
; EZ80-NEXT:  BB144_4:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    ld.sis de, 0
; EZ80-NEXT:    ; kill: def $de killed $de def $ude
; EZ80-NEXT:    jr nz, BB144_6
; EZ80-NEXT:  ; %bb.5:
; EZ80-NEXT:    ld e, c
; EZ80-NEXT:    ld d, b
; EZ80-NEXT:  BB144_6:
; EZ80-NEXT:    ld hl, 31
; EZ80-NEXT:    push de
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld de, (ix - 9)
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llsub
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld (ix - 24), iy
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld hl, 31
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 15)
; EZ80-NEXT:    ld de, (ix - 18)
; EZ80-NEXT:    ld bc, (ix - 21)
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    ld (ix - 15), hl
; EZ80-NEXT:    ld (ix - 18), de
; EZ80-NEXT:    ld (ix - 21), bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, (ix - 9)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 12)
; EZ80-NEXT:    ld de, (ix - 3)
; EZ80-NEXT:    ld bc, (ix - 6)
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    ld (ix - 6), de
; EZ80-NEXT:    ld (ix - 9), bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld hl, 1
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld iy, 1
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    ld de, (ix + 18)
; EZ80-NEXT:    ld bc, (ix + 21)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __lladd
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    ld de, (ix - 6)
; EZ80-NEXT:    ld bc, (ix - 9)
; EZ80-NEXT:    call __lldivs
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, (ix - 24)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshrs
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 15)
; EZ80-NEXT:    ld de, (ix - 18)
; EZ80-NEXT:    ld bc, (ix - 21)
; EZ80-NEXT:    call __lladd
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i64 @llvm.sdiv.fix.sat.i64(i64 %0, i64 %1, i32 31)
  ret i64 %3
}

declare i8 @llvm.udiv.fix.sat.i8(i8, i8, i32 immarg)
define i8 @udiv.fix.sat.i8.8(i8, i8) {
; Z80-LABEL: udiv.fix.sat.i8.8:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld a, (iy + 2)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld b, 0
; Z80-NEXT:    ld c, a
; Z80-NEXT:    ld h, c
; Z80-NEXT:    ld l, b
; Z80-NEXT:    ld c, e
; Z80-NEXT:    call __sdivu
; Z80-NEXT:    ld e, l
; Z80-NEXT:    ld d, h
; Z80-NEXT:    ld bc, 255
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:    jr c, BB145_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld de, 255
; Z80-NEXT:  BB145_2:
; Z80-NEXT:    ld a, e
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: udiv.fix.sat.i8.8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld a, (iy + 2)
; EZ80-CODE16-NEXT:    ld e, (iy + 4)
; EZ80-CODE16-NEXT:    ld b, 0
; EZ80-CODE16-NEXT:    ld c, a
; EZ80-CODE16-NEXT:    ld h, c
; EZ80-CODE16-NEXT:    ld l, b
; EZ80-CODE16-NEXT:    ld c, e
; EZ80-CODE16-NEXT:    call __sdivu
; EZ80-CODE16-NEXT:    ld e, l
; EZ80-CODE16-NEXT:    ld d, h
; EZ80-CODE16-NEXT:    ld bc, 255
; EZ80-CODE16-NEXT:    or a, a
; EZ80-CODE16-NEXT:    sbc hl, bc
; EZ80-CODE16-NEXT:    jr c, BB145_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld de, 255
; EZ80-CODE16-NEXT:  BB145_2:
; EZ80-CODE16-NEXT:    ld a, e
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: udiv.fix.sat.i8.8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld a, (iy + 3)
; EZ80-NEXT:    ld e, (iy + 6)
; EZ80-NEXT:    ld b, 0
; EZ80-NEXT:    ld c, a
; EZ80-NEXT:    ld h, c
; EZ80-NEXT:    ld l, b
; EZ80-NEXT:    ld c, e
; EZ80-NEXT:    call __sdivu
; EZ80-NEXT:    ld e, l
; EZ80-NEXT:    ld d, h
; EZ80-NEXT:    ld.sis bc, 255
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, bc
; EZ80-NEXT:    jr c, BB145_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    ld.sis de, 255
; EZ80-NEXT:  BB145_2:
; EZ80-NEXT:    ld a, e
; EZ80-NEXT:    ret
  call i8 @llvm.udiv.fix.sat.i8(i8 %0, i8 %1, i32 8)
  ret i8 %3
}
declare i16 @llvm.udiv.fix.sat.i16(i16, i16, i32 immarg)
define i16 @udiv.fix.sat.i16.8(i16, i16) {
; Z80-LABEL: udiv.fix.sat.i16.8:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld c, (ix + 4)
; Z80-NEXT:    ld b, (ix + 5)
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    ld a, 8
; Z80-NEXT:    call __lshl
; Z80-NEXT:    ld c, (ix + 6)
; Z80-NEXT:    ld b, (ix + 7)
; Z80-NEXT:    call __ldivu
; Z80-NEXT:    ld bc, -1
; Z80-NEXT:    call __lcmpu
; Z80-NEXT:    jr c, BB146_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:  BB146_2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: udiv.fix.sat.i16.8:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld bc, (ix + 4)
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    ld a, 8
; EZ80-CODE16-NEXT:    call __lshl
; EZ80-CODE16-NEXT:    ld bc, (ix + 6)
; EZ80-CODE16-NEXT:    call __ldivu
; EZ80-CODE16-NEXT:    ld bc, -1
; EZ80-CODE16-NEXT:    call __lcmpu
; EZ80-CODE16-NEXT:    jr c, BB146_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:  BB146_2:
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: udiv.fix.sat.i16.8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld bc, 0
; EZ80-NEXT:    ld c, l
; EZ80-NEXT:    ld b, h
; EZ80-NEXT:    ld d, 0
; EZ80-NEXT:    ld l, 8
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __lshl
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld iyl, e
; EZ80-NEXT:    ld iyh, d
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __ldivu
; EZ80-NEXT:    ld bc, 65535
; EZ80-NEXT:    call __lcmpu
; EZ80-NEXT:    jr c, BB146_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:  BB146_2:
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i16 @llvm.udiv.fix.sat.i16(i16 %0, i16 %1, i32 8)
  ret i16 %3
}
define i16 @udiv.fix.sat.i16.16(i16, i16) {
; Z80-LABEL: udiv.fix.sat.i16.16:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld c, (ix + 4)
; Z80-NEXT:    ld b, (ix + 5)
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    ld a, 16
; Z80-NEXT:    call __lshl
; Z80-NEXT:    ld c, (ix + 6)
; Z80-NEXT:    ld b, (ix + 7)
; Z80-NEXT:    call __ldivu
; Z80-NEXT:    ld bc, -1
; Z80-NEXT:    call __lcmpu
; Z80-NEXT:    jr c, BB147_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld l, c
; Z80-NEXT:    ld h, b
; Z80-NEXT:  BB147_2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: udiv.fix.sat.i16.16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld bc, (ix + 4)
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    ld a, 16
; EZ80-CODE16-NEXT:    call __lshl
; EZ80-CODE16-NEXT:    ld bc, (ix + 6)
; EZ80-CODE16-NEXT:    call __ldivu
; EZ80-CODE16-NEXT:    ld bc, -1
; EZ80-CODE16-NEXT:    call __lcmpu
; EZ80-CODE16-NEXT:    jr c, BB147_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld l, c
; EZ80-CODE16-NEXT:    ld h, b
; EZ80-CODE16-NEXT:  BB147_2:
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: udiv.fix.sat.i16.16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld bc, 0
; EZ80-NEXT:    ld c, l
; EZ80-NEXT:    ld b, h
; EZ80-NEXT:    ld d, 0
; EZ80-NEXT:    ld l, 16
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __lshl
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    ld iyl, e
; EZ80-NEXT:    ld iyh, d
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    lea bc, iy
; EZ80-NEXT:    ld a, d
; EZ80-NEXT:    call __ldivu
; EZ80-NEXT:    ld bc, 65535
; EZ80-NEXT:    call __lcmpu
; EZ80-NEXT:    jr c, BB147_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    push bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:  BB147_2:
; EZ80-NEXT:    ; kill: def $hl killed $hl killed $uhl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i16 @llvm.udiv.fix.sat.i16(i16 %0, i16 %1, i32 16)
  ret i16 %3
}
declare i32 @llvm.udiv.fix.sat.i32(i32, i32, i32 immarg)
define i32 @udiv.fix.sat.i32.16(i32, i32) {
; Z80-LABEL: udiv.fix.sat.i32.16:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld iy, 16
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    call __lldivu
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld (ix - 2), c
; Z80-NEXT:    ld (ix - 1), b
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    ld c, (ix - 2)
; Z80-NEXT:    ld b, (ix - 1)
; Z80-NEXT:    call __llcmpu
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld iy, 10
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld sp, iy
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    ccf
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    inc a
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB148_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:  BB148_2:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB148_4
; Z80-NEXT:  ; %bb.3:
; Z80-NEXT:    ld de, -1
; Z80-NEXT:  BB148_4:
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: udiv.fix.sat.i32.16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 4
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld iy, 16
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    call __lldivu
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld (ix - 2), bc
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    ld bc, (ix - 2)
; EZ80-CODE16-NEXT:    call __llcmpu
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 2), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld iy, 10
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld sp, iy
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 2)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    inc a
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB148_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:  BB148_2:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB148_4
; EZ80-CODE16-NEXT:  ; %bb.3:
; EZ80-CODE16-NEXT:    ld de, -1
; EZ80-CODE16-NEXT:  BB148_4:
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: udiv.fix.sat.i32.16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld iy, (ix + 6)
; EZ80-NEXT:    ld c, (ix + 9)
; EZ80-NEXT:    ld a, (ix + 15)
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    ld e, c
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    ld hl, 16
; EZ80-NEXT:    push hl
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    push iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld iy, (ix + 12)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    call __lldivu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld iy, 255
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld iy, -1
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llcmpu
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 3), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 3)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ccf
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    inc a
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB148_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    scf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:  BB148_2:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB148_4
; EZ80-NEXT:  ; %bb.3:
; EZ80-NEXT:    ld de, 255
; EZ80-NEXT:  BB148_4:
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i32 @llvm.udiv.fix.sat.i32(i32 %0, i32 %1, i32 16)
  ret i32 %3
}
define i32 @udiv.fix.sat.i32.32(i32, i32) {
; Z80-LABEL: udiv.fix.sat.i32.32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld iy, 32
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 0
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 8)
; Z80-NEXT:    ld h, (ix + 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    call __lldivu
; Z80-NEXT:    ld (ix - 4), l
; Z80-NEXT:    ld (ix - 3), h
; Z80-NEXT:    ld (ix - 2), c
; Z80-NEXT:    ld (ix - 1), b
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 4)
; Z80-NEXT:    ld h, (ix - 3)
; Z80-NEXT:    ld c, (ix - 2)
; Z80-NEXT:    ld b, (ix - 1)
; Z80-NEXT:    call __llcmpu
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld iy, 10
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld sp, iy
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    ccf
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    inc a
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB149_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ld hl, -1
; Z80-NEXT:  BB149_2:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    jr nz, BB149_4
; Z80-NEXT:  ; %bb.3:
; Z80-NEXT:    ld de, -1
; Z80-NEXT:  BB149_4:
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: udiv.fix.sat.i32.32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 4
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld iy, 32
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 0
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    call __lldivu
; EZ80-CODE16-NEXT:    ld (ix - 4), hl
; EZ80-CODE16-NEXT:    ld (ix - 2), bc
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 4)
; EZ80-CODE16-NEXT:    ld bc, (ix - 2)
; EZ80-CODE16-NEXT:    call __llcmpu
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 2), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld iy, 10
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld sp, iy
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 2)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    inc a
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB149_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ld hl, -1
; EZ80-CODE16-NEXT:  BB149_2:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    jr nz, BB149_4
; EZ80-CODE16-NEXT:  ; %bb.3:
; EZ80-CODE16-NEXT:    ld de, -1
; EZ80-CODE16-NEXT:  BB149_4:
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: udiv.fix.sat.i32.32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld iy, (ix + 6)
; EZ80-NEXT:    ld c, (ix + 9)
; EZ80-NEXT:    ld a, (ix + 15)
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    ld e, c
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    ld hl, 32
; EZ80-NEXT:    push hl
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    push iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld iy, (ix + 12)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    call __lldivu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld iy, 255
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld iy, -1
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llcmpu
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 3), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 3)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ccf
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    inc a
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB149_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    scf
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:  BB149_2:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    jr nz, BB149_4
; EZ80-NEXT:  ; %bb.3:
; EZ80-NEXT:    ld de, 255
; EZ80-NEXT:  BB149_4:
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i32 @llvm.udiv.fix.sat.i32(i32 %0, i32 %1, i32 32)
  ret i32 %3
}
declare i64 @llvm.udiv.fix.sat.i64(i64, i64, i32 immarg)
define i64 @udiv.fix.sat.i64.32(i64, i64) {
; Z80-LABEL: udiv.fix.sat.i64.32:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -20
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld c, (ix + 14)
; Z80-NEXT:    ld b, (ix + 15)
; Z80-NEXT:    ld e, (ix + 16)
; Z80-NEXT:    ld d, (ix + 17)
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    push bc
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    call __lldivu
; Z80-NEXT:    ld (ix - 12), l
; Z80-NEXT:    ld (ix - 11), h
; Z80-NEXT:    ld (ix - 14), e
; Z80-NEXT:    ld (ix - 13), d
; Z80-NEXT:    ld (ix - 16), c
; Z80-NEXT:    ld (ix - 15), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 20), l
; Z80-NEXT:    ld (ix - 19), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 16)
; Z80-NEXT:    ld h, (ix + 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 14)
; Z80-NEXT:    ld h, (ix + 15)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 10)
; Z80-NEXT:    ld h, (ix + 11)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    ld c, (ix + 8)
; Z80-NEXT:    ld b, (ix + 9)
; Z80-NEXT:    call __llremu
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld (ix - 4), e
; Z80-NEXT:    ld (ix - 3), d
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 6), l
; Z80-NEXT:    ld (ix - 5), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    push de
; Z80-NEXT:    ld hl, 1
; Z80-NEXT:    push hl
; Z80-NEXT:    push de
; Z80-NEXT:    push de
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    call __llcmpu
; Z80-NEXT:    push af
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ; kill: def $h killed $a
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop af
; Z80-NEXT:    ccf
; Z80-NEXT:    ; kill: def $a killed $a
; Z80-NEXT:    sbc a, a
; Z80-NEXT:    ld iyl, a
; Z80-NEXT:    inc iyl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    ld (ix - 18), c
; Z80-NEXT:    ld (ix - 17), b
; Z80-NEXT:    call __llctlz
; Z80-NEXT:    ld l, a
; Z80-NEXT:    ld a, iyl
; Z80-NEXT:    pop de
; Z80-NEXT:    ld h, 0
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    push bc
; Z80-NEXT:    ld e, c
; Z80-NEXT:    ld d, b
; Z80-NEXT:    call __lladd
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld iy, 10
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld sp, iy
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld iy, 32
; Z80-NEXT:    jr nz, BB150_2
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld iyl, e
; Z80-NEXT:    ld iyh, d
; Z80-NEXT:    ex de, hl
; Z80-NEXT:  BB150_2:
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    jr nz, BB150_4
; Z80-NEXT:  ; %bb.3:
; Z80-NEXT:    ex de, hl
; Z80-NEXT:  BB150_4:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    jr nz, BB150_6
; Z80-NEXT:  ; %bb.5:
; Z80-NEXT:    ld e, c
; Z80-NEXT:    ld d, b
; Z80-NEXT:  BB150_6:
; Z80-NEXT:    bit 0, a
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    jr nz, BB150_8
; Z80-NEXT:  ; %bb.7:
; Z80-NEXT:    ld c, (ix - 8)
; Z80-NEXT:    ld b, (ix - 7)
; Z80-NEXT:  BB150_8:
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ld c, iyl
; Z80-NEXT:    ld b, iyh
; Z80-NEXT:    call __llsub
; Z80-NEXT:    ld (ix - 8), l
; Z80-NEXT:    ld (ix - 7), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld hl, 32
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 20)
; Z80-NEXT:    ld h, (ix - 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 12)
; Z80-NEXT:    ld h, (ix - 11)
; Z80-NEXT:    ld e, (ix - 14)
; Z80-NEXT:    ld d, (ix - 13)
; Z80-NEXT:    ld c, (ix - 16)
; Z80-NEXT:    ld b, (ix - 15)
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 12), l
; Z80-NEXT:    ld (ix - 11), h
; Z80-NEXT:    ld (ix - 14), e
; Z80-NEXT:    ld (ix - 13), d
; Z80-NEXT:    ld (ix - 16), c
; Z80-NEXT:    ld (ix - 15), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 20), l
; Z80-NEXT:    ld (ix - 19), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 6)
; Z80-NEXT:    ld h, (ix - 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    ld c, (ix - 18)
; Z80-NEXT:    ld b, (ix - 17)
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld (ix - 4), e
; Z80-NEXT:    ld (ix - 3), d
; Z80-NEXT:    ld (ix - 6), c
; Z80-NEXT:    ld (ix - 5), b
; Z80-NEXT:    push iy
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    ld (ix - 10), l
; Z80-NEXT:    ld (ix - 9), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld bc, 0
; Z80-NEXT:    push bc
; Z80-NEXT:    ld hl, 1
; Z80-NEXT:    ld e, c
; Z80-NEXT:    ld d, b
; Z80-NEXT:    call __llshl
; Z80-NEXT:    ld (ix - 18), l
; Z80-NEXT:    ld (ix - 17), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ld hl, 1
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ld h, (ix - 17)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 18), l
; Z80-NEXT:    ld (ix - 17), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ld h, (ix - 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 18)
; Z80-NEXT:    ld h, (ix + 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 12)
; Z80-NEXT:    ld h, (ix + 13)
; Z80-NEXT:    ld e, (ix + 14)
; Z80-NEXT:    ld d, (ix + 15)
; Z80-NEXT:    ld c, (ix + 16)
; Z80-NEXT:    ld b, (ix + 17)
; Z80-NEXT:    call __lladd
; Z80-NEXT:    ld (ix - 18), l
; Z80-NEXT:    ld (ix - 17), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 18)
; Z80-NEXT:    ld h, (ix - 17)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 10)
; Z80-NEXT:    ld h, (ix - 9)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld e, (ix - 4)
; Z80-NEXT:    ld d, (ix - 3)
; Z80-NEXT:    ld c, (ix - 6)
; Z80-NEXT:    ld b, (ix - 5)
; Z80-NEXT:    call __lldivu
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix - 8)
; Z80-NEXT:    ld h, (ix - 7)
; Z80-NEXT:    push hl
; Z80-NEXT:    push iy
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    call __llshru
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    push iy
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 20)
; Z80-NEXT:    ld h, (ix - 19)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix - 12)
; Z80-NEXT:    ld h, (ix - 11)
; Z80-NEXT:    ld e, (ix - 14)
; Z80-NEXT:    ld d, (ix - 13)
; Z80-NEXT:    ld c, (ix - 16)
; Z80-NEXT:    ld b, (ix - 15)
; Z80-NEXT:    call __lladd
; Z80-NEXT:    ld (ix - 2), l
; Z80-NEXT:    ld (ix - 1), h
; Z80-NEXT:    ld hl, 10
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld l, (ix - 2)
; Z80-NEXT:    ld h, (ix - 1)
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: udiv.fix.sat.i64.32:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    lea hl, ix - 20
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld iy, (ix + 12)
; EZ80-CODE16-NEXT:    ld bc, (ix + 14)
; EZ80-CODE16-NEXT:    ld de, (ix + 16)
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    call __lldivu
; EZ80-CODE16-NEXT:    ld (ix - 12), hl
; EZ80-CODE16-NEXT:    ld (ix - 14), de
; EZ80-CODE16-NEXT:    ld (ix - 16), bc
; EZ80-CODE16-NEXT:    ld (ix - 20), iy
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 16)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 14)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld de, (ix + 6)
; EZ80-CODE16-NEXT:    ld bc, (ix + 8)
; EZ80-CODE16-NEXT:    call __llremu
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld (ix - 4), de
; EZ80-CODE16-NEXT:    ld (ix - 6), iy
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld de, 0
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, 1
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    call __llcmpu
; EZ80-CODE16-NEXT:    push af
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    ld (ix - 8), l
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld l, (ix - 8)
; EZ80-CODE16-NEXT:    ; kill: def $h killed $a
; EZ80-CODE16-NEXT:    ex (sp), hl
; EZ80-CODE16-NEXT:    pop af
; EZ80-CODE16-NEXT:    ccf
; EZ80-CODE16-NEXT:    ; kill: def $a killed $a
; EZ80-CODE16-NEXT:    sbc a, a
; EZ80-CODE16-NEXT:    ld iyl, a
; EZ80-CODE16-NEXT:    inc iyl
; EZ80-CODE16-NEXT:    ld hl, (ix - 6)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    ld (ix - 18), bc
; EZ80-CODE16-NEXT:    call __llctlz
; EZ80-CODE16-NEXT:    ld l, a
; EZ80-CODE16-NEXT:    ld a, iyl
; EZ80-CODE16-NEXT:    pop de
; EZ80-CODE16-NEXT:    ld h, 0
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld e, c
; EZ80-CODE16-NEXT:    ld d, b
; EZ80-CODE16-NEXT:    call __lladd
; EZ80-CODE16-NEXT:    ld (ix - 8), iy
; EZ80-CODE16-NEXT:    ld iy, 10
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld sp, iy
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld iy, 32
; EZ80-CODE16-NEXT:    jr nz, BB150_2
; EZ80-CODE16-NEXT:  ; %bb.1:
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:    ld iyl, e
; EZ80-CODE16-NEXT:    ld iyh, d
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:  BB150_2:
; EZ80-CODE16-NEXT:    ld (ix - 10), iy
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    lea hl, iy
; EZ80-CODE16-NEXT:    jr nz, BB150_4
; EZ80-CODE16-NEXT:  ; %bb.3:
; EZ80-CODE16-NEXT:    ex de, hl
; EZ80-CODE16-NEXT:  BB150_4:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    jr nz, BB150_6
; EZ80-CODE16-NEXT:  ; %bb.5:
; EZ80-CODE16-NEXT:    ld e, c
; EZ80-CODE16-NEXT:    ld d, b
; EZ80-CODE16-NEXT:  BB150_6:
; EZ80-CODE16-NEXT:    bit 0, a
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    jr nz, BB150_8
; EZ80-CODE16-NEXT:  ; %bb.7:
; EZ80-CODE16-NEXT:    ld bc, (ix - 8)
; EZ80-CODE16-NEXT:  BB150_8:
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    lea de, iy
; EZ80-CODE16-NEXT:    lea bc, iy
; EZ80-CODE16-NEXT:    call __llsub
; EZ80-CODE16-NEXT:    ld (ix - 8), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 32
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 20)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 12)
; EZ80-CODE16-NEXT:    ld de, (ix - 14)
; EZ80-CODE16-NEXT:    ld bc, (ix - 16)
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 12), hl
; EZ80-CODE16-NEXT:    ld (ix - 14), de
; EZ80-CODE16-NEXT:    ld (ix - 16), bc
; EZ80-CODE16-NEXT:    ld (ix - 20), iy
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 6)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    ld bc, (ix - 18)
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld (ix - 4), de
; EZ80-CODE16-NEXT:    ld (ix - 6), bc
; EZ80-CODE16-NEXT:    ld (ix - 10), iy
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld bc, 0
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    ld hl, 1
; EZ80-CODE16-NEXT:    ld e, c
; EZ80-CODE16-NEXT:    ld d, b
; EZ80-CODE16-NEXT:    call __llshl
; EZ80-CODE16-NEXT:    ld (ix - 18), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, 1
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 18)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 18), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix + 12)
; EZ80-CODE16-NEXT:    ld de, (ix + 14)
; EZ80-CODE16-NEXT:    ld bc, (ix + 16)
; EZ80-CODE16-NEXT:    call __lladd
; EZ80-CODE16-NEXT:    ld (ix - 18), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 18)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 10)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld de, (ix - 4)
; EZ80-CODE16-NEXT:    ld bc, (ix - 6)
; EZ80-CODE16-NEXT:    call __lldivu
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 8)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    call __llshru
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 4
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    push iy
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 20)
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 12)
; EZ80-CODE16-NEXT:    ld de, (ix - 14)
; EZ80-CODE16-NEXT:    ld bc, (ix - 16)
; EZ80-CODE16-NEXT:    call __lladd
; EZ80-CODE16-NEXT:    ld (ix - 2), hl
; EZ80-CODE16-NEXT:    ld hl, 10
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ld hl, (ix - 2)
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: udiv.fix.sat.i64.32:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    lea hl, ix - 21
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld bc, (ix + 12)
; EZ80-NEXT:    ld de, (ix + 15)
; EZ80-NEXT:    ld hl, (ix + 18)
; EZ80-NEXT:    ld iy, (ix + 21)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __lldivu
; EZ80-NEXT:    ld (ix - 9), hl
; EZ80-NEXT:    ld (ix - 12), de
; EZ80-NEXT:    ld (ix - 15), bc
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld hl, (ix + 18)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    ld bc, (ix + 12)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __llremu
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld (ix - 3), iy
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, 256
; EZ80-NEXT:    push hl
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    lea hl, iy
; EZ80-NEXT:    call __llcmpu
; EZ80-NEXT:    push af
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    ld (ix - 6), l
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix - 6)
; EZ80-NEXT:    ; kill: def $h killed $a
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop af
; EZ80-NEXT:    ccf
; EZ80-NEXT:    ; kill: def $a killed $a
; EZ80-NEXT:    sbc a, a
; EZ80-NEXT:    ld iyl, a
; EZ80-NEXT:    inc iyl
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    ld (ix - 18), de
; EZ80-NEXT:    ld (ix - 21), bc
; EZ80-NEXT:    call __llctlz
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, hl
; EZ80-NEXT:    ld l, a
; EZ80-NEXT:    ld a, iyl
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    push de
; EZ80-NEXT:    push de
; EZ80-NEXT:    push de
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __lladd
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    ld iy, 32
; EZ80-NEXT:    jr nz, BB150_2
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    push hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:  BB150_2:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    ld hl, 0
; EZ80-NEXT:    jr nz, BB150_4
; EZ80-NEXT:  ; %bb.3:
; EZ80-NEXT:    ex de, hl
; EZ80-NEXT:  BB150_4:
; EZ80-NEXT:    bit 0, a
; EZ80-NEXT:    ld.sis de, 0
; EZ80-NEXT:    ; kill: def $de killed $de def $ude
; EZ80-NEXT:    jr nz, BB150_6
; EZ80-NEXT:  ; %bb.5:
; EZ80-NEXT:    ld e, c
; EZ80-NEXT:    ld d, b
; EZ80-NEXT:  BB150_6:
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld hl, 32
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llsub
; EZ80-NEXT:    ld (ix - 6), hl
; EZ80-NEXT:    ld hl, 9
; EZ80-NEXT:    add hl, sp
; EZ80-NEXT:    ld sp, hl
; EZ80-NEXT:    ld hl, 32
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 9)
; EZ80-NEXT:    ld de, (ix - 12)
; EZ80-NEXT:    ld bc, (ix - 15)
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    ld (ix - 9), hl
; EZ80-NEXT:    ld (ix - 12), de
; EZ80-NEXT:    ld (ix - 15), bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    push iy
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    ld de, (ix - 18)
; EZ80-NEXT:    ld bc, (ix - 21)
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    ld (ix - 3), hl
; EZ80-NEXT:    ld (ix - 18), de
; EZ80-NEXT:    ld (ix - 21), bc
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ld hl, (ix - 6)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, 1
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    ld.sis bc, 0
; EZ80-NEXT:    call __llshl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld iy, 1
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix + 15)
; EZ80-NEXT:    ld de, (ix + 18)
; EZ80-NEXT:    ld bc, (ix + 21)
; EZ80-NEXT:    ; kill: def $bc killed $bc killed $ubc
; EZ80-NEXT:    call __lladd
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 3)
; EZ80-NEXT:    ld de, (ix - 18)
; EZ80-NEXT:    ld bc, (ix - 21)
; EZ80-NEXT:    call __lldivu
; EZ80-NEXT:    ld iy, 9
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld sp, iy
; EZ80-NEXT:    ld iy, (ix - 6)
; EZ80-NEXT:    push iy
; EZ80-NEXT:    call __llshru
; EZ80-NEXT:    ; kill: def $bc killed $bc def $ubc
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    push bc
; EZ80-NEXT:    push de
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld hl, (ix - 9)
; EZ80-NEXT:    ld de, (ix - 12)
; EZ80-NEXT:    ld bc, (ix - 15)
; EZ80-NEXT:    call __lladd
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
  call i64 @llvm.udiv.fix.sat.i64(i64 %0, i64 %1, i32 32)
  ret i64 %3
}
