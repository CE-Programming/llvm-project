; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=z80 < %s | FileCheck %s --check-prefixes=Z80
; RUN: llc -mtriple=ez80-code16 < %s | FileCheck %s --check-prefixes=EZ80-CODE16

declare void @llvm.memcpy.p0i8.p0i8.i16(i8*, i8*, i16, i1)
define void @memcpy.p0i8.p0i8.i16(i8*, i8*, i16) {
; Z80-LABEL: memcpy.p0i8.p0i8.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld d, (iy + 5)
; Z80-NEXT:    ld c, (iy + 6)
; Z80-NEXT:    ld b, (iy + 7)
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    push hl
; Z80-NEXT:    call _memcpy
; Z80-NEXT:    ld hl, 6
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: memcpy.p0i8.p0i8.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld de, (iy + 4)
; EZ80-CODE16-NEXT:    ld bc, (iy + 6)
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    call _memcpy
; EZ80-CODE16-NEXT:    ld hl, 6
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ret
  call void @llvm.memcpy.p0i8.p0i8.i16(i8* %0, i8* %1, i16 %2, i1 false)
  ret void
}

declare void @llvm.memcpy.inline.p0i8.p0i8.i16(i8*, i8*, i16, i1)
define void @memcpy.inline.p0i8.p0i8.i16(i8*, i8*) {
; Z80-LABEL: memcpy.inline.p0i8.p0i8.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld e, (iy + 2)
; Z80-NEXT:    ld d, (iy + 3)
; Z80-NEXT:    ld l, (iy + 4)
; Z80-NEXT:    ld h, (iy + 5)
; Z80-NEXT:    ld bc, 32
; Z80-NEXT:    ldir
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: memcpy.inline.p0i8.p0i8.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld de, (iy + 2)
; EZ80-CODE16-NEXT:    ld hl, (iy + 4)
; EZ80-CODE16-NEXT:    ld bc, 32
; EZ80-CODE16-NEXT:    ldir
; EZ80-CODE16-NEXT:    ret
  call void @llvm.memcpy.inline.p0i8.p0i8.i16(i8* %0, i8* %1, i16 32, i1 false)
  ret void
}

declare void @llvm.memmove.p0i8.p0i8.i16(i8*, i8*, i16, i1)
define void @memmove.p0i8.p0i8.i16(i8*, i8*, i16) {
; Z80-LABEL: memmove.p0i8.p0i8.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld e, (iy + 4)
; Z80-NEXT:    ld d, (iy + 5)
; Z80-NEXT:    ld c, (iy + 6)
; Z80-NEXT:    ld b, (iy + 7)
; Z80-NEXT:    push bc
; Z80-NEXT:    push de
; Z80-NEXT:    push hl
; Z80-NEXT:    call _memmove
; Z80-NEXT:    ld hl, 6
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: memmove.p0i8.p0i8.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld de, (iy + 4)
; EZ80-CODE16-NEXT:    ld bc, (iy + 6)
; EZ80-CODE16-NEXT:    push bc
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    call _memmove
; EZ80-CODE16-NEXT:    ld hl, 6
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ret
  call void @llvm.memmove.p0i8.p0i8.i16(i8* %0, i8* %1, i16 %2, i1 false)
  ret void
}

declare void @llvm.memset.p0i8.i16(i8*, i8, i16, i1)
define void @memset.p0i8.i16(i8*, i8, i16) {
; Z80-LABEL: memset.p0i8.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld a, (iy + 4)
; Z80-NEXT:    ld e, (iy + 6)
; Z80-NEXT:    ld d, (iy + 7)
; Z80-NEXT:    push de
; Z80-NEXT:    ld e, a
; Z80-NEXT:    push de
; Z80-NEXT:    push hl
; Z80-NEXT:    call _memset
; Z80-NEXT:    ld hl, 6
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: memset.p0i8.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld a, (iy + 4)
; EZ80-CODE16-NEXT:    ld de, (iy + 6)
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    ld e, a
; EZ80-CODE16-NEXT:    push de
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    call _memset
; EZ80-CODE16-NEXT:    ld hl, 6
; EZ80-CODE16-NEXT:    add hl, sp
; EZ80-CODE16-NEXT:    ld sp, hl
; EZ80-CODE16-NEXT:    ret
  call void @llvm.memset.p0i8.i16(i8* %0, i8 %1, i16 %2, i1 false)
  ret void
}

declare i8* @llvm.ptrmask.p0i8.i16(i8*, i16)
define i8* @ptrmask.p0i8.i16(i8*, i16) {
; Z80-LABEL: ptrmask.p0i8.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld c, (iy + 4)
; Z80-NEXT:    ld b, (iy + 5)
; Z80-NEXT:    call __sand
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: ptrmask.p0i8.i16:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld bc, (iy + 4)
; EZ80-CODE16-NEXT:    call __sand
; EZ80-CODE16-NEXT:    ret
  call i8* @llvm.ptrmask.p0i8.i16(i8* %0, i16 %1)
  ret i8* %3
}

declare i8 addrspace(1)* @llvm.ptrmask.p1i8.i24(i8 addrspace(1)*, i24)
define i8 addrspace(1)* @ptrmask.p1i8.i24(i8 addrspace(1)*, i24) {
; Z80-LABEL: ptrmask.p1i8.i24:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld c, (iy + 4)
; Z80-NEXT:    ld b, (iy + 5)
; Z80-NEXT:    call __sand
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: ptrmask.p1i8.i24:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld bc, (iy + 6)
; EZ80-CODE16-NEXT:    ld e, (iy + 4)
; EZ80-CODE16-NEXT:    ld a, (iy + 8)
; EZ80-CODE16-NEXT:    call __iand
; EZ80-CODE16-NEXT:    ret
  call i8 addrspace(1)* @llvm.ptrmask.p1i8.i24(i8 addrspace(1)* %0, i24 %1)
  ret i8 addrspace(1)* %3
}
